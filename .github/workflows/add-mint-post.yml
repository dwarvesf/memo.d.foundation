name: Mint Articles to Arweave & Contract

on:
  workflow_dispatch: # Keep manual trigger
  push:
    branches:
      - main
    paths:
      - 'db/vault.parquet' # Only trigger on changes to this file

concurrency:
  group: ${{ github.repository }}-workflow
  cancel-in-progress: false

env:
  VAULT_ADDR: ${{ secrets.VAULT_ADDR }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout contents repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.DWARVES_PAT }}
          submodules: recursive
          fetch-depth: 1

      - name: Install Vault CLI
        run: |
          rm -rf vault_1.15.5_linux_amd64.zip
          wget https://releases.hashicorp.com/vault/1.15.5/vault_1.15.5_linux_amd64.zip
          sudo unzip -o vault_1.15.5_linux_amd64.zip -d /usr/local/bin/

      - name: Authenticate with Vault AppRole
        run: |
          VAULT_TOKEN=$(vault write -field=token auth/approle/login \
            role_id="${{ secrets.VAULT_ROLE_ID }}" \
            secret_id="${{ secrets.VAULT_SECRET_ID }}")
          echo "VAULT_TOKEN=$VAULT_TOKEN" >> $GITHUB_ENV

      - name: Get files to process
        id: get-files
        run: |
          # Install DuckDB
          wget -q https://github.com/duckdb/duckdb/releases/download/v1.2.1/duckdb_cli-linux-amd64.zip
          unzip -q duckdb_cli-linux-amd64.zip
          chmod +x duckdb

          # Query for files that need to be processed
          # We now get all files that should be minted, regardless of their current state
          FILES_TO_PROCESS=$(./duckdb -csv -noheader -c "SELECT COALESCE(STRING_AGG(file_path, ' '), '') FROM 'db/vault.parquet' WHERE should_mint = true AND token_id IS NULL;" | tr -d '"')

          # Output the results
          echo "Found files to process: $FILES_TO_PROCESS"
          echo "files=$FILES_TO_PROCESS" >> $GITHUB_OUTPUT

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install --legacy-peer-deps arweave ethers gray-matter crypto glob dotenv tsx

      - name: Run mint-article script
        id: mint
        if: steps.get-files.outputs.files != ''
        env:
          CONTRACT_ADDRESS: ${{ vars.CONTRACT_ADDRESS }}
          RPC_URL: ${{ vars.RPC_URL }}
          MOCHI_PROFILE_API: ${{ secrets.MOCHI_PROFILE_API }}
        run: |
          # Get decrypted wallet private key from Vault
          export WALLET_PRIVATE_KEY=$(vault write -field=plaintext transit/decrypt/memo-d-foundation-WALLET_PRIVATE_KEY ciphertext="${{ secrets.ENCRYPTED_WALLET_PRIVATE_KEY }}" | base64 -d)

          # Get Arweave wallet JSON from secrets
          export ARWEAVE_WALLET_JSON='${{ secrets.ARWEAVE_WALLET_JSON }}'

          # Run the script with each file path as a separate argument
          npx tsx scripts/mint-article.ts ${{ steps.get-files.outputs.files }}

      - name: Notify Discord
        if: steps.mint.outputs.mint-success == true || steps.mint.outputs.mint-success == 'true'
        run: |
          npx tsx scripts/notify-discord-minted-articles.ts ${{ steps.get-files.outputs.files }}

      - name: Commit and push changes
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git checkout main || git checkout master || echo "WARN: Failed to checkout main or master in parent repository. Proceeding with current branch."
          # Process Level 1 submodules
          git submodule foreach '
            echo "Processing L1 submodule: $name ($path)"
            git checkout main || git checkout master || echo "WARN: Failed to checkout main/master in L1 submodule $name, attempting push on current state"
            git add --all
            git commit -m "chore(ci): reindex" || echo "INFO: No changes to commit in L1 submodule $name"
            git push || echo "WARN: Failed to push L1 submodule $name. Continuing..."

            # Process Level 2 submodules (submodules of the current L1 submodule)
            # This command is executed from within the L1 submodule directory
            # Wrapped in a subshell to catch errors from the inner foreach
            (git submodule foreach '\''
              echo "  Processing L2 submodule: $name ($path)"
              git checkout main || git checkout master || echo "  WARN: Failed to checkout main/master in L2 submodule $name, attempting push on current state"
              git add --all
              git commit -m "chore(ci): reindex" || echo "  INFO: No changes to commit in L2 submodule $name"
              git push || echo "  WARN: Failed to push L2 submodule $name. Continuing..."
            '\'' || echo "WARN: Inner foreach for L2 in L1 submodule $name ($path) encountered an issue. Continuing...")
          ' || echo "WARN: Outer foreach for L1 submodules encountered an issue. Attempting to process parent repo."
          # Commit and push changes in the parent repository
          git add --all
          git commit -m "chore(ci): reindex" || echo "INFO: No changes to commit in parent repository"
          git push || echo "WARN: Failed to push parent repository."
