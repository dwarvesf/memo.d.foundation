name: Deploy Markdown to Arweave

on:
  workflow_dispatch: # Keep manual trigger
  push:
    branches:
      - main
    paths:
      - 'db/vault.parquet' # Only trigger on changes to this file

concurrency:
  group: ${{ github.repository }}-workflow
  cancel-in-progress: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout contents repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.DWARVES_PAT }}
          submodules: recursive
          fetch-depth: 1

      - name: Get changed files
        id: changed-files
        run: |
          # Install DuckDB
          wget -q https://github.com/duckdb/duckdb/releases/download/v1.2.1/duckdb_cli-linux-amd64.zip
          unzip -q duckdb_cli-linux-amd64.zip
          chmod +x duckdb

          # Query for files that have perma_storage_id = 'true'
          CHANGED_FILES=$(./duckdb -csv -noheader -c "SELECT COALESCE(STRING_AGG(file_path, ','), '') FROM 'db/vault.parquet' WHERE should_deploy_perma_storage = true AND perma_storage_id IS NULL;" | tr -d '"')

          # Output the results
          echo "Found markdown files for permanent storage: $CHANGED_FILES"
          echo "files=$CHANGED_FILES" >> $GITHUB_OUTPUT

      - name: Install Pnpm
        uses: pnpm/action-setup@v4
  
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Install Arweave
        run: pnpm add -D arweave

      - name: Create wallet file
        run: |
          echo '${{ secrets.ARWEAVE_WALLET_JSON }}' > wallet.json
          chmod 600 wallet.json

      - name: Process markdown files
        id: deploy
        if: steps.changed-files.outputs.files != ''
        env:
          MOCHI_PROFILE_API: ${{ secrets.MOCHI_PROFILE_API }}
        run: |
          npx tsx scripts/deploy-arweave.ts '${{ steps.changed-files.outputs.files }}'

      - name: Commit and push changes
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git checkout main || git checkout master || echo "WARN: Failed to checkout main or master in parent repository. Proceeding with current branch."
          # Process Level 1 submodules
          git submodule foreach '
            echo "Processing L1 submodule: $name ($path)"
            git checkout main || git checkout master || echo "WARN: Failed to checkout main/master in L1 submodule $name, attempting push on current state"
            git add --all
            git commit -m "chore(ci): reindex" || echo "INFO: No changes to commit in L1 submodule $name"
            git push || echo "WARN: Failed to push L1 submodule $name. Continuing..."

            # Process Level 2 submodules (submodules of the current L1 submodule)
            # This command is executed from within the L1 submodule directory
            # Wrapped in a subshell to catch errors from the inner foreach
            (git submodule foreach '\''
              echo "  Processing L2 submodule: $name ($path)"
              git checkout main || git checkout master || echo "  WARN: Failed to checkout main/master in L2 submodule $name, attempting push on current state"
              git add --all
              git commit -m "chore(ci): reindex" || echo "  INFO: No changes to commit in L2 submodule $name"
              git push || echo "  WARN: Failed to push L2 submodule $name. Continuing..."
            '\'' || echo "WARN: Inner foreach for L2 in L1 submodule $name ($path) encountered an issue. Continuing...")
          ' || echo "WARN: Outer foreach for L1 submodules encountered an issue. Attempting to process parent repo."
          # Commit and push changes in the parent repository
          git add --all
          git commit -m "chore(ci): reindex" || echo "INFO: No changes to commit in parent repository"
          git push || echo "WARN: Failed to push parent repository."
