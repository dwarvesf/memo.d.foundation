# This file will be included by the main nginx.conf or replace it.
# It assumes nginx_redirect_map.conf is in the same directory or a known path.

# Increase the hash bucket size for larger maps
# This is necessary if you have a large number of redirects.
# Current implementation capability for 100k lines.
map_hash_bucket_size 256;
map_hash_max_size 131072;

# Include the generated redirect map
# The path might need adjustment based on where it's copied in the Docker image.
# For now, assuming it's in /etc/nginx/conf.d/ or similar.
# We will copy nginx_redirect_map.conf to /etc/nginx/conf.d/ in the Dockerfile.
include /etc/nginx/conf.d/nginx_redirect_map.conf;

# Map to determine the limited feed file path based on the 'limit' query parameter
map $arg_limit $limited_feed_path {
    # If limit is a positive integer, construct the limited file path
    ~^[1-9]\d*$ "/${feed_type}_$arg_limit.xml";
    # Otherwise, set to an empty string (or a non-matching value)
    default "";
}

server {
    listen 80;
    server_name localhost; # Adjust as necessary

    # Root directory for your static Next.js export
    root /usr/share/nginx/html;
    index index.html index.htm;

    # Optional: Remove trailing slash for non-root URIs
    # This helps normalize URIs before they hit the main location block and redirect map.
    # It prevents issues where a redirect map might only have entries for /path but not /path/.
    location ~ ^/(.+)/$ {
        return 301 /$1$is_args$args;
    }

    # Serving the actual RSS/Atom feed content generated by njs
    # This location handles /rss.xml, /atom.xml, /feed.xml, /index.xml
    # It also handles the 'limit' query parameter, e.g., /rss.xml?limit=50 -> /rss_50.xml
    location ~ ^/(?<feed_type>rss|atom|feed|index)\.xml$ {
        # Try to serve the limited version first (if $limited_feed_path is set by map),
        # then the original URI, then 404.
        # The map directive above sets $limited_feed_path based on $arg_limit.
        try_files $limited_feed_path $uri /404.html;
    }

    # For the /feed/index.xml path (specific to Hugo/some generators)
    # It also handles the 'limit' query parameter, e.g., /feed/index.xml?limit=50 -> /feed_50.xml
    location = /feed/index.xml {
        # Try to serve the limited version first (if $limited_feed_path is set by map),
        # then the original /feed.xml, then 404.
        # The map directive above sets $limited_feed_path based on $arg_limit.
        # Note: The map uses $feed_type, which is not captured in this specific location.
        # We need a separate map or a different approach for this specific path.
        # Let's adjust the map to handle this specific case or use a different variable.

        # Reverting to a simpler approach for this specific location to avoid map complexity
        # for a single fixed path. We'll use a nested location or rewrite if needed,
        # but for now, let's keep it serving the default /feed.xml or limited /feed_N.xml
        # based on the limit.

        # Using a rewrite to handle the limit parameter for this specific path
        if ($arg_limit ~ ^[1-9]\d*$) {
            rewrite ^/feed/index\.xml$ /feed_$arg_limit.xml last;
        }
        # If no valid limit or rewrite didn't happen, serve the default /feed.xml
        try_files /feed.xml /404.html;
    }

    location / {
        # Check if the requested URI has a redirect target in our map
        if ($redirect_target != 0) {
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "0";
            return 301 $redirect_target$is_args$args;
        }

        # If no redirect, try to serve the file according to Next.js SSG structure
        # 1. Try direct file match (for assets like .css, .js, images)
        # 2. Try URI with .html appended (for pages like /about -> /about.html)
        # 3. Try URI as a directory with index.html (for /path -> /path/index.html)
        # 4. Fallback to 404 page
        try_files $uri $uri.html ${uri}/index.html /404.html;
    }

    # Standard error pages
    error_page 404 /404.html;
    location = /404.html {
        root /usr/share/nginx/html; # Ensure Nginx can find 404.html
        internal;
    }

    # You might not have a generic 50x.html with Next.js SSG.
    # Nginx's default 50x page will be used if not specified and present.
    # If you have a custom 50x.html, uncomment and adjust:
    # error_page 500 502 503 504 /50x.html;
    # location = /50x.html {
    #     root /usr/share/nginx/html;
    #     internal;
    # }

    # Deny access to hidden files
    location ~ /\. {
        deny all;
    }

    # Add any other specific Nginx configurations you need
    # For example, gzip compression, cache control headers, etc.
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript image/svg+xml;
}
