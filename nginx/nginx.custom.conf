# This file will be included by the main nginx.conf or replace it.
# It assumes nginx_redirect_map.conf is in the same directory or a known path.

# Increase the hash bucket size for larger maps.
# This is necessary if you have a large number of redirects in nginx_redirect_map.conf.
# These settings are chosen to support potentially large maps (e.g., 100k+ lines).
map_hash_bucket_size 256; # Default is typically 32 or 64. Larger can reduce collisions.
map_hash_max_size 131072;  # Default is 2048 bytes. Max size of the hash table.

# Include the generated redirect map.
# The path might need adjustment based on where it's copied in the Docker image.
# Assumed to be in /etc/nginx/conf.d/ as per common Docker setups.
include /etc/nginx/conf.d/nginx_redirect_map.conf;

# Map to determine the limited feed file path based on the 'limit' query parameter.
# The '$feed_type' variable, used in the path string, is captured by the specific 
# location block that utilizes this map (e.g., location ~ ^/(?<feed_type>rss|atom|feed|index)\.xml$).
# Nginx evaluates map variables lazily, so '$feed_type' will have the correct value at the time of use.
map $arg_limit $general_limited_feed_path {
    # If 'limit' is a positive integer (e.g., "50"), construct the limited file path.
    # Example: if feed_type is "rss" and limit is "50", path becomes "/rss_50.xml".
    ~^[1-9]\d*$ "/${feed_type}_$arg_limit.xml";
    # Otherwise, set to an empty string. try_files will skip an empty path.
    default "";
}

# Map to determine the limited feed file path for the special /feed/index.xml URI,
# based on the 'limit' query parameter. This map is specific to the 'location = /feed/index.xml' block.
map $arg_limit $feed_index_limited_feed_path {
    # If 'limit' is a positive integer (e.g., "50"), construct the limited file path at the root.
    # Example: if limit is "50", path becomes "/feed_50.xml".
    ~^[1-9]\d*$ "/feed_$arg_limit.xml";
    # Otherwise, set to an empty string. try_files will skip an empty path.
    default "";
}

server {
    listen 80;
    server_name localhost; # Adjust for your domain in production environments

    # Root directory for your static Next.js export
    root /usr/share/nginx/html;
    # Default file to serve for directory requests (e.g., /about/ -> /about/index.html)
    index index.html index.htm;

    # Optional: Remove trailing slash from URIs for consistency and SEO.
    # This helps normalize URIs before they hit the main location block or redirect map.
    # Example: /path/ -> /path (with query string preserved)
    location ~ ^/(.+)/$ {
        return 301 /$1$is_args$args;
    }

    # Serve RSS/Atom/Feed XML files, with support for a 'limit' query parameter.
    # This location handles requests like /rss.xml, /atom.xml, /feed.xml, /index.xml.
    # It captures 'feed_type' (rss, atom, etc.) from the URI for use in the $general_limited_feed_path map.
    location ~ ^/(?<feed_type>rss|atom|feed|index)\.xml$ {
        # Try to serve the limited version first (e.g., /rss_50.xml if ?limit=50),
        # then the original URI (e.g., /rss.xml), finally fall back to 404.
        # If $general_limited_feed_path is empty (no valid 'limit'), try_files skips it.
        try_files $general_limited_feed_path $uri /404.html;
    }

    # Special handling for /feed/index.xml (common in some static site generators like Hugo).
    # Supports the 'limit' query parameter, e.g., /feed/index.xml?limit=50 -> /feed_50.xml.
    location = /feed/index.xml {
        # Try to serve the limited version first (e.g., /feed_50.xml if ?limit=50),
        # then the default /feed.xml (note: specific fallback to /feed.xml), finally 404.
        # If $feed_index_limited_feed_path is empty, try_files skips it.
        try_files $feed_index_limited_feed_path /feed.xml /404.html;
    }

    # Main location block for handling all other requests.
    location / {
        # Check if the requested URI has a redirect target in the nginx_redirect_map.conf.
        # The '$redirect_target' variable is set by the 'include'd map file.
        # It's expected to be the target path for redirection, or '0' / empty if no redirect.
        if ($redirect_target != 0) { 
            # Add headers to prevent caching of the 301 redirect itself by clients/proxies.
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache"; # For HTTP/1.0 legacy clients/proxies
            add_header Expires "0";      # For proxies
            return 301 $redirect_target$is_args$args; # Permanent redirect, preserving query string
        }

        # If no redirect, attempt to serve static files based on Next.js SSG structure:
        # 1. Try direct file match (e.g., /assets/image.png, /css/style.css).
        # 2. Try URI with .html appended (e.g., /about -> /about.html).
        # 3. Try URI as a directory with index.html (e.g., /blog -> /blog/index.html).
        # 4. Fallback to the custom 404 page if no match.
        try_files $uri $uri.html ${uri}/index.html /404.html;
    }

    # Custom 404 error page configuration.
    error_page 404 /404.html;
    location = /404.html {
        # 'root' is inherited from the server block if not specified here.
        # Explicitly setting it (root /usr/share/nginx/html;) is fine but often redundant.
        internal; # Ensures this location is only accessible via internal Nginx redirects, not directly.
    }

    # Placeholder for custom 50x error pages (server errors).
    # Nginx's default 50x page will be used if these are not specified and a custom page isn't found.
    # If you have a custom 50x.html, uncomment and adjust:
    # error_page 500 502 503 504 /50x.html;
    # location = /50x.html {
    #     root /usr/share/nginx/html;
    #     internal;
    # }

    # Deny access to hidden files (e.g., .htaccess, .git, .env).
    location ~ /\. {
        deny all;
    }

    # Gzip compression settings to reduce transfer size for text-based assets.
    gzip on;
    gzip_vary on; # Adds 'Vary: Accept-Encoding' header, important for proxies.
    gzip_proxied any; # Compress for all proxied requests (if Nginx acts as a reverse proxy).
    gzip_comp_level 6; # Compression level (1-9). 6 is a good balance of CPU usage and compression ratio.
    gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript image/svg+xml;
}
