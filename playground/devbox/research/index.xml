<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Research on Dwarves Foundation</title><link>https://memo.d.foundation/playground/devbox/research/</link><description>Recent content in Research on Dwarves Foundation</description><generator>Hugo</generator><language>en-us</language><managingEditor>han@d.foundation (Han Ngo)</managingEditor><webMaster>han@d.foundation (Han Ngo)</webMaster><copyright>Â© 2024 Dwarves Foundation.</copyright><lastBuildDate>Thu, 01 Aug 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://memo.d.foundation/playground/devbox/research/index.xml" rel="self" type="application/rss+xml"/><item><title>Devbox vs Nix: Why We Chose Simplicity</title><link>https://memo.d.foundation/playground/devbox/research/content-addressable-storage-in-docker/</link><pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/devbox/research/content-addressable-storage-in-docker/</guid><description>Let&amp;rsquo;s cut to the chase: Devbox is Nix with training wheels, and that&amp;rsquo;s a good thing. Here&amp;rsquo;s why we&amp;rsquo;re all in on Devbox for building killer dev environments.</description></item><item><title>Docker Build Issues</title><link>https://memo.d.foundation/playground/devbox/research/docker-issues/</link><pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/devbox/research/docker-issues/</guid><description>Docker build is not deterministic. This means that with the same Dockerfile, different build times (or builds on different machines) can result in different outcomes.</description></item><item><title>Fixed-output Derivation in Nix</title><link>https://memo.d.foundation/playground/devbox/research/fixed-output-derivation/</link><pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/devbox/research/fixed-output-derivation/</guid><description>On different machines with different nixpkgs versions, Nix build will result different packages.
To handle this issue, Fixed-output derivation is raised.</description></item><item><title>Nix - Build the same thing at any time</title><link>https://memo.d.foundation/playground/devbox/research/nix-build-the-same-thing-at-any-time/</link><pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/devbox/research/nix-build-the-same-thing-at-any-time/</guid><description>Nix gives us the ability to build Docker image with minimum deterministic by providing some solid mechanisms.
Firstly, using Nix, we can specify exactly the version of each package and its dependencies, and keep it completely the same each time the package build happens.</description></item><item><title>Nix - Minimum changes, Minimum redundancies</title><link>https://memo.d.foundation/playground/devbox/research/nix-minimum-changes-minimum-redundancies/</link><pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/devbox/research/nix-minimum-changes-minimum-redundancies/</guid><description>The reproducible issue is resolved in the previous part. But we still have another problem when using Docker build, it is shadow copies.</description></item><item><title>Nix is Faster Than Docker Build</title><link>https://memo.d.foundation/playground/devbox/research/nix-is-faster-than-docker-build/</link><pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/devbox/research/nix-is-faster-than-docker-build/</guid><description>As I mentioned in the Build the same thing at any time, Nix knows the exact content of packages and dependencies before builds.</description></item><item><title>Nix: Revolutionizing Docker Image Builds</title><link>https://memo.d.foundation/playground/devbox/research/nix-in-building-docker-images/</link><pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/devbox/research/nix-in-building-docker-images/</guid><description>Docker&amp;rsquo;s great, but let&amp;rsquo;s face it: building images can be a pain. Enter Nix, the tool that&amp;rsquo;s about to change your Docker game forever.</description></item><item><title>Pinning nixpkgs in Nix</title><link>https://memo.d.foundation/playground/devbox/research/pinning-nixpkgs/</link><pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/devbox/research/pinning-nixpkgs/</guid><description>Pinning nixpkgs means you can choose the version of nixpkgs, and then all packages required for building your application and its dependencies are fetched from this nixpkgs version where the version of each package is specified and not changed over time.</description></item><item><title>Shadow Copies in Docker Builds</title><link>https://memo.d.foundation/playground/devbox/research/shadow-copies/</link><pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/devbox/research/shadow-copies/</guid><description>One more issue that comes from internet access of Docker build is Shadow copies aka redundant files that are not cleaned after new versions of packages are installed.</description></item><item><title>Unstable Package Installation in Docker</title><link>https://memo.d.foundation/playground/devbox/research/unstable-package-installation/</link><pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/devbox/research/unstable-package-installation/</guid><description>For example, let&amp;rsquo;s suppose that we have the following Dockerfile.
FROM ubuntu:20.04 RUN apt-get update &amp;amp;&amp;amp; apt-get install -y python3 Imagine that the first time you build your Docker image, the version of Python is 3.</description></item></channel></rss>