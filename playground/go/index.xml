<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go on Dwarves Foundation</title><link>https://memo.d.foundation/playground/go/</link><description>Recent content in Go on Dwarves Foundation</description><generator>Hugo</generator><language>en-us</language><managingEditor>han@d.foundation (Han Ngo)</managingEditor><webMaster>han@d.foundation (Han Ngo)</webMaster><copyright>© 2024 Dwarves Foundation.</copyright><lastBuildDate>Fri, 25 Oct 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://memo.d.foundation/playground/go/index.xml" rel="self" type="application/rss+xml"/><item><title>Go extension interface pattern</title><link>https://memo.d.foundation/playground/go/extension-interface-pattern/</link><pubDate>Fri, 25 Oct 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/go/extension-interface-pattern/</guid><description>The extension interface pattern is when an interface embeds another one. The extension pattern helps to add new features to an existing object without changing its original code.</description></item><item><title>Go import design: using git repo path</title><link>https://memo.d.foundation/playground/go/go-import/</link><pubDate>Fri, 25 Oct 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/go/go-import/</guid><description>Go’s import system, linked directly to git repository paths, was crucial to its early adoption. Unlike most languages, Go’s approach tightly integrates version control with package management, enhancing developer experience and reusability.</description></item><item><title>Package first design</title><link>https://memo.d.foundation/playground/go/go-package/</link><pubDate>Fri, 25 Oct 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/go/go-package/</guid><description>Here&amp;rsquo;s another article that I want to reassure everyone to know about it. As Go pushes more type composition over inheritance, the POV on building &amp;lsquo;unit&amp;rsquo; is different compare to other languages.</description></item><item><title>How does Go achieve type safety when it enables generics?</title><link>https://memo.d.foundation/playground/go/go-generics-type-safety/</link><pubDate>Mon, 14 Oct 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/go/go-generics-type-safety/</guid><description>Go introduced generics with Go 1.18, which was officially released in March 2022. This update allowed Go developers to write more flexible and reusable code by supporting type parameters, enabling functions, and data structures to work with different types without sacrificing type safety.</description></item><item><title>Efficient Union of Finite Automata in Golang: A Practical Approach</title><link>https://memo.d.foundation/playground/go/compute-union-2-finite-automata/</link><pubDate>Thu, 05 Sep 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/go/compute-union-2-finite-automata/</guid><description>1. What is Finite Automata? (A Simple Explanation) Finite Automata (FA), also known as Finite State Machines, are abstract computational models used to recognize patterns or process sequences of symbols.</description></item><item><title>Approaches To Manage Concurrent Workloads Like Worker Pools And Pipelines</title><link>https://memo.d.foundation/playground/go/approaches-to-manage-concurrent-workloads-like-worker-pools-and-pipelines/</link><pubDate>Mon, 22 May 2023 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/go/approaches-to-manage-concurrent-workloads-like-worker-pools-and-pipelines/</guid><description>Introduction Go provides us great and convenient ways to write concurrent programs with high performance to execute tasks concurrently (perhaps in parallel if the program is run on a machine with multiple physical cores, GOMAXPROCS are automatically set to the number of physical cores of the machine that the program is running on)</description></item><item><title>Message Queues And Streaming Platforms Eg Kafka Nats Rabbitmq</title><link>https://memo.d.foundation/playground/go/message-queues-and-streaming-platforms-eg-kafka-nats-rabbitmq/</link><pubDate>Thu, 04 May 2023 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/go/message-queues-and-streaming-platforms-eg-kafka-nats-rabbitmq/</guid><description>At Dwarves Foundation, we host a few learning sessions to understand some of the technology around us. We regularly pick up topics we find interesting to dive deeper into to understand them better and present our findings.</description></item><item><title>Unit Testing Best Practices In Golang</title><link>https://memo.d.foundation/playground/go/unit-testing-best-practices-in-golang/</link><pubDate>Tue, 11 Apr 2023 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/go/unit-testing-best-practices-in-golang/</guid><description>One common issue we often tackle in backend engineering is writing test cases. In this article, we will explore the techniques for crafting effective tests in Go, discussing best practices for writing unit tests and utilizing mocks to achieve better isolation.</description></item><item><title>Profiling in Go</title><link>https://memo.d.foundation/playground/go/profiling-in-go/</link><pubDate>Tue, 28 Mar 2023 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/go/profiling-in-go/</guid><description>Profiling in Go: Gotta catch &amp;rsquo;em all Introduction Those of you who have watched the Pokemon series will undoubtedly recognize the famous catchphrase - &amp;ldquo;Gotta catch &amp;rsquo;em all&amp;rdquo; - that refers to the main character&amp;rsquo;s goal of catching all the Pokemon in the world.</description></item><item><title>Go In Software Engineering</title><link>https://memo.d.foundation/playground/go/go-in-software-engineering/</link><pubDate>Fri, 07 Aug 2020 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/go/go-in-software-engineering/</guid><description>Go is a type-safe, cloud-native language designed for simplicity with first-class support for concurrency.
The software community has been hungering for a small, simple, easy-to-learn and pragmatic programming language.</description></item><item><title>Go Concurrency</title><link>https://memo.d.foundation/playground/go/go-concurrency/</link><pubDate>Wed, 04 Dec 2019 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/go/go-concurrency/</guid><description>Golang concurrency When we talk about Golang, its most basic and popular characteristic is concurrency-support. Unlike other languages what is quite complex to build an concurrency system, Go concurrency primitives via Goroutines and channels make concurrent programming easy.</description></item><item><title>Slice And Array In Golang</title><link>https://memo.d.foundation/playground/go/slice-and-array-in-golang/</link><pubDate>Tue, 13 Mar 2018 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/go/slice-and-array-in-golang/</guid><description>Array TL;DR: The differences between array in Go and C:
Arrays are values. Assigning one array to another copies all the elements.</description></item><item><title>Use Go Selenium To Crawl Data</title><link>https://memo.d.foundation/playground/go/use-go-selenium-to-crawl-data/</link><pubDate>Thu, 02 Jun 2016 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/go/use-go-selenium-to-crawl-data/</guid><description>Crawl data Crawl is a widespread issue occurring in making software. News, discount news, film ticket, etc are some examples of crawl.</description></item><item><title>Connecting Vim With Golang</title><link>https://memo.d.foundation/playground/go/connecting-vim-with-golang/</link><pubDate>Fri, 16 Oct 2015 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/go/connecting-vim-with-golang/</guid><description>An introduction to Vim and how to use Vim with Golang Vim is a powerful text-editor, usually used server environments with no graphical interfaces.</description></item></channel></rss>