<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>00_fleeting on Dwarves Foundation</title><link>https://memo.d.foundation/playground/00_fleeting/</link><description>Recent content in 00_fleeting on Dwarves Foundation</description><generator>Hugo</generator><language>en-us</language><managingEditor>han@d.foundation (Han Ngo)</managingEditor><webMaster>han@d.foundation (Han Ngo)</webMaster><copyright>© 2024 Dwarves Foundation.</copyright><lastBuildDate>Tue, 22 Oct 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://memo.d.foundation/playground/00_fleeting/index.xml" rel="self" type="application/rss+xml"/><item><title>Automata</title><link>https://memo.d.foundation/playground/00_fleeting/automata/</link><pubDate>Tue, 22 Oct 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/00_fleeting/automata/</guid><description>What are Finite State Automata and why should a programmer know about them? Formally, an FSA is a algebraic structure F = ⟨Σ, S, s0, F, δ⟩ where Σ is the input alphabet, S is a set of states, s0 ∈ S is a particular start state, F ⊆ S is a set of accepting states, and δ:S×Σ → S is the state transition function.</description></item><item><title>Error Handling Patterns</title><link>https://memo.d.foundation/playground/00_fleeting/error-handling-patterns/</link><pubDate>Mon, 14 Oct 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/00_fleeting/error-handling-patterns/</guid><description>Error handling is one of the most critical aspects of software development, as it ensures that applications behave correctly even in the presence of unexpected inputs or conditions.</description></item><item><title>Founder Liquidity</title><link>https://memo.d.foundation/playground/00_fleeting/founder-liquidity/</link><pubDate>Fri, 11 Oct 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/00_fleeting/founder-liquidity/</guid><description>Ask most venture-backed founders why they get 10x more equity than employee #1, 100x more equity than employee #5, and 1000x more equity than employee #15, and you&amp;rsquo;ll get the same answer: &amp;ldquo;I&amp;rsquo;M TAKING SO MUCH RISK, IT&amp;rsquo;S SO HARD TO START A COMPANY, I MADE A BIG MOVE!</description></item><item><title>Why Hollywood and gaming struggle with AI</title><link>https://memo.d.foundation/playground/00_fleeting/why-hollywood-and-gaming-struggle-with-ai/</link><pubDate>Fri, 11 Oct 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/00_fleeting/why-hollywood-and-gaming-struggle-with-ai/</guid><description>Incumbent entertainment and video game companies are experiencing friction in experimenting with generative AI, creating opportunities for startups to innovate. There are several reasons why big companies are hesitant to embrace AI aggressively:</description></item><item><title>Subscription Pricing Models</title><link>https://memo.d.foundation/playground/00_fleeting/subscription-pricing-models/</link><pubDate>Fri, 19 Jul 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/00_fleeting/subscription-pricing-models/</guid><description>Pricing Models Freemium Model Description: Attracts users with a free basic version, encouraging upgrades to paid plans for premium features.</description></item><item><title>Erlang Finite State Machine</title><link>https://memo.d.foundation/playground/00_fleeting/erlang-fsm/</link><pubDate>Fri, 12 Jul 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/00_fleeting/erlang-fsm/</guid><description>Finite State Machines (FSMs) are a crucial concept in computer science and software development, providing a robust method for modeling the behavior of systems.</description></item><item><title>Rust Trait</title><link>https://memo.d.foundation/playground/00_fleeting/rust-trait/</link><pubDate>Wed, 03 Jul 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/00_fleeting/rust-trait/</guid><description>Rust&amp;rsquo;s trait system is a powerful feature that enables developers to define shared behavior across different types. Traits play a crucial role in achieving code reusability, abstraction, and flexibility.</description></item><item><title>Explaining Gradient Descent in Machine Learning with a simple analogy</title><link>https://memo.d.foundation/playground/00_fleeting/explaining-gradient-descent-in-machine-learning-with-a-simple-analogy/</link><pubDate>Tue, 25 Jun 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/00_fleeting/explaining-gradient-descent-in-machine-learning-with-a-simple-analogy/</guid><description>Gradient descent is a fundamental optimization algorithm in machine learning. It&amp;rsquo;s a bit like finding your way down a mountain in the fog: you take small steps in the direction that seems to be going downhill the fastest.</description></item><item><title>Organize team know-how with Zettelkasten Method</title><link>https://memo.d.foundation/playground/00_fleeting/organize-team-know-how-with-zettelkasten-method/</link><pubDate>Tue, 25 Jun 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/00_fleeting/organize-team-know-how-with-zettelkasten-method/</guid><description>Whenever you dive into a topic, there&amp;rsquo;s always a mix of what you know and what&amp;rsquo;s new to you. It is important to leverage what you already know, learn new information related to it, and see the connection between them.</description></item><item><title>How to talk to ChatGPT effectively</title><link>https://memo.d.foundation/playground/00_fleeting/how-to-talk-to-chatgpt-effectively/</link><pubDate>Fri, 21 Jun 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/00_fleeting/how-to-talk-to-chatgpt-effectively/</guid><description>ChatGPT, an advanced language model by OpenAI, offers a unique way to interact with AI. The quality of results depends on the information and how well you craft your input.</description></item><item><title>Case study: Write-heavy scalable and reliable inventory platform</title><link>https://memo.d.foundation/playground/00_fleeting/202302281019-case-study-write-heavy-scalable-and-reliable-inventory-platform/</link><pubDate>Tue, 28 Feb 2023 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/00_fleeting/202302281019-case-study-write-heavy-scalable-and-reliable-inventory-platform/</guid><description>https://doordash.engineering/2023/02/22/how-doordash-designed-a-successful-write-heavy-scalable-and-reliable-inventory-platform/ TLDR; Case study: Write-heavy scalable and reliable inventory platform
The technical requirements
High Scalability High reliability Low latency High observability Database table optimization</description></item><item><title>Multi-column index in DB</title><link>https://memo.d.foundation/playground/00_fleeting/202301191192-multi-column-index-in-db/</link><pubDate>Thu, 19 Jan 2023 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/00_fleeting/202301191192-multi-column-index-in-db/</guid><description>Multi-column index in DB
Databases support creating composite indexes (index on multiple columns). If you specify the columns in the right order in the index definition, a single composite index can speed up several kinds of queries on the same table.</description></item><item><title>Invoking component functions in React</title><link>https://memo.d.foundation/playground/00_fleeting/202301091379-invoking-component-functions-in-react/</link><pubDate>Mon, 09 Jan 2023 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/00_fleeting/202301091379-invoking-component-functions-in-react/</guid><description>What happens if you invoked the component function directly in React?: Let&amp;rsquo;s take a look at this example:
const ExampleComponent = () =&amp;gt;{ const [input, setInput] = useState('') //do something here } export const App = () =&amp;gt;{ const [show, setShow] = useState(false) return ( &amp;lt;div&amp;gt; &amp;lt;button onClick={() =&amp;gt; setShow(!</description></item><item><title>How to deal with technical debt in Scrum</title><link>https://memo.d.foundation/playground/00_fleeting/202212131609-how-to-deal-with-technical-debt-in-scrum/</link><pubDate>Tue, 13 Dec 2022 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/00_fleeting/202212131609-how-to-deal-with-technical-debt-in-scrum/</guid><description>How to deal with Technical debt in Scrum:
Technical debt is a common issue faced by teams that use the Scrum framework.</description></item><item><title>Go JSON parser: number &lt;-> interface</title><link>https://memo.d.foundation/playground/00_fleeting/202211141287-go-json-parsing/</link><pubDate>Mon, 14 Nov 2022 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/00_fleeting/202211141287-go-json-parsing/</guid><description>Go JSON parser: number &amp;lt;-&amp;gt; interface TLDR; becareful when using map[string]interface{} to hold json number value, use custom decoder with newDecoder.</description></item><item><title>Materialized View Pattern</title><link>https://memo.d.foundation/playground/00_fleeting/202211141513-materialized-view-pattern/</link><pubDate>Mon, 14 Nov 2022 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/00_fleeting/202211141513-materialized-view-pattern/</guid><description>Materialized View Pattern TL,DR; Versus &amp;ldquo;normal&amp;rdquo; view
A normal view provides ease-of-use and flexibility features, but it DOES NOT speed up data access A Materialized view is the cache of views.</description></item><item><title>Error Messaging</title><link>https://memo.d.foundation/playground/00_fleeting/202211081111-error-messaging/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/00_fleeting/202211081111-error-messaging/</guid><description>What makes a bad error message
Inappropriate tone Technical jargon Passing the blame Generic for no reason What make a good error message</description></item><item><title>Sign-in Form Best Practices</title><link>https://memo.d.foundation/playground/00_fleeting/202210172128-sign-in-form-best-practices/</link><pubDate>Mon, 17 Oct 2022 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/00_fleeting/202210172128-sign-in-form-best-practices/</guid><description>Sign-in Form Best Practices Use meaningful HTML elements: &amp;lt;form&amp;gt;, &amp;lt;input&amp;gt;, &amp;lt;label&amp;gt;, and &amp;lt;button&amp;gt;. Label each input with a &amp;lt;label&amp;gt;. Use element attributes to access built-in browser features: type, name, autocomplete, required.</description></item><item><title>The Best of CSS TLDR</title><link>https://memo.d.foundation/playground/00_fleeting/202210162154-the-best-of-css-tldr/</link><pubDate>Sun, 16 Oct 2022 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/00_fleeting/202210162154-the-best-of-css-tldr/</guid><description>https://www.youtube.com/watch?v=CQuTF-bkOgc tl;dr
three main categories that most UI libraries fall into a/ pure: pure css, no javascript/composite styling, what you write is what you get when compile (tailwind, SASS), focus on how they look b/ behavioral: pure javascript for a11y purpose, unstyled (no css at all) components to make them work the same across different browsers (headlessUI, radix, react-aria), in other words - focus on how they work c/ style system: predefined components that are built upon a layer of pure css (tailwindUI, bootstrap, mantineUI, daisyUI), opinionated a.</description></item><item><title>Migration Planning</title><link>https://memo.d.foundation/playground/00_fleeting/202210150019-migration-planning/</link><pubDate>Fri, 14 Oct 2022 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/00_fleeting/202210150019-migration-planning/</guid><description>https://newsletter.pragmaticengineer.com/p/real-world-engineering-challenges
tl;dr Migration plan What do we need to consider?
Downtime Data consistency Rollback plan Observable and measurable Team awareness Common steps</description></item><item><title>Behavior Driven Development</title><link>https://memo.d.foundation/playground/00_fleeting/202210131000-behavior-driven-development/</link><pubDate>Thu, 13 Oct 2022 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/00_fleeting/202210131000-behavior-driven-development/</guid><description>Behavior Driven Development (BDD) Three Practices First, take a small upcoming change to the system – a User Story – and talk about concrete examples of the new functionality to explore, discover and agree on the details of what’s expected to be done.</description></item><item><title>React Fiber</title><link>https://memo.d.foundation/playground/00_fleeting/202210131516-react-fiber/</link><pubDate>Thu, 13 Oct 2022 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/00_fleeting/202210131516-react-fiber/</guid><description>An Introduction to React Fiber Fiber is the new reconciliation algorithm since React 16, a completely backward-compatible rewrite of the old reconciler (Stack Reconciler).</description></item><item><title>Forward Proxy</title><link>https://memo.d.foundation/playground/00_fleeting/202210122014-forward-proxy/</link><pubDate>Wed, 12 Oct 2022 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/00_fleeting/202210122014-forward-proxy/</guid><description>Forward proxy: is a server that sits between user devices and the internet. use for:
protect clients avoid browsing restrictions block access to certain content Reverse proxy: is a server that accepts a request from the client, forwards the request to web servers, and returns the results to the client as if the proxy server had processed the request.</description></item></channel></rss>