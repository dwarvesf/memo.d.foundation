<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>React on Dwarves Foundation</title><link>https://memo.d.foundation/playground/frontend/react/</link><description>Recent content in React on Dwarves Foundation</description><generator>Hugo</generator><language>en-us</language><managingEditor>han@d.foundation (Han Ngo)</managingEditor><webMaster>han@d.foundation (Han Ngo)</webMaster><copyright>© 2024 Dwarves Foundation.</copyright><lastBuildDate>Tue, 29 Oct 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://memo.d.foundation/playground/frontend/react/index.xml" rel="self" type="application/rss+xml"/><item><title>Code splitting in React</title><link>https://memo.d.foundation/playground/frontend/react/code-splitting/</link><pubDate>Tue, 29 Oct 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/react/code-splitting/</guid><description>Code splitting is a technique used to optimize JavaScript bundles by breaking them into smaller chunks, loading only the necessary parts when they’re needed.</description></item><item><title>Component composition patterns in React</title><link>https://memo.d.foundation/playground/frontend/react/component-composition-patterns/</link><pubDate>Tue, 29 Oct 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/react/component-composition-patterns/</guid><description>Component composition patterns are foundational for creating scalable, flexible, and reusable React components. They allow us to build UIs by combining smaller, single-purpose components in various ways.</description></item><item><title>Design system integration in react</title><link>https://memo.d.foundation/playground/frontend/react/design-system-integration/</link><pubDate>Tue, 29 Oct 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/react/design-system-integration/</guid><description>Design system integration in React involves creating a set of reusable, consistent, and easily maintainable components that reflect your app’s design guidelines.</description></item><item><title>Hook architecture in react</title><link>https://memo.d.foundation/playground/frontend/react/hook-architecture/</link><pubDate>Tue, 29 Oct 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/react/hook-architecture/</guid><description>Hooks architecture in React refers to the systematic approach of using hooks to manage state, side effects, and reusable logic across components.</description></item><item><title>Rendering strategies in React</title><link>https://memo.d.foundation/playground/frontend/react/rendering-strategies/</link><pubDate>Tue, 29 Oct 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/react/rendering-strategies/</guid><description>Client-side rendering (CSR), server-side rendering (SSR), and static-site generation (SSG) are three key rendering strategies in modern web development. Each approach has unique advantages and trade-offs, impacting application performance, SEO, and user experience.</description></item><item><title>State management strategy in React</title><link>https://memo.d.foundation/playground/frontend/react/state-management-strategy/</link><pubDate>Tue, 29 Oct 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/react/state-management-strategy/</guid><description>State management is a core architectural topic in React, especially as applications grow in complexity. While local component state (using useState or useReducer) is suitable for small to medium apps, more sophisticated state management strategies become essential as your app scales.</description></item><item><title>Testing strategies in React</title><link>https://memo.d.foundation/playground/frontend/react/testing-strategies/</link><pubDate>Tue, 29 Oct 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/react/testing-strategies/</guid><description>Testing is essential for ensuring that your code works as expected, is maintainable, and doesn&amp;rsquo;t introduce bugs with future changes. React testing involves unit tests, integration tests, and end-to-end (e2e) tests, each targeting different aspects of your application&amp;rsquo;s functionality.</description></item></channel></rss>