<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Frontend on Dwarves Foundation</title><link>https://memo.d.foundation/playground/frontend/</link><description>Recent content in Frontend on Dwarves Foundation</description><generator>Hugo</generator><language>en-us</language><managingEditor>han@d.foundation (Han Ngo)</managingEditor><webMaster>han@d.foundation (Han Ngo)</webMaster><copyright>© 2024 Dwarves Foundation.</copyright><lastBuildDate>Mon, 18 Dec 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://memo.d.foundation/playground/frontend/index.xml" rel="self" type="application/rss+xml"/><item><title>WebSockets</title><link>https://memo.d.foundation/playground/frontend/websockets/</link><pubDate>Mon, 18 Dec 2023 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/websockets/</guid><description>What are WebSockets Previously, creating web applications that need bidirectional require a HTTP polling for updating the data from the server.</description></item><item><title>From Markup to Pixels - A look inside the DOM, CSSOM, and Render Tree</title><link>https://memo.d.foundation/playground/frontend/from-markup-to-pixels-a-look-inside-the-dom-cssom-and-render-tree/</link><pubDate>Mon, 11 Sep 2023 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/from-markup-to-pixels-a-look-inside-the-dom-cssom-and-render-tree/</guid><description>Inside a web browser, there exists a software component responsible for determining the content to show you based on the data it receives.</description></item><item><title>Window and iframe communication</title><link>https://memo.d.foundation/playground/frontend/window-and-iframe-communication/</link><pubDate>Sun, 20 Aug 2023 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/window-and-iframe-communication/</guid><description>When working with web development, communicating between a main window and an embedded iframe is often necessary for various tasks, such as content creation or widget implementation.</description></item><item><title>Applying Mock Service Worker (MSW) for Seamless Web Development</title><link>https://memo.d.foundation/playground/frontend/applying-mock-service-worker-msw-for-seamless-web-development/</link><pubDate>Mon, 19 Jun 2023 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/applying-mock-service-worker-msw-for-seamless-web-development/</guid><description>Introduction Mock Service Worker (MSW) is an API mocking library that leverages the Service Worker API to intercept requests. It offers unique features that set it apart from traditional mocking libraries, making it a go-to choice for developers.</description></item><item><title>Render optimization in data-fetching libraries</title><link>https://memo.d.foundation/playground/frontend/render-optimization-in-data-fetching-libraries/</link><pubDate>Thu, 08 Jun 2023 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/render-optimization-in-data-fetching-libraries/</guid><description>Data-fetching libraries are software tools or frameworks that can help improve the performance and scalability of your application by handling network requests and data processing more efficiently.</description></item><item><title>A Fragment Colocation Pattern with React &amp; Apollo GraphQL</title><link>https://memo.d.foundation/playground/frontend/a-fragment-colocation-pattern-with-react-apollo-graphql/</link><pubDate>Sun, 04 Jun 2023 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/a-fragment-colocation-pattern-with-react-apollo-graphql/</guid><description>When working with complex GraphQL schemas, it&amp;rsquo;s common to have shared fields across different types. A fragment colocation pattern allows us to define fragments alongside their corresponding components, resulting in a more cohesive and maintainable codebase.</description></item><item><title>Scroll-driven animations</title><link>https://memo.d.foundation/playground/frontend/scroll-driven-animations/</link><pubDate>Thu, 01 Jun 2023 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/scroll-driven-animations/</guid><description>Scroll-driven animations are popular effects used in web design. They are animations that are connected to the scroll position of a scroll container.</description></item><item><title>React Server Components, NextJs Route and Data Fetching</title><link>https://memo.d.foundation/playground/frontend/react-server-component/</link><pubDate>Sun, 28 May 2023 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/react-server-component/</guid><description>React Server Components, NextJs Route and Data Fetching React Server Components (RSCs) offer the flexibility to decide where to render components based on their purpose, diverging from the client-side rendering approach of Single-Page Applications.</description></item><item><title>URL formats for sharing via social networks</title><link>https://memo.d.foundation/playground/frontend/url-formats-for-sharing-via-social-networks/</link><pubDate>Fri, 26 May 2023 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/url-formats-for-sharing-via-social-networks/</guid><description>Why? With the rise of social platforms like Facebook, Twitter and LinkedIn, it&amp;rsquo;s easier than ever to share URLs with a large audience quickly and efficiently.</description></item><item><title>Shadow DOM</title><link>https://memo.d.foundation/playground/frontend/shadow-dom/</link><pubDate>Tue, 16 May 2023 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/shadow-dom/</guid><description>I&amp;rsquo;m currently working on a new application called Javis, which operates as a Chrome extension. Functioning as an AI assistant, Javis is designed to facilitate a smooth and enriching web browsing experience for users.</description></item><item><title>Retain scroll position in infinite scroll</title><link>https://memo.d.foundation/playground/frontend/retain-scroll-position-in-infinite-scroll/</link><pubDate>Mon, 24 Apr 2023 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/retain-scroll-position-in-infinite-scroll/</guid><description>Infinite scroll - Benefits and Challenges Infinite scroll has become a popular web design technique in recent years, as it offers several benefits over traditional pagination models such as reducing page load times or minimizing the need for users to browse through multiple pages.</description></item><item><title>Continuous Translation</title><link>https://memo.d.foundation/playground/frontend/continuous-translation/</link><pubDate>Tue, 11 Apr 2023 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/continuous-translation/</guid><description>Continuous Translation (CT) is a modern approach to translation management that involves synchronizing software development and translation workflows. This means that developers, translators, and product owners work together in a continuous cycle to ensure that all translations are up-to-date and aligned with the latest software developments.</description></item><item><title>What is PNPM Compare To NPM/Yarn</title><link>https://memo.d.foundation/playground/frontend/what-is-pnpm-compare-to-npmyarn/</link><pubDate>Tue, 11 Apr 2023 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/what-is-pnpm-compare-to-npmyarn/</guid><description>What is PNPM? At Dwarves Foundation, we are always on the lookout for new tech. Researching PNPM was originally from research on what package manager Next.</description></item><item><title>Why Micro Frontend</title><link>https://memo.d.foundation/playground/frontend/why-micro-frontend/</link><pubDate>Mon, 20 Mar 2023 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/why-micro-frontend/</guid><description>Micro-Frontend - What &amp;amp; Why? As web applications become more complex and feature-rich, traditional frontend architectures such as monolithic will become harder to maintain, scale, and evolve.</description></item><item><title>Why We Chose Our Tech Stack Accelerating Development With A Robust Frontend Solution</title><link>https://memo.d.foundation/playground/frontend/why-we-chose-our-tech-stack-accelerating-development-with-a-robust-frontend-solution/</link><pubDate>Mon, 20 Mar 2023 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/why-we-chose-our-tech-stack-accelerating-development-with-a-robust-frontend-solution/</guid><description>At Dwarves Foundation, we pride ourselves on being a team of seasoned technology experts, passionate about crafting innovative solutions for our clients.</description></item><item><title>Tackling Server State complexity in Frontend Development</title><link>https://memo.d.foundation/playground/frontend/tackling-server-state-complexity-in-frontend-development/</link><pubDate>Sat, 11 Mar 2023 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/tackling-server-state-complexity-in-frontend-development/</guid><description>Frontend development has become increasingly complex over the years, and with it, the need for efficient state management. Global State is one such programming pattern that has emerged as a solution to the problem of prop drilling.</description></item><item><title>Variable Fonts</title><link>https://memo.d.foundation/playground/frontend/variable-fonts/</link><pubDate>Mon, 06 Mar 2023 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/variable-fonts/</guid><description>What&amp;rsquo;s variable font? Variable fonts - officially known as OpenType Font Variations - are a font format that allows for a single font file to contain multiple variations of a typeface, such as different weights, widths, and styles, that can be dynamically adjusted in real-time using font variations.</description></item><item><title>When should we use useReducer instead of useState?</title><link>https://memo.d.foundation/playground/frontend/when-should-we-use-usereducer-instead-of-usestate/</link><pubDate>Wed, 01 Mar 2023 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/when-should-we-use-usereducer-instead-of-usestate/</guid><description>Imagine we have a component with multiple states. It is simple enough not to use state management libraries. useState is surely a choice for the sake of brevity and clarity.</description></item><item><title>Preserving and Resetting state in React</title><link>https://memo.d.foundation/playground/frontend/preserving-and-resetting-state-in-react/</link><pubDate>Mon, 27 Feb 2023 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/preserving-and-resetting-state-in-react/</guid><description>Why should you read this article? Understand how state in React works const [isPlayerA, setIsPlayerA] = useState(true) function Counter(name) { const [score, setScore] = useState(0) return ( &amp;lt;&amp;gt; &amp;lt;div&amp;gt; {name}: {score} &amp;lt;/div&amp;gt; &amp;lt;button onClick={() =&amp;gt; setScore(score + 1)}&amp;gt;+1&amp;lt;/button&amp;gt; &amp;lt;/&amp;gt; ) } // ---------- // Do you think they are the same?</description></item><item><title>Mixpanel</title><link>https://memo.d.foundation/playground/frontend/mixpanel/</link><pubDate>Mon, 13 Feb 2023 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/mixpanel/</guid><description>Mixpanel is a powerful analytics platform that assists companies in monitoring and analyzing user behavior on their websites and mobile applications.</description></item><item><title>Validation with Zod</title><link>https://memo.d.foundation/playground/frontend/validation-with-zod/</link><pubDate>Tue, 17 Jan 2023 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/validation-with-zod/</guid><description>Zod is the TypeScript-first schema validation library with static type inference. It&amp;rsquo;s functional approach to data validation is parse-dont-validate-in-typescript which parses the data in order to validate and catch errors.</description></item><item><title>Parse, don't validate in TypeScript</title><link>https://memo.d.foundation/playground/frontend/parse-dont-validate-in-typescript/</link><pubDate>Thu, 05 Jan 2023 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/parse-dont-validate-in-typescript/</guid><description>The &amp;ldquo;parse, don&amp;rsquo;t validate&amp;rdquo; approach is all about processing incoming data and failing in a controlled manner if parsing fails. It is all about leveraging trustworthy, secure, and typed data structures within your code and ensuring that all incoming data is handled at the very edges of your systems.</description></item><item><title>Webassembly</title><link>https://memo.d.foundation/playground/frontend/webassembly/</link><pubDate>Thu, 05 Jan 2023 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/webassembly/</guid><description>What WebAssembly (abbreviated Wasm) was launched in 2017 as a low-level assembly-like language with a compact binary format, so it’s fast to load, execute, and run with near-native performance.</description></item><item><title>Singleton Design Pattern in Javascript</title><link>https://memo.d.foundation/playground/frontend/singleton-design-pattern-in-javascript/</link><pubDate>Sun, 16 Oct 2022 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/singleton-design-pattern-in-javascript/</guid><description>Overview For global state management in some frameworks like ReactJs; we already have Redux, React Context, Recoil, and Mobx&amp;hellip; for handling that.</description></item><item><title>An Introduction to Atomic CSS</title><link>https://memo.d.foundation/playground/frontend/an-introduction-to-atomic-css/</link><pubDate>Thu, 13 Oct 2022 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/an-introduction-to-atomic-css/</guid><description>Definition A definition to Atomic CSS:
Atomic CSS is the approach to CSS architecture that favors small, single-purpose classes with names based on visual function.</description></item><item><title>Intro to IndexedDB</title><link>https://memo.d.foundation/playground/frontend/intro-to-indexeddb/</link><pubDate>Thu, 13 Oct 2022 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/intro-to-indexeddb/</guid><description>Overview &amp;amp; When to use IndexedDB IndexedDB is a low-level API for client-side storage like localStorage and cookies. But this built-in non-relational database is much more powerful than those 2 counterparts.</description></item><item><title>The fundamental of web performance</title><link>https://memo.d.foundation/playground/frontend/the-fundamental-of-web-performance/</link><pubDate>Sun, 02 Oct 2022 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/the-fundamental-of-web-performance/</guid><description>The key to improving your website speed is to understand where the bottlenecks are, and how much time each step takes.</description></item><item><title>WAI-ARIA</title><link>https://memo.d.foundation/playground/frontend/wai-aria/</link><pubDate>Fri, 30 Sep 2022 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/wai-aria/</guid><description>Since modern websites and applications contain huge amounts of dynamic content and complex components with no semantics to describe what they mean, users with disabilities, those dependent on assistive technologies such as Screen Reader, text-to-speech or screen magnification tools might suffer to interact with those components.</description></item><item><title>Build polymorphic React components with Typescript</title><link>https://memo.d.foundation/playground/frontend/build-polymorphic-react-components-with-typescript/</link><pubDate>Mon, 26 Sep 2022 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/build-polymorphic-react-components-with-typescript/</guid><description>Let&amp;rsquo;s say we want to create a Text component with React and Typescript. A basic implementation could look like:
import React from 'react' type TextProps = { children: React.</description></item><item><title>Prevent Layout Thrashing</title><link>https://memo.d.foundation/playground/frontend/prevent-layout-thrashing/</link><pubDate>Sun, 11 Sep 2022 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/prevent-layout-thrashing/</guid><description>What is Layout Thrashing Layout thrashing means forcing the browser to calculate a layout that is never rendered to the screen, which hurts performance.</description></item><item><title>Pure CSS Parallax</title><link>https://memo.d.foundation/playground/frontend/pure-css-parallax/</link><pubDate>Sat, 10 Sep 2022 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/pure-css-parallax/</guid><description>This article demonstrates how to use CSS transforms, perspective and some scaling trickery to create a pure CSS parallax scrolling website.</description></item><item><title>CSS Container Queries</title><link>https://memo.d.foundation/playground/frontend/css-container-queries/</link><pubDate>Fri, 02 Sep 2022 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/css-container-queries/</guid><description>Published on August 30, 2022, Chrome 105 included Container Queries, one of the most highly requested features in CSS.
The Problem With Media Queries When we want to create a responsive layout, we can use media queries to adjust styles based on the screen size of the device viewing our site.</description></item><item><title>HSL Color</title><link>https://memo.d.foundation/playground/frontend/hsl-color/</link><pubDate>Fri, 02 Sep 2022 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/hsl-color/</guid><description>Frontend engineers use Hexadecimal color codes to represent colors, but they have some limitations:
Hexadecimal color codes are difficult to write and adjust, requiring the use of a third-party application to get right.</description></item><item><title>Mitigate blocking the main thread</title><link>https://memo.d.foundation/playground/frontend/mitigate-blocking-the-main-thread/</link><pubDate>Wed, 31 Aug 2022 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/mitigate-blocking-the-main-thread/</guid><description>We all know that for web applications, perceived performance is highly importance for our users. For data intensive SPAs with CPU-intensive tasks, the single-threaded nature of Javascript starts to hinder the application&amp;rsquo;s perceived performance when you cannot fit those CPU-intensive tasks into a 16.</description></item><item><title>CSS in JS</title><link>https://memo.d.foundation/playground/frontend/css-in-js/</link><pubDate>Thu, 11 Aug 2022 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/css-in-js/</guid><description>CSS-in-JS is a styling technique where Javascript is used to style the component. These are multiple implementations of this concept in the form of libraries such as emotion, styled-component, JSS.</description></item><item><title>Dark mode flickers a white background for a fraction of a second</title><link>https://memo.d.foundation/playground/frontend/dark-mode-flickers-a-white-background-for-a-fraction-of-a-second/</link><pubDate>Thu, 11 Aug 2022 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/dark-mode-flickers-a-white-background-for-a-fraction-of-a-second/</guid><description>The dark mode feature uses local storage to store a user&amp;rsquo;s preference for future usage. The problem is that when the dark mode is enabled and the page is reloaded, there&amp;rsquo;s a flicker of white background all over the page before it turns dark.</description></item><item><title>Why DOM manipulation is slow?</title><link>https://memo.d.foundation/playground/frontend/why-dom-manipulation-is-slow/</link><pubDate>Tue, 09 Aug 2022 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/why-dom-manipulation-is-slow/</guid><description>Actually, the DOM is not slow. Adding or removing a DOM node is not much more than setting a property on the JS object.</description></item><item><title>Why Virtual DOM is fast?</title><link>https://memo.d.foundation/playground/frontend/why-virtual-dom-is-fast/</link><pubDate>Tue, 09 Aug 2022 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/why-virtual-dom-is-fast/</guid><description>React and Vue, two popular front-end frameworks, both use Virtual DOM to improve page rendering efficiency. Understanding the concept of Virtual DOM sheds light on an important aspect of performance optimization on the client side.</description></item><item><title>ViteJS native modules</title><link>https://memo.d.foundation/playground/frontend/vitejs-native-modules/</link><pubDate>Mon, 04 Jul 2022 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/vitejs-native-modules/</guid><description>Before ES modules was supported in the browser, we have no native mechanism for authoring javascript-modules in a modularized fashion. That is why the concept of &amp;ldquo;bundling&amp;rdquo; and tools like Webpack, Rollup, and Parcel exist to improve the development experience for frontend developers.</description></item><item><title>JavaScript modules</title><link>https://memo.d.foundation/playground/frontend/javascript-modules/</link><pubDate>Mon, 27 Jun 2022 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/javascript-modules/</guid><description>Modules have always been a part of JavaScript development and providing mechanisms for splitting JavaScript programs up into separate modules that can be imported when needed was the absolutely necessity for JavaScript developers.</description></item><item><title>Atomic Design Pattern</title><link>https://memo.d.foundation/playground/frontend/atomic-design-pattern/</link><pubDate>Wed, 15 Jun 2022 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/atomic-design-pattern/</guid><description>Atomic design pattern Atomic design is a methodology for crafting design systems with five key fundamental building blocks, which, when combined, promote consistency, modularity, and scalability.</description></item><item><title>Focus trap</title><link>https://memo.d.foundation/playground/frontend/focus-trap/</link><pubDate>Sun, 12 Jun 2022 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/focus-trap/</guid><description>Focus trap is a web technique to improve accessibility by forcing keyboard focus inside a DOM element, to prevent the user navigating outside that element.</description></item><item><title>HTML inert</title><link>https://memo.d.foundation/playground/frontend/html-inert/</link><pubDate>Sun, 12 Jun 2022 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/html-inert/</guid><description>inert is a boolean HTML property that makes the browser ignore the user input events for an element, including focus events and events from assistive technologies.</description></item><item><title>useEffect double calls in React 18</title><link>https://memo.d.foundation/playground/frontend/useeffect-double-calls-in-react-18/</link><pubDate>Sat, 11 Jun 2022 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/useeffect-double-calls-in-react-18/</guid><description>In the React 18 version, the useEffect hook has been updated to called twice compare to only one in the older version in StrictMode.</description></item><item><title>React 18</title><link>https://memo.d.foundation/playground/frontend/react-18/</link><pubDate>Mon, 06 Jun 2022 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/react-18/</guid><description>React 18 was released in March 2022. This release focuses on performance improvements and updating the rendering engine.
React 18 Feature Quick Guide Now let&amp;rsquo;s look at each of these updates in more detail.</description></item><item><title>Remix Versus Nextjs</title><link>https://memo.d.foundation/playground/frontend/remix-versus-nextjs/</link><pubDate>Fri, 27 May 2022 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/remix-versus-nextjs/</guid><description>A brief comparison between Remix and Next.js frameworks
Introduction of Remix Remix describes itself as:
Remix is an edge native, full-stack JavaScript framework for building modern, fast, and resilient user experiences.</description></item><item><title>Zaplib post-mortem</title><link>https://memo.d.foundation/playground/frontend/zaplib-post-mortem/</link><pubDate>Sun, 01 May 2022 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/zaplib-post-mortem/</guid><description>Zaplib is a frontend framework that helps to port your JS/TS app to Rust/Wasm. This idea was found after the founder&amp;rsquo;s painful work at https://webviz.</description></item><item><title>Parallelism in JavaScript</title><link>https://memo.d.foundation/playground/frontend/parallelism-in-javascript/</link><pubDate>Mon, 04 Apr 2022 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/parallelism-in-javascript/</guid><description>Most of applications nowadays are created with the aim to be on the web. JavaScript has become a mainstream programming language to support the direction.</description></item><item><title>MPA, SPA and Partial Hydration</title><link>https://memo.d.foundation/playground/frontend/mpa-spa-and-partial-hydration/</link><pubDate>Thu, 24 Mar 2022 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/mpa-spa-and-partial-hydration/</guid><description>If you&amp;rsquo;ve been on Twitter lately, you might&amp;rsquo;ve seen the term &amp;ldquo;Partial Hydration&amp;rdquo; as well as MPA going along and hyped by web advocates, wondering what about them?</description></item><item><title>Micro Frontends Microservices For Frontend Development</title><link>https://memo.d.foundation/playground/frontend/micro-frontends-microservices-for-frontend-development/</link><pubDate>Fri, 09 Jul 2021 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/micro-frontends-microservices-for-frontend-development/</guid><description>What is Micro-frontend ? An architectural style where independently deliverable frontend applications are composed into a greater whole
Benefits Smaller, more cohesive, and maintainable codebases More scalable organizations with decoupled, autonomous teams The ability to upgrade, update, or even rewrite parts of the frontend in a more incremental fashion than was previously possible Easier maintenance: Keeping frontend repositories small and specialized allows them to be more easily understood, and this simplifies long-term maintenance and testing.</description></item><item><title>Using Correct Html Element To Increase Website Accessibility</title><link>https://memo.d.foundation/playground/frontend/using-correct-html-element-to-increase-website-accessibility/</link><pubDate>Fri, 23 Aug 2019 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/using-correct-html-element-to-increase-website-accessibility/</guid><description>Website Accessibility Website Accessibility is a term for approaching a website of which the potential user are people with disabilities (eye disorders or illiterate).</description></item><item><title>Remove Unused CSS Styles From Bootstrap Using Purgecss</title><link>https://memo.d.foundation/playground/frontend/remove-unused-css-styles-from-bootstrap-using-purgecss/</link><pubDate>Fri, 01 Feb 2019 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/remove-unused-css-styles-from-bootstrap-using-purgecss/</guid><description>Introduction Reducing assets size is one of the most practical ways to speed up your web application. I have a simple use case, lets imagine your HTML file looks like this</description></item></channel></rss>