<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>typescript on Dwarves Foundation</title><link>https://memo.d.foundation/tags/typescript/</link><description>Recent content in typescript on Dwarves Foundation</description><generator>Hugo</generator><language>en-us</language><managingEditor>han@d.foundation (Han Ngo)</managingEditor><webMaster>han@d.foundation (Han Ngo)</webMaster><copyright>Â© 2024 Dwarves Foundation.</copyright><lastBuildDate>Mon, 13 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://memo.d.foundation/tags/typescript/index.xml" rel="self" type="application/rss+xml"/><item><title>Mixpanel</title><link>https://memo.d.foundation/playground/frontend/mixpanel/</link><pubDate>Mon, 13 Feb 2023 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/mixpanel/</guid><description>Mixpanel is a powerful analytics platform that assists companies in monitoring and analyzing user behavior on their websites and mobile applications.</description></item><item><title>Validation with Zod</title><link>https://memo.d.foundation/playground/frontend/validation-with-zod/</link><pubDate>Tue, 17 Jan 2023 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/validation-with-zod/</guid><description>Zod is the TypeScript-first schema validation library with static type inference. It&amp;rsquo;s functional approach to data validation is parse-dont-validate-in-typescript which parses the data in order to validate and catch errors.</description></item><item><title>Parse, don't validate in TypeScript</title><link>https://memo.d.foundation/playground/frontend/parse-dont-validate-in-typescript/</link><pubDate>Thu, 05 Jan 2023 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/parse-dont-validate-in-typescript/</guid><description>The &amp;ldquo;parse, don&amp;rsquo;t validate&amp;rdquo; approach is all about processing incoming data and failing in a controlled manner if parsing fails. It is all about leveraging trustworthy, secure, and typed data structures within your code and ensuring that all incoming data is handled at the very edges of your systems.</description></item><item><title>Build polymorphic React components with Typescript</title><link>https://memo.d.foundation/playground/frontend/build-polymorphic-react-components-with-typescript/</link><pubDate>Mon, 26 Sep 2022 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/build-polymorphic-react-components-with-typescript/</guid><description>Let&amp;rsquo;s say we want to create a Text component with React and Typescript. A basic implementation could look like:
import React from 'react' type TextProps = { children: React.</description></item></channel></rss>