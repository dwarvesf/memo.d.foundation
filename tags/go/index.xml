<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>go on Dwarves Foundation</title><link>https://memo.d.foundation/tags/go/</link><description>Recent content in go on Dwarves Foundation</description><generator>Hugo</generator><language>en-us</language><managingEditor>han@d.foundation (Han Ngo)</managingEditor><webMaster>han@d.foundation (Han Ngo)</webMaster><copyright>© 2024 Dwarves Foundation.</copyright><lastBuildDate>Fri, 25 Oct 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://memo.d.foundation/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>Go extension interface pattern</title><link>https://memo.d.foundation/playground/go/extension-interface-pattern/</link><pubDate>Fri, 25 Oct 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/go/extension-interface-pattern/</guid><description>The extension interface pattern is when an interface embeds another one. The extension pattern helps to add new features to an existing object without changing its original code.</description></item><item><title>Go import design: using git repo path</title><link>https://memo.d.foundation/playground/go/go-import/</link><pubDate>Fri, 25 Oct 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/go/go-import/</guid><description>Go’s import system, linked directly to git repository paths, was crucial to its early adoption. Unlike most languages, Go’s approach tightly integrates version control with package management, enhancing developer experience and reusability.</description></item><item><title>Package first design</title><link>https://memo.d.foundation/playground/go/go-package/</link><pubDate>Fri, 25 Oct 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/go/go-package/</guid><description>Here&amp;rsquo;s another article that I want to reassure everyone to know about it. As Go pushes more type composition over inheritance, the POV on building &amp;lsquo;unit&amp;rsquo; is different compare to other languages.</description></item><item><title>Error Handling Patterns</title><link>https://memo.d.foundation/playground/00_fleeting/error-handling-patterns/</link><pubDate>Mon, 14 Oct 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/00_fleeting/error-handling-patterns/</guid><description>Error handling is one of the most critical aspects of software development, as it ensures that applications behave correctly even in the presence of unexpected inputs or conditions.</description></item><item><title>Bunk License Check</title><link>https://memo.d.foundation/playground/01_literature/bunk-license-check/</link><pubDate>Wed, 05 Feb 2020 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/01_literature/bunk-license-check/</guid><description>License detector tool: Glice Golang license and dependency checker. Prints list of all dependencies (both from std and 3rd party), number of times used, their license and saves all the license files in /licenses.</description></item></channel></rss>