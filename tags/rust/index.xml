<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>rust on Dwarves Foundation</title><link>https://memo.d.foundation/tags/rust/</link><description>Recent content in rust on Dwarves Foundation</description><generator>Hugo</generator><language>en-us</language><managingEditor>han@d.foundation (Han Ngo)</managingEditor><webMaster>han@d.foundation (Han Ngo)</webMaster><copyright>¬© 2024 Dwarves Foundation.</copyright><lastBuildDate>Wed, 03 Jul 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://memo.d.foundation/tags/rust/index.xml" rel="self" type="application/rss+xml"/><item><title>Error handling on Rust</title><link>https://memo.d.foundation/playground/01_literature/error-handling-in-rust/</link><pubDate>Wed, 03 Jul 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/01_literature/error-handling-in-rust/</guid><description>Introduction In the world of programming, errors are inevitable. Rust, a modern systems programming language, takes a unique approach to error handling by categorizing errors into two main types: unrecoverable and recoverable.</description></item><item><title>Rust Trait</title><link>https://memo.d.foundation/playground/00_fleeting/rust-trait/</link><pubDate>Wed, 03 Jul 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/00_fleeting/rust-trait/</guid><description>Rust&amp;rsquo;s trait system is a powerful feature that enables developers to define shared behavior across different types. Traits play a crucial role in achieving code reusability, abstraction, and flexibility.</description></item><item><title>Market report January 2024</title><link>https://memo.d.foundation/playground/market-report/2024-january/</link><pubDate>Fri, 26 Jan 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/market-report/2024-january/</guid><description>Trends on our radar Here are some of the few trends we are seeing across the industry, in our projects, as well as our community.</description></item><item><title>Labs Weekly Catchup #5</title><link>https://memo.d.foundation/playground/01_literature/labs-weekly-catchup-5/</link><pubDate>Wed, 03 Jan 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/01_literature/labs-weekly-catchup-5/</guid><description>Event Date Discord Channel Type 03/01/2024 üçé apple Internal Our fifth weekly catchup. We organize an agenda the day beforehand and consolidate our findings, notable research progress, possibly new tech, insight or technique everyone should know.</description></item><item><title>Labs Weekly Catchup #4</title><link>https://memo.d.foundation/playground/01_literature/labs-weekly-catchup-4/</link><pubDate>Thu, 28 Dec 2023 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/01_literature/labs-weekly-catchup-4/</guid><description>Event Date Discord Channel Type 27/12/2023 üçé apple Internal Our fourth weekly catchup. We organize an agenda the day beforehand and consolidate our findings, notable research progress, possibly new tech, insight or technique everyone should know.</description></item><item><title>Labs Weekly Catchup #3</title><link>https://memo.d.foundation/playground/01_literature/labs-weekly-catchup-3/</link><pubDate>Thu, 21 Dec 2023 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/01_literature/labs-weekly-catchup-3/</guid><description>Event Date Discord Channel Type 20/12/2023 üçé apple Internal Our third weekly catchup. We organize an agenda the day beforehand and consolidate our findings, notable research progress, possibly new tech, insight or technique everyone should know.</description></item><item><title>Labs Weekly Catchup #2</title><link>https://memo.d.foundation/playground/01_literature/labs-weekly-catchup-2/</link><pubDate>Thu, 14 Dec 2023 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/01_literature/labs-weekly-catchup-2/</guid><description>Event Date Discord Channel Type 13/12/2023 üçé apple Internal Our second weekly catchup. We organize an agenda the day beforehand and consolidate our findings, notable research progress, possibly new tech, insight or technique everyone should know.</description></item><item><title>Labs Weekly Catchup #1</title><link>https://memo.d.foundation/playground/01_literature/labs-weekly-catchup-1/</link><pubDate>Wed, 06 Dec 2023 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/01_literature/labs-weekly-catchup-1/</guid><description>Event Date Discord Channel Type 06/12/2023 üçé apple Internal Our first weekly catchup. We organize an agenda the day beforehand and consolidate our findings, notable research progress, possibly new tech, insight or technique everyone should know.</description></item><item><title>Zaplib post-mortem</title><link>https://memo.d.foundation/playground/frontend/zaplib-post-mortem/</link><pubDate>Sun, 01 May 2022 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/zaplib-post-mortem/</guid><description>Zaplib is a frontend framework that helps to port your JS/TS app to Rust/Wasm. This idea was found after the founder&amp;rsquo;s painful work at https://webviz.</description></item><item><title>Playaround With Rust</title><link>https://memo.d.foundation/playground/01_literature/playaround-with-rust/</link><pubDate>Fri, 30 Aug 2019 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/01_literature/playaround-with-rust/</guid><description>Mozilla intends to use Rust as a platform for prototyping experimental¬†browser architectures.
Specifically, the hope is to develop a browser¬†that is more amenable to safe and parallel than the existing ones, while also being less prone to common C++ coding errors.</description></item></channel></rss>