<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>react on Dwarves Foundation</title><link>https://memo.d.foundation/tags/react/</link><description>Recent content in react on Dwarves Foundation</description><generator>Hugo</generator><language>en-us</language><managingEditor>han@d.foundation (Han Ngo)</managingEditor><webMaster>han@d.foundation (Han Ngo)</webMaster><copyright>© 2024 Dwarves Foundation.</copyright><lastBuildDate>Tue, 29 Oct 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://memo.d.foundation/tags/react/index.xml" rel="self" type="application/rss+xml"/><item><title>Code splitting in React</title><link>https://memo.d.foundation/playground/frontend/react/code-splitting/</link><pubDate>Tue, 29 Oct 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/react/code-splitting/</guid><description>Code splitting is a technique used to optimize JavaScript bundles by breaking them into smaller chunks, loading only the necessary parts when they’re needed.</description></item><item><title>Component composition patterns in React</title><link>https://memo.d.foundation/playground/frontend/react/component-composition-patterns/</link><pubDate>Tue, 29 Oct 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/react/component-composition-patterns/</guid><description>Component composition patterns are foundational for creating scalable, flexible, and reusable React components. They allow us to build UIs by combining smaller, single-purpose components in various ways.</description></item><item><title>Design system integration in react</title><link>https://memo.d.foundation/playground/frontend/react/design-system-integration/</link><pubDate>Tue, 29 Oct 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/react/design-system-integration/</guid><description>Design system integration in React involves creating a set of reusable, consistent, and easily maintainable components that reflect your app’s design guidelines.</description></item><item><title>Hook architecture in react</title><link>https://memo.d.foundation/playground/frontend/react/hook-architecture/</link><pubDate>Tue, 29 Oct 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/react/hook-architecture/</guid><description>Hooks architecture in React refers to the systematic approach of using hooks to manage state, side effects, and reusable logic across components.</description></item><item><title>Rendering strategies in React</title><link>https://memo.d.foundation/playground/frontend/react/rendering-strategies/</link><pubDate>Tue, 29 Oct 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/react/rendering-strategies/</guid><description>Client-side rendering (CSR), server-side rendering (SSR), and static-site generation (SSG) are three key rendering strategies in modern web development. Each approach has unique advantages and trade-offs, impacting application performance, SEO, and user experience.</description></item><item><title>State management strategy in React</title><link>https://memo.d.foundation/playground/frontend/react/state-management-strategy/</link><pubDate>Tue, 29 Oct 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/react/state-management-strategy/</guid><description>State management is a core architectural topic in React, especially as applications grow in complexity. While local component state (using useState or useReducer) is suitable for small to medium apps, more sophisticated state management strategies become essential as your app scales.</description></item><item><title>Testing strategies in React</title><link>https://memo.d.foundation/playground/frontend/react/testing-strategies/</link><pubDate>Tue, 29 Oct 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/react/testing-strategies/</guid><description>Testing is essential for ensuring that your code works as expected, is maintainable, and doesn&amp;rsquo;t introduce bugs with future changes. React testing involves unit tests, integration tests, and end-to-end (e2e) tests, each targeting different aspects of your application&amp;rsquo;s functionality.</description></item><item><title>React Server Components, NextJs Route and Data Fetching</title><link>https://memo.d.foundation/playground/frontend/react-server-component/</link><pubDate>Sun, 28 May 2023 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/react-server-component/</guid><description>React Server Components, NextJs Route and Data Fetching React Server Components (RSCs) offer the flexibility to decide where to render components based on their purpose, diverging from the client-side rendering approach of Single-Page Applications.</description></item><item><title>Tackling Server State complexity in Frontend Development</title><link>https://memo.d.foundation/playground/frontend/tackling-server-state-complexity-in-frontend-development/</link><pubDate>Sat, 11 Mar 2023 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/tackling-server-state-complexity-in-frontend-development/</guid><description>Frontend development has become increasingly complex over the years, and with it, the need for efficient state management. Global State is one such programming pattern that has emerged as a solution to the problem of prop drilling.</description></item><item><title>When should we use useReducer instead of useState?</title><link>https://memo.d.foundation/playground/frontend/when-should-we-use-usereducer-instead-of-usestate/</link><pubDate>Wed, 01 Mar 2023 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/when-should-we-use-usereducer-instead-of-usestate/</guid><description>Imagine we have a component with multiple states. It is simple enough not to use state management libraries. useState is surely a choice for the sake of brevity and clarity.</description></item><item><title>Preserving and Resetting state in React</title><link>https://memo.d.foundation/playground/frontend/preserving-and-resetting-state-in-react/</link><pubDate>Mon, 27 Feb 2023 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/preserving-and-resetting-state-in-react/</guid><description>Why should you read this article? Understand how state in React works const [isPlayerA, setIsPlayerA] = useState(true) function Counter(name) { const [score, setScore] = useState(0) return ( &amp;lt;&amp;gt; &amp;lt;div&amp;gt; {name}: {score} &amp;lt;/div&amp;gt; &amp;lt;button onClick={() =&amp;gt; setScore(score + 1)}&amp;gt;+1&amp;lt;/button&amp;gt; &amp;lt;/&amp;gt; ) } // ---------- // Do you think they are the same?</description></item><item><title>Invoking component functions in React</title><link>https://memo.d.foundation/playground/00_fleeting/202301091379-invoking-component-functions-in-react/</link><pubDate>Mon, 09 Jan 2023 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/00_fleeting/202301091379-invoking-component-functions-in-react/</guid><description>What happens if you invoked the component function directly in React?: Let&amp;rsquo;s take a look at this example:
const ExampleComponent = () =&amp;gt;{ const [input, setInput] = useState('') //do something here } export const App = () =&amp;gt;{ const [show, setShow] = useState(false) return ( &amp;lt;div&amp;gt; &amp;lt;button onClick={() =&amp;gt; setShow(!</description></item><item><title>React Fiber</title><link>https://memo.d.foundation/playground/00_fleeting/202210131516-react-fiber/</link><pubDate>Thu, 13 Oct 2022 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/00_fleeting/202210131516-react-fiber/</guid><description>An Introduction to React Fiber Fiber is the new reconciliation algorithm since React 16, a completely backward-compatible rewrite of the old reconciler (Stack Reconciler).</description></item><item><title>Why Virtual DOM is fast?</title><link>https://memo.d.foundation/playground/frontend/why-virtual-dom-is-fast/</link><pubDate>Tue, 09 Aug 2022 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/why-virtual-dom-is-fast/</guid><description>React and Vue, two popular front-end frameworks, both use Virtual DOM to improve page rendering efficiency. Understanding the concept of Virtual DOM sheds light on an important aspect of performance optimization on the client side.</description></item><item><title>useEffect double calls in React 18</title><link>https://memo.d.foundation/playground/frontend/useeffect-double-calls-in-react-18/</link><pubDate>Sat, 11 Jun 2022 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/frontend/useeffect-double-calls-in-react-18/</guid><description>In the React 18 version, the useEffect hook has been updated to called twice compare to only one in the older version in StrictMode.</description></item></channel></rss>