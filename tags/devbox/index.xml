<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>devbox on Dwarves Foundation</title><link>https://memo.d.foundation/tags/devbox/</link><description>Recent content in devbox on Dwarves Foundation</description><generator>Hugo</generator><language>en-us</language><managingEditor>han@d.foundation (Han Ngo)</managingEditor><webMaster>han@d.foundation (Han Ngo)</webMaster><copyright>© 2024 Dwarves Foundation.</copyright><lastBuildDate>Fri, 09 Aug 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://memo.d.foundation/tags/devbox/index.xml" rel="self" type="application/rss+xml"/><item><title>§ Devbox</title><link>https://memo.d.foundation/playground/devbox/devbox/</link><pubDate>Fri, 09 Aug 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/devbox/devbox/</guid><description>Why Devbox? The Big Picture The Game-Changing Reasons to Choose Devbox The Building Blocks Devbox: Supercharge Your Development Workflow Devbox Services: Tame Complex Setups with Ease Devbox Plugins: Extend and Customize Like a Pro From Zero to Hero Craft Your Perfect Shell with Devbox Devbox.</description></item><item><title>Devbox in Production: Our Success Story</title><link>https://memo.d.foundation/playground/devbox/story/devbox-production-success-story/</link><pubDate>Fri, 09 Aug 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/devbox/story/devbox-production-success-story/</guid><description>Remember when setting up a new project felt like assembling IKEA furniture blindfolded? Yeah, those days are over. Here&amp;rsquo;s how Devbox revolutionized our workflow, from dev to production.</description></item><item><title>Devbox Plugins: Turbocharge Your Dev Setup</title><link>https://memo.d.foundation/playground/devbox/introduction/devbox-plugins/</link><pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/devbox/introduction/devbox-plugins/</guid><description>Ever spent hours configuring a new package in your dev environment? Yeah, we&amp;rsquo;ve all been there. It sucks. That&amp;rsquo;s why we created Devbox Plugins.</description></item><item><title>Devbox Services: Tame Your Daemons with process-compose</title><link>https://memo.d.foundation/playground/devbox/introduction/devbox-services/</link><pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/devbox/introduction/devbox-services/</guid><description>Ever wished you could manage your development services as easily as with Docker Compose, but without all the Docker baggage? Say hello to Devbox Services, powered by process-compose.</description></item><item><title>Devbox Shell: Your Dev Environment, Your Rules</title><link>https://memo.d.foundation/playground/devbox/guide/run-your-own-shell/</link><pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/devbox/guide/run-your-own-shell/</guid><description>Devbox Shell: Your Dev Environment, Your Rules So you&amp;rsquo;ve installed Devbox with that nifty one-liner:
curl -fsSL https://get.jetify.com/devbox | bash Now what?</description></item><item><title>Devbox vs Nix: Why We Chose Simplicity</title><link>https://memo.d.foundation/playground/devbox/introduction/why-devbox-but-not-nix/</link><pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/devbox/introduction/why-devbox-but-not-nix/</guid><description>Let&amp;rsquo;s cut to the chase: Devbox is Nix with training wheels, and that&amp;rsquo;s a good thing. Here&amp;rsquo;s why we&amp;rsquo;re all in on Devbox for building killer dev environments.</description></item><item><title>Devbox vs Nix: Why We Chose Simplicity</title><link>https://memo.d.foundation/playground/devbox/research/content-addressable-storage-in-docker/</link><pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/devbox/research/content-addressable-storage-in-docker/</guid><description>Let&amp;rsquo;s cut to the chase: Devbox is Nix with training wheels, and that&amp;rsquo;s a good thing. Here&amp;rsquo;s why we&amp;rsquo;re all in on Devbox for building killer dev environments.</description></item><item><title>Devbox: Your Dev Environment on Steroids</title><link>https://memo.d.foundation/playground/devbox/introduction/devbox/</link><pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/devbox/introduction/devbox/</guid><description>Remember the last time you onboarded a new developer? Or tried a new tool without wrecking your setup? Yeah, it probably sucked.</description></item><item><title>Devbox.json: Your Project's DNA</title><link>https://memo.d.foundation/playground/devbox/guide/devboxjson/</link><pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/devbox/guide/devboxjson/</guid><description>Devbox.json: Your Project&amp;rsquo;s DNA Ever wished you could clone your perfect dev environment? With devbox.json, you can. This little file is the beating heart of your Devbox setup.</description></item><item><title>Ditch the Containers: Go Containerless with Devbox</title><link>https://memo.d.foundation/playground/devbox/guide/containerless/</link><pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/devbox/guide/containerless/</guid><description>Ditch the Containers: Go Containerless with Devbox Containers are great, but sometimes they&amp;rsquo;re overkill. With Devbox Services and Plugins, you can create a sleek, containerless environment for local development.</description></item><item><title>Docker Build Issues</title><link>https://memo.d.foundation/playground/devbox/research/docker-issues/</link><pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/devbox/research/docker-issues/</guid><description>Docker build is not deterministic. This means that with the same Dockerfile, different build times (or builds on different machines) can result in different outcomes.</description></item><item><title>Fixed-output Derivation in Nix</title><link>https://memo.d.foundation/playground/devbox/research/fixed-output-derivation/</link><pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/devbox/research/fixed-output-derivation/</guid><description>On different machines with different nixpkgs versions, Nix build will result different packages.
To handle this issue, Fixed-output derivation is raised.</description></item><item><title>Nix - Build the same thing at any time</title><link>https://memo.d.foundation/playground/devbox/research/nix-build-the-same-thing-at-any-time/</link><pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/devbox/research/nix-build-the-same-thing-at-any-time/</guid><description>Nix gives us the ability to build Docker image with minimum deterministic by providing some solid mechanisms.
Firstly, using Nix, we can specify exactly the version of each package and its dependencies, and keep it completely the same each time the package build happens.</description></item><item><title>Nix - Minimum changes, Minimum redundancies</title><link>https://memo.d.foundation/playground/devbox/research/nix-minimum-changes-minimum-redundancies/</link><pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/devbox/research/nix-minimum-changes-minimum-redundancies/</guid><description>The reproducible issue is resolved in the previous part. But we still have another problem when using Docker build, it is shadow copies.</description></item><item><title>Nix Flakes: Next-Level Package Management</title><link>https://memo.d.foundation/playground/devbox/introduction/nix-flakes/</link><pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/devbox/introduction/nix-flakes/</guid><description>Ever tried to share your perfect dev setup, only to hear &amp;ldquo;It doesn&amp;rsquo;t work on my machine&amp;rdquo;? Nix Flakes is about to make that headache a thing of the past.</description></item><item><title>Nix is Faster Than Docker Build</title><link>https://memo.d.foundation/playground/devbox/research/nix-is-faster-than-docker-build/</link><pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/devbox/research/nix-is-faster-than-docker-build/</guid><description>As I mentioned in the Build the same thing at any time, Nix knows the exact content of packages and dependencies before builds.</description></item><item><title>Nix Shell: Bulletproof Development Environments</title><link>https://memo.d.foundation/playground/devbox/introduction/nix-shell/</link><pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/devbox/introduction/nix-shell/</guid><description>Ever wished you could clone your perfect dev setup to any machine? Or test a new package without breaking your system?</description></item><item><title>Nix: Revolutionizing Docker Image Builds</title><link>https://memo.d.foundation/playground/devbox/research/nix-in-building-docker-images/</link><pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/devbox/research/nix-in-building-docker-images/</guid><description>Docker&amp;rsquo;s great, but let&amp;rsquo;s face it: building images can be a pain. Enter Nix, the tool that&amp;rsquo;s about to change your Docker game forever.</description></item><item><title>Pinning nixpkgs in Nix</title><link>https://memo.d.foundation/playground/devbox/research/pinning-nixpkgs/</link><pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/devbox/research/pinning-nixpkgs/</guid><description>Pinning nixpkgs means you can choose the version of nixpkgs, and then all packages required for building your application and its dependencies are fetched from this nixpkgs version where the version of each package is specified and not changed over time.</description></item><item><title>Shadow Copies in Docker Builds</title><link>https://memo.d.foundation/playground/devbox/research/shadow-copies/</link><pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/devbox/research/shadow-copies/</guid><description>One more issue that comes from internet access of Docker build is Shadow copies aka redundant files that are not cleaned after new versions of packages are installed.</description></item><item><title>The reason for being</title><link>https://memo.d.foundation/playground/devbox/introduction/the-reason-for-being/</link><pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/devbox/introduction/the-reason-for-being/</guid><description>The Pursuit of Consistency With the rise of cloud services, we first adapted Docker as a containerization tool to wrap our application into an isolated environment for running on the cloud for production.</description></item><item><title>Unstable Package Installation in Docker</title><link>https://memo.d.foundation/playground/devbox/research/unstable-package-installation/</link><pubDate>Thu, 01 Aug 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/devbox/research/unstable-package-installation/</guid><description>For example, let&amp;rsquo;s suppose that we have the following Dockerfile.
FROM ubuntu:20.04 RUN apt-get update &amp;amp;&amp;amp; apt-get install -y python3 Imagine that the first time you build your Docker image, the version of Python is 3.</description></item><item><title>Using Devbox to setup local development environment</title><link>https://memo.d.foundation/playground/devbox/story/devbox-local-development-env/</link><pubDate>Thu, 13 Jun 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/devbox/story/devbox-local-development-env/</guid><description>Welcome back to our Devbox series! Previously, we&amp;rsquo;ve explored the journey from the early days of virtualization to the widespread adoption of Docker.</description></item><item><title>The overview into Nix &amp; how we use Devbox @ Dwarves</title><link>https://memo.d.foundation/playground/devbox/story/devbox-nix-and-our-devbox-adoption/</link><pubDate>Wed, 24 Apr 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/devbox/story/devbox-nix-and-our-devbox-adoption/</guid><description>This is the 3rd post of Devbox series includes
Devbox #1: The world before Docker Devbox #2: Our Docker adoption and its challenges Devbox #3: The overview into Nix &amp;amp; how we use Devbox @ Dwarves In the previous session, that is Devbox #2: Our Docker adoption and its challenges , we talked about “How Docker is adopted in my development team and its challenges encountered along the way?</description></item><item><title>Our Docker adoption and its challenges</title><link>https://memo.d.foundation/playground/devbox/story/devbox-docker-adoption-and-challenges/</link><pubDate>Fri, 19 Apr 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/devbox/story/devbox-docker-adoption-and-challenges/</guid><description>This is the 2nd post of Devbox series includes
Devbox #1: The world before Docker Devbox #2: Our Docker adoption and its challenges Devbox #3: The overview into Nix &amp;amp; how we use Devbox @ Dwarves In the previous session that is Devbox #1: The world before Docker, we discussed the world from the beginning before container and Docker concepts emerged as groundbreaking advancements in software development.</description></item><item><title>The world before Docker</title><link>https://memo.d.foundation/playground/devbox/story/devbox-a-world-before-docker/</link><pubDate>Tue, 09 Apr 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/devbox/story/devbox-a-world-before-docker/</guid><description>This is the 1st post of Devbox series includes
Devbox #1: The world before Docker Devbox #2: Our Docker adoption and its challenges Devbox #3: The overview into Nix &amp;amp; how we use Devbox @ Dwarves The It-works-on-my-machine time Sometimes, in my software development team, a strange issue is raised.</description></item></channel></rss>