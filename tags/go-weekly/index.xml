<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>go-weekly on Dwarves Foundation</title><link>https://memo.d.foundation/tags/go-weekly/</link><description>Recent content in go-weekly on Dwarves Foundation</description><generator>Hugo</generator><language>en-us</language><managingEditor>han@d.foundation (Han Ngo)</managingEditor><webMaster>han@d.foundation (Han Ngo)</webMaster><copyright>© 2024 Dwarves Foundation.</copyright><lastBuildDate>Fri, 13 Dec 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://memo.d.foundation/tags/go-weekly/index.xml" rel="self" type="application/rss+xml"/><item><title>Go Commentary #24: Coming in Go 1.24: testing/synctest experiment for time and concurrency testing</title><link>https://memo.d.foundation/playground/go/weekly/dec-13/</link><pubDate>Fri, 13 Dec 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/go/weekly/dec-13/</guid><description>Coming in Go 1.24: testing/synctest experiment for time and concurrency testing Context func Test(t *testing.T) { before := time.Now() time.</description></item><item><title>Go Commentary #23: Draft Release Notes for Go 1.24 and weak pointers in Go</title><link>https://memo.d.foundation/playground/go/weekly/dec-06/</link><pubDate>Fri, 06 Dec 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/go/weekly/dec-06/</guid><description>Draft Release Notes Go 1.24 Go 1.24 is not yet released. These are work-in-progress release notes. Go 1.24 is expected to be released in February 2025.</description></item><item><title>Go Commentary #22: GoMLX: ML in Go without Python</title><link>https://memo.d.foundation/playground/go/weekly/nov-29/</link><pubDate>Fri, 29 Nov 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/go/weekly/nov-29/</guid><description>GoMLX: ML in Go without Python How ML models are implemented Written in Python, using frameworks like TensorFlow, JAX or Pytorch that take care of:</description></item><item><title>Go Commentary #21: Go sync.Once is Simple</title><link>https://memo.d.foundation/playground/go/weekly/nov-22/</link><pubDate>Fri, 22 Nov 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/go/weekly/nov-22/</guid><description>Go sync.Once is simple&amp;hellip; Is it really? What is sync.Once? &amp;ldquo;Once is an object that will perform exactly one action&amp;rdquo; var once sync.</description></item><item><title>Go Commentary #20: Go Turns 15</title><link>https://memo.d.foundation/playground/go/weekly/nov-15/</link><pubDate>Fri, 15 Nov 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/go/weekly/nov-15/</guid><description>Go Turns 15 So much has changed since Go&amp;rsquo;s 10 year anniversery
Go’s user base x3 in the past five years, making it one of the fastest growing languages.</description></item><item><title>Go Commentary #19: Writing secure Go code</title><link>https://memo.d.foundation/playground/go/weekly/nov-08/</link><pubDate>Fri, 08 Nov 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/go/weekly/nov-08/</guid><description>Writing secure Go code Context:
What does it mean to keep security in mind when writing Go code?
Solution:</description></item><item><title>Go Commentary #18: Fuzz Testing Go HTTP Services</title><link>https://memo.d.foundation/playground/go/weekly/nov-01/</link><pubDate>Fri, 01 Nov 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/go/weekly/nov-01/</guid><description>Fuzz Testing Go HTTP Services Context:
You can&amp;rsquo;t envision all of the possible inputs your code could receive =&amp;gt; You can only find bugs that you expect to find Solution:</description></item><item><title>Go Commentary #17: Leveraging benchstat Projects in Go benchmark and Go Plan9 memo on 450% speeding up calculations</title><link>https://memo.d.foundation/playground/go/weekly/oct-25/</link><pubDate>Fri, 25 Oct 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/go/weekly/oct-25/</guid><description>Leveraging benchstat Projections in Go Benchmark Analysis! Context: (golang.org/x/perf/cmd/benchstat)
Old-school:
Creating the benchmark test code: func BenchmarkFoo(b *testing.B) { b.</description></item><item><title>Go Commentary #16: Understand sync.Map</title><link>https://memo.d.foundation/playground/go/weekly/oct-18/</link><pubDate>Fri, 18 Oct 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/go/weekly/oct-18/</guid><description>Go sync.Map: The Right Tool for the Right Job Context:
func main() { m := make(map[string]int) go func() { for { m[&amp;quot;blog&amp;quot;] = 1 } }() go func() { for { fmt.</description></item><item><title>Go Commentary #15: Using Go embed, and Reflect</title><link>https://memo.d.foundation/playground/go/weekly/oct-11/</link><pubDate>Fri, 11 Oct 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/go/weekly/oct-11/</guid><description>Using Go Embed The go:embed directive tells the Go compiler to include files and folders into the compiled binary at build time.</description></item><item><title>Go Commentary #14: Golang compile-time evaluation and Go bindings to SQLite using wazero</title><link>https://memo.d.foundation/playground/go/weekly/oct-04/</link><pubDate>Fri, 04 Oct 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/go/weekly/oct-04/</guid><description>Prep: Golang comptime. Pure blasphemy A small Go tool that enables compile-time function evaluation. By using prep.Comptime, you can evaluate functions at build time, replacing them with their computed results.</description></item><item><title>Go Commentary #13: Compiler Quests and Vector Vexations</title><link>https://memo.d.foundation/playground/go/weekly/sep-27/</link><pubDate>Fri, 27 Sep 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/go/weekly/sep-27/</guid><description>Register Allocation in the Go Compiler Red Hat has graced us with a deep dive into Go&amp;rsquo;s register allocation in the compiler.</description></item><item><title>Go Commentary #12: CLI Renaissance with Kubernetes, REST, and Terminal Readers in the Age of Complexity</title><link>https://memo.d.foundation/playground/go/weekly/sep-20/</link><pubDate>Fri, 20 Sep 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/go/weekly/sep-20/</guid><description>kl: An interactive Kubernetes log viewer for your terminal An interactive Kubernetes log viewer for your terminal.
// Example usage of kl kl --context my-context,other-context -n default,other-ns This tool allows you to view logs across multiple containers, pods, and even clusters.</description></item><item><title>Go Commentary #11: The Gopher's LLM Revolution - Actors, Frameworks, and the Future of Go</title><link>https://memo.d.foundation/playground/go/weekly/sep-13/</link><pubDate>Fri, 13 Sep 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/go/weekly/sep-13/</guid><description>Go Survey The feedbacks from us - Gophers will help Go Team to understand: How Go is being used across various industries and organizations The challenges you face as a Go developer The features and improvements you’d like to see in future releases How we can better support the thriving Go community Building LLM-powered applications in Go Ah, the sweet smell of progress mixed with the stench of hype.</description></item><item><title>Go Commentary #10: Script, Telemetry</title><link>https://memo.d.foundation/playground/go/weekly/sep-06/</link><pubDate>Fri, 06 Sep 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/go/weekly/sep-06/</guid><description>Script: Making it easy to write shell-like scripts in Go Go library that simplifies writing shell-like scripts by providing a fluent API for common operations like file manipulation, text processing, and command execution.</description></item><item><title>Go Commentary #9: TinyGo, SQLite Vector Search, and Authorization</title><link>https://memo.d.foundation/playground/go/weekly/aug-30/</link><pubDate>Fri, 30 Aug 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/go/weekly/aug-30/</guid><description>TinyGo 0.33.0: The Go Compiler for &amp;lsquo;Small Places&amp;rsquo; Context:
TinyGo is a Go compiler designed for small environments like microcontrollers, WebAssembly (wasm/wasi), and command-line tools.</description></item><item><title>Go Commentary #8: Jupyter Notebooks, Kubernetes Tools, GopherCon Talks</title><link>https://memo.d.foundation/playground/go/weekly/aug-23/</link><pubDate>Fri, 23 Aug 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/go/weekly/aug-23/</guid><description>GoNB: A Go Notebook Kernel for Jupyter Auto-complete and contextual help while coding. Rich content display: HTML, markdown (with latex), images, javascript, svg, videos, etc.</description></item><item><title>Go Commentary #7: Releases, Websockets, and Struct Behavior</title><link>https://memo.d.foundation/playground/go/weekly/aug-16/</link><pubDate>Fri, 16 Aug 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/go/weekly/aug-16/</guid><description>Go 1.23 Release Note Full notes that you should skim through to get full-fledged of Go 1.23 A New Home for nhooyr/websocket nhooyr/websocket is adopted by Coder, CDE - Cloud Development Environment Go structs are copied on assignment Inspired by Common Go Mistakes type Thing struct { Name string } func main() { thing := Thing{&amp;quot;record&amp;quot;} other_thing := thing other_thing.</description></item><item><title>Go Commentary #6: GUI Framework, Leadership Change</title><link>https://memo.d.foundation/playground/go/weekly/aug-09/</link><pubDate>Fri, 09 Aug 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/go/weekly/aug-09/</guid><description>Cogent Core: A New GUI Framework for Go GUI framework written in Go that allows you Code Once, Rune Everywhere (Core) (macOS, Windows, Linux, iOS, Android and web)</description></item><item><title>Go Commentary #5: Features, Memory Optimization, Minecraft Server, Code Editor, and LLM Tool</title><link>https://memo.d.foundation/playground/go/weekly/aug-02/</link><pubDate>Fri, 02 Aug 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/go/weekly/aug-02/</guid><description>Go Features By Version Context:
Go is released every six months. Each major Go release is supported until there are two newer major releases.</description></item><item><title>Go Commentary #4: Ethical Hacking, HTTP Requests, Mac App Development</title><link>https://memo.d.foundation/playground/go/weekly/jul-26/</link><pubDate>Fri, 26 Jul 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/go/weekly/jul-26/</guid><description>Using Go to send 500 Million HTTP Requests to 2.5 Million Hosts Context:
(Ethical hacking) To send 500 million of non RFC HTTP/1.</description></item><item><title>Go Commentary #3: Generic Collections, Generics Constraints, AI Bot</title><link>https://memo.d.foundation/playground/go/weekly/jul-12/</link><pubDate>Fri, 12 Jul 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/go/weekly/jul-12/</guid><description>Writing generic collection types in Go: the missing documentation Context:
Generics were released in Go 1.18 (~2y), is not used very much - only in some good cases for methods in slices and maps packages.</description></item><item><title>Go Weekly #2: Go 1.23 Iterators</title><link>https://memo.d.foundation/playground/go/weekly/jul-05/</link><pubDate>Fri, 05 Jul 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/go/weekly/jul-05/</guid><description>Why People are Angry over Go 1.23 Iterators Context:
Most languages provide standardized way to iterate over values stored in containers.</description></item><item><title>Go Weekly #1: Mastering Go Performance - eBPF and PGO Optimization Techniques</title><link>https://memo.d.foundation/playground/go/weekly/june-27/</link><pubDate>Thu, 27 Jun 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/go/weekly/june-27/</guid><description>An Applied Introduction to eBPF with Go Context:
We usually write software in user space (outside the OS&amp;rsquo;s kernel, e.</description></item></channel></rss>