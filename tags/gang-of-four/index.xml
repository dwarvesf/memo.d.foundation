<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>gang-of-four on Dwarves Foundation</title><link>https://memo.d.foundation/tags/gang-of-four/</link><description>Recent content in gang-of-four on Dwarves Foundation</description><generator>Hugo</generator><language>en-us</language><managingEditor>han@d.foundation (Han Ngo)</managingEditor><webMaster>han@d.foundation (Han Ngo)</webMaster><copyright>© 2024 Dwarves Foundation.</copyright><lastBuildDate>Fri, 12 Jul 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://memo.d.foundation/tags/gang-of-four/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduce the Observer pattern and its use cases</title><link>https://memo.d.foundation/playground/01_literature/observer-pattern/</link><pubDate>Fri, 12 Jul 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/01_literature/observer-pattern/</guid><description>Problem Imagine that you have two types of objects: a Customer and a Store. The customer is very interested in a particular brand of product (say, it’s a new model of the iPhone) which should become available in the store very soon.</description></item><item><title>Visitor design pattern, the concept, problem solution and use cases</title><link>https://memo.d.foundation/playground/01_literature/visitor-design-pattern/</link><pubDate>Fri, 12 Jul 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/01_literature/visitor-design-pattern/</guid><description>What is the Visitor Design Pattern? Visitor is a behavioral design pattern that lets you separate algorithms from the objects on which they operate.</description></item><item><title>Strategy design pattern, the concept, use cases and difference with the state design pattern</title><link>https://memo.d.foundation/playground/01_literature/strategy-design-pattern/</link><pubDate>Thu, 11 Jul 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/01_literature/strategy-design-pattern/</guid><description>Problem statement The separation of a renowned cookbook, by cuisine culture, into distinct cookbooks(strategies on how to cook dishes): The owner restaurant of the cookbook keeps a single cookbook to prevent the leaking of trade secrets.</description></item><item><title>A Tour of Template method pattern with Golang</title><link>https://memo.d.foundation/playground/01_literature/template-method-design-pattern/</link><pubDate>Fri, 28 Jun 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/01_literature/template-method-design-pattern/</guid><description>Problem Just imagine we need to implement a registration feature for our applications (web, mobile). A typical registration will have some basic steps such as fill in the form, verify account, redirect to login page, etc.</description></item><item><title>Command Pattern</title><link>https://memo.d.foundation/playground/01_literature/command-pattern/</link><pubDate>Thu, 27 Jun 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/01_literature/command-pattern/</guid><description>What is the Command Design Pattern? Command is a behavioral design pattern that encapsulates a request as an object. This allows you to parameterize methods with different requests, delay or queue a request’s execution, and support undoable operations.</description></item><item><title>State Pattern</title><link>https://memo.d.foundation/playground/01_literature/state-pattern/</link><pubDate>Thu, 27 Jun 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/01_literature/state-pattern/</guid><description>The State Design Pattern is a behavioral design pattern that allows an object to change its behavior when its internal state changes.</description></item><item><title>A tour of Singleton design pattern with Golang</title><link>https://memo.d.foundation/playground/01_literature/singleton-design-pattern/</link><pubDate>Mon, 10 Jun 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/01_literature/singleton-design-pattern/</guid><description>Problem Just imagine we need to build a simple web page to show live subscribers of a Youtube channel. Main object here is &amp;ldquo;subscriber&amp;rdquo; so we need a tool (counter) to update number of subscribers in real-time.</description></item><item><title>Going Through use cases of the prototype design pattern and it place among the creational patterns</title><link>https://memo.d.foundation/playground/01_literature/prototype-design-pattern/</link><pubDate>Mon, 10 Jun 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/01_literature/prototype-design-pattern/</guid><description>Problem statement We want a copy of an object, but the config only initialized at runtime, its fields and methods were private, or its properties were manipulated through multiple processes, so it is difficult to recreate the object.</description></item><item><title>Introduce the Builder pattern and its use cases</title><link>https://memo.d.foundation/playground/01_literature/builder-design-pattern/</link><pubDate>Mon, 10 Jun 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/01_literature/builder-design-pattern/</guid><description>Problem statement We want to create complex object without worrying too much about the hows, we could use Factory pattern to abstract away those details and just give us the output, but the drawback is you get a fixed same object everytime.</description></item></channel></rss>