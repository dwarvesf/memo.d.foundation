<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>generics on Dwarves Foundation</title><link>https://memo.d.foundation/tags/generics/</link><description>Recent content in generics on Dwarves Foundation</description><generator>Hugo</generator><language>en-us</language><managingEditor>han@d.foundation (Han Ngo)</managingEditor><webMaster>han@d.foundation (Han Ngo)</webMaster><copyright>Â© 2024 Dwarves Foundation.</copyright><lastBuildDate>Mon, 14 Oct 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://memo.d.foundation/tags/generics/index.xml" rel="self" type="application/rss+xml"/><item><title>How does Go achieve type safety when it enables generics?</title><link>https://memo.d.foundation/playground/go/go-generics-type-safety/</link><pubDate>Mon, 14 Oct 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/go/go-generics-type-safety/</guid><description>Go introduced generics with Go 1.18, which was officially released in March 2022. This update allowed Go developers to write more flexible and reusable code by supporting type parameters, enabling functions, and data structures to work with different types without sacrificing type safety.</description></item><item><title>Go Commentary #3: Generic Collections, Generics Constraints, AI Bot</title><link>https://memo.d.foundation/playground/go/weekly/jul-12/</link><pubDate>Fri, 12 Jul 2024 00:00:00 +0000</pubDate><author>han@d.foundation (Han Ngo)</author><guid>https://memo.d.foundation/playground/go/weekly/jul-12/</guid><description>Writing generic collection types in Go: the missing documentation Context:
Generics were released in Go 1.18 (~2y), is not used very much - only in some good cases for methods in slices and maps packages.</description></item></channel></rss>