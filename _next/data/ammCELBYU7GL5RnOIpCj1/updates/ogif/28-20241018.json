{"pageProps":{"directoryTree":{"/pinned":{"label":"Pinned Notes","children":{"/culture/readme":{"label":"Notes on our culture","children":{}},"/culture/ogif-intro":{"label":"OGIF - Oh God It's Friday","children":{}}}},"/":{"label":"Home","children":{"/earn":{"label":"Earn","children":{"/earn/000-productivity":{"label":"Productivity","children":{}},"/earn/001-quality":{"label":"Software Quality","children":{}},"/earn/002-open-source":{"label":"Open Source","children":{}},"/earn/003-liquidity":{"label":"Liquidity","children":{}},"/earn/readme":{"label":"👾 Open bounties","children":{}}}},"/playground":{"label":"Playground","children":{"/playground/rfc":{"label":"RFC","children":{"/playground/rfc/readme":{"label":"RFCs","children":{}},"/playground/rfc/000-template":{"label":"000 RFC template","children":{}}}},"/playground/topics":{"label":"Topics","children":{"/playground/topics/blockchain":{"label":"Blockchain","children":{"/playground/topics/blockchain/build-custom-ai-agent-with-elizaos":{"label":"Build custom AI Agent with ElizaOS","children":{}},"/playground/topics/blockchain/web3-development-with-foundry":{"label":"Web3 Development with Foundry","children":{}},"/playground/topics/blockchain/cross-chain-transfers-implementing-a-token-swap-from-base-chain-to-bitcoin":{"label":"Implement a Token Swap from the Base chain to Bitcoin for cross-chain transactions","children":{}},"/playground/topics/blockchain/ton_core_concept":{"label":"Ton's base concepts","children":{}},"/playground/topics/blockchain/ton_blockchain_of_blockchains":{"label":"Ton: Blockchain of blockchains","children":{}},"/playground/topics/blockchain/introduce-to-solana-token-2022-new-standard-to-create-a-token-in-solana":{"label":"Introduce to Solana Token 2022 - new standard to create a token in solana","children":{}},"/playground/topics/blockchain/solana-core-concept":{"label":"Solana core concepts","children":{}},"/playground/topics/blockchain/metaplex-nft-compression":{"label":"Metaplex NFT Compression","children":{}},"/playground/topics/blockchain/plonky2":{"label":"Plonky2","children":{}},"/playground/topics/blockchain/polygon-zkevm-architecture":{"label":"Polygon zkEVM architecture","children":{}},"/playground/topics/blockchain/starknet-architecture":{"label":"StarkNet architecture","children":{}},"/playground/topics/blockchain/zk-snarks":{"label":"zk-SNARKs","children":{}},"/playground/topics/blockchain/layer-2":{"label":"Layer 2: Scaling Solutions for Ethereum","children":{}},"/playground/topics/blockchain/solana-account":{"label":"Solana Account","children":{}},"/playground/topics/blockchain/foundational-topics":{"label":"Foundational Topics","children":{"/playground/topics/blockchain/foundational-topics/zero-knowledge-proofs":{"label":"Zero-knowledge Proofs","children":{}},"/playground/topics/blockchain/foundational-topics/blocks":{"label":"Blocks","children":{}},"/playground/topics/blockchain/foundational-topics/distributed-systems":{"label":"Distributed systems","children":{}},"/playground/topics/blockchain/foundational-topics/pos":{"label":"PoS","children":{}},"/playground/topics/blockchain/foundational-topics/smart-contract":{"label":"Smart Contract","children":{}},"/playground/topics/blockchain/foundational-topics/topics":{"label":"Topics","children":{}}}},"/playground/topics/blockchain/multisign-wallet":{"label":"Multisign wallet","children":{}},"/playground/topics/blockchain/anchor-framework":{"label":"Anchor framework","children":{}},"/playground/topics/blockchain/blockchain-bridge":{"label":"Blockchain Bridge","children":{}},"/playground/topics/blockchain/nft-fractionalization":{"label":"NFT Fractionalization","children":{}},"/playground/topics/blockchain/how-tokens-work-on-solana":{"label":"How Tokens Work on Solana","children":{}},"/playground/topics/blockchain/liquidity-pool":{"label":"Liquidity pool","children":{}}}},"/playground/topics/frontend":{"label":"Frontend","children":{"/playground/topics/frontend/report":{"label":"Report","children":{"/playground/topics/frontend/report/frontend-report-march-2025":{"label":"March 2025","children":{}},"/playground/topics/frontend/report/frontend-report-february-2025":{"label":"February 2025","children":{}},"/playground/topics/frontend/report/frontend-report-january-2025":{"label":"January 2025","children":{}},"/playground/topics/frontend/report/frontend-report-second-half-of-november-2024":{"label":"Nov 2024 (Second Half)","children":{}},"/playground/topics/frontend/report/frontend-report-first-half-of-november-2024":{"label":"Nov 2024 (First Half)","children":{}},"/playground/topics/frontend/report/frontend-report-october-2024":{"label":"October 2024","children":{}},"/playground/topics/frontend/report/frontend-report-september-2024":{"label":"September 2024","children":{}},"/playground/topics/frontend/report/frontend-report-august-2024":{"label":"August 2024","children":{}},"/playground/topics/frontend/report/frontend-report-july-2024":{"label":"July 2024","children":{}}}},"/playground/topics/frontend/react":{"label":"React","children":{"/playground/topics/frontend/react/code-splitting":{"label":"Code splitting","children":{}},"/playground/topics/frontend/react/component-composition-patterns":{"label":"Component composition patterns","children":{}},"/playground/topics/frontend/react/design-system-integration":{"label":"Design system integration","children":{}},"/playground/topics/frontend/react/hook-architecture":{"label":"Hook architecture","children":{}},"/playground/topics/frontend/react/rendering-strategies":{"label":"Rendering strategies","children":{}},"/playground/topics/frontend/react/state-management-strategy":{"label":"State management strategy","children":{}},"/playground/topics/frontend/react/testing-strategies":{"label":"Testing strategies","children":{}}}},"/playground/topics/frontend/websockets":{"label":"WebSockets","children":{}},"/playground/topics/frontend/from-markup-to-pixels-a-look-inside-the-dom-cssom-and-render-tree":{"label":"From Markup to Pixels - A look inside the DOM, CSSOM, and Render Tree","children":{}},"/playground/topics/frontend/window-and-iframe-communication":{"label":"Window and iframe communication","children":{}},"/playground/topics/frontend/adoption-of-pnpm":{"label":"Adoption Of Pnpm","children":{}},"/playground/topics/frontend/applying-mock-service-worker-msw-for-seamless-web-development":{"label":"Applying Mock Service Worker (MSW) for Seamless Web Development","children":{}},"/playground/topics/frontend/render-optimization-in-data-fetching-libraries":{"label":"Render optimization in data-fetching libraries","children":{}},"/playground/topics/frontend/a-fragment-colocation-pattern-with-react-apollo-graphql":{"label":"A Fragment Colocation Pattern with React & Apollo GraphQL","children":{}},"/playground/topics/frontend/scroll-driven-animations":{"label":"Scroll-driven animations","children":{}},"/playground/topics/frontend/react-server-component":{"label":"React Server Components, NextJs Route and Data Fetching","children":{}},"/playground/topics/frontend/url-formats-for-sharing-via-social-networks":{"label":"URL formats for sharing via social networks","children":{}},"/playground/topics/frontend/shadow-dom":{"label":"Shadow DOM","children":{}},"/playground/topics/frontend/choosing-the-right-javascript-framework-a-deep-dive-into-react-vs-angular-vs-vue":{"label":"Choosing The Right Javascript Framework A Deep Dive Into React Vs Angular Vs Vue","children":{}},"/playground/topics/frontend/lessons-learned-from-being-a-part-of-corporate-micro-frontend-implementation":{"label":"Lessons Learned From Being A Part Of Corporate Micro Frontend Implementation","children":{}},"/playground/topics/frontend/retain-scroll-position-in-infinite-scroll":{"label":"Retain scroll position in infinite scroll","children":{}},"/playground/topics/frontend/continuous-translation":{"label":"Continuous Translation","children":{}},"/playground/topics/frontend/what-is-pnpm-compare-to-npmyarn":{"label":"What is PNPM Compare To NPM/Yarn","children":{}},"/playground/topics/frontend/accelerate-project-initiation-with-advanced-nextjs-boilerplate-react-toolkit":{"label":"Accelerate Project Initiation With Advanced Nextjs Boilerplate React Toolkit","children":{}},"/playground/topics/frontend/i18n-frontend-guideline":{"label":"I18n Frontend Guideline","children":{}},"/playground/topics/frontend/from-multi-repo-to-monorepo-a-case-study-with-nghenhan-turbo-monorepo":{"label":"From Multi Repo To Monorepo A Case Study With Nghenhan Turbo Monorepo","children":{}},"/playground/topics/frontend/why-micro-frontend":{"label":"Why Micro Frontend","children":{}},"/playground/topics/frontend/why-we-chose-our-tech-stack-accelerating-development-with-a-robust-frontend-solution":{"label":"Why We Chose Our Tech Stack Accelerating Development With A Robust Frontend Solution","children":{}},"/playground/topics/frontend/tackling-server-state-complexity-in-frontend-development":{"label":"Tackling Server State complexity in Frontend Development","children":{}},"/playground/topics/frontend/variable-fonts":{"label":"Variable Fonts","children":{}},"/playground/topics/frontend/when-should-we-use-usereducer-instead-of-usestate":{"label":"When should we use useReducer instead of useState?","children":{}},"/playground/topics/frontend/preserving-and-resetting-state-in-react":{"label":"Preserving and Resetting state in React","children":{}},"/playground/topics/frontend/mixpanel":{"label":"Mixpanel","children":{}},"/playground/topics/frontend/validation-with-zod":{"label":"Validation with Zod","children":{}},"/playground/topics/frontend/parse-dont-validate-in-typescript":{"label":"Parse, don't validate in TypeScript","children":{}},"/playground/topics/frontend/webassembly":{"label":"Webassembly","children":{}},"/playground/topics/frontend/singleton-design-pattern-in-javascript":{"label":"Singleton Design Pattern in Javascript","children":{}},"/playground/topics/frontend/an-introduction-to-atomic-css":{"label":"An Introduction to Atomic CSS","children":{}},"/playground/topics/frontend/intro-to-indexeddb":{"label":"Intro to IndexedDB","children":{}},"/playground/topics/frontend/the-fundamental-of-web-performance":{"label":"The fundamental of web performance","children":{}},"/playground/topics/frontend/wai-aria":{"label":"WAI-ARIA","children":{}},"/playground/topics/frontend/build-polymorphic-react-components-with-typescript":{"label":"Build polymorphic React components with Typescript","children":{}},"/playground/topics/frontend/threejs":{"label":"Threejs","children":{"/playground/topics/frontend/threejs/cameras-in-threejs":{"label":"Cameras in ThreeJS","children":{}}}},"/playground/topics/frontend/prevent-layout-thrashing":{"label":"Prevent Layout Thrashing","children":{}},"/playground/topics/frontend/pure-css-parallax":{"label":"Pure CSS Parallax","children":{}},"/playground/topics/frontend/css-container-queries":{"label":"CSS Container Queries","children":{}},"/playground/topics/frontend/hsl-color":{"label":"HSL Color","children":{}},"/playground/topics/frontend/mitigate-blocking-the-main-thread":{"label":"Mitigate blocking the main thread","children":{}},"/playground/topics/frontend/css-in-js":{"label":"CSS in JS","children":{}},"/playground/topics/frontend/dark-mode-flickers-a-white-background-for-a-fraction-of-a-second":{"label":"Dark mode flickers a white background for a fraction of a second","children":{}},"/playground/topics/frontend/why-dom-manipulation-is-slow":{"label":"Why DOM manipulation is slow?","children":{}},"/playground/topics/frontend/why-virtual-dom-is-fast":{"label":"Why Virtual DOM is fast?","children":{}},"/playground/topics/frontend/vitejs-native-modules":{"label":"ViteJS native modules","children":{}},"/playground/topics/frontend/javascript-modules":{"label":"JavaScript modules","children":{}},"/playground/topics/frontend/atomic-design-pattern":{"label":"Atomic Design Pattern","children":{}},"/playground/topics/frontend/focus-trap":{"label":"Focus trap","children":{}},"/playground/topics/frontend/html-inert":{"label":"HTML inert","children":{}},"/playground/topics/frontend/useeffect-double-calls-in-react-18":{"label":"useEffect double calls in React 18","children":{}},"/playground/topics/frontend/react-18":{"label":"React 18","children":{}},"/playground/topics/frontend/remix-versus-nextjs":{"label":"Remix Versus Nextjs","children":{}},"/playground/topics/frontend/zaplib-post-mortem":{"label":"Zaplib post-mortem","children":{}},"/playground/topics/frontend/parallelism-in-javascript":{"label":"Parallelism in JavaScript","children":{}},"/playground/topics/frontend/mpa-spa-and-partial-hydration":{"label":"MPA, SPA and Partial Hydration","children":{}},"/playground/topics/frontend/micro-frontends-microservices-for-frontend-development":{"label":"Micro Frontends Microservices For Frontend Development","children":{}},"/playground/topics/frontend/using-correct-html-element-to-increase-website-accessibility":{"label":"Using Correct Html Element To Increase Website Accessibility","children":{}},"/playground/topics/frontend/fundamental-end-to-end-frontend-testing-with-cypress":{"label":"Fundamental End To End Frontend Testing With Cypress","children":{}},"/playground/topics/frontend/different-ways-to-test-react-application":{"label":"Different Ways To Test React Application","children":{}},"/playground/topics/frontend/hoc-renderprops-and-hook-in-reactjs":{"label":"Hoc Renderprops And Hook In Reactjs","children":{}},"/playground/topics/frontend/remove-unused-css-styles-from-bootstrap-using-purgecss":{"label":"Remove Unused CSS Styles From Bootstrap Using Purgecss","children":{}},"/playground/topics/frontend/be-careful-with-your-code-splitting-setup":{"label":"Be Careful With Your Code Splitting Setup","children":{}}}},"/playground/topics/ai":{"label":"AI","children":{"/playground/topics/ai/securing-your-remote-mcp-servers":{"label":"Securing your remote MCP servers","children":{}},"/playground/topics/ai/tool-level-security-for-remote-mcp-servers":{"label":"Tool-Level Security for Remote MCP Servers","children":{}},"/playground/topics/ai/model-context-protocol":{"label":"Intro to Model Context Protocol","children":{}},"/playground/topics/ai/digest":{"label":"Digest","children":{"/playground/topics/ai/digest/ai-digest-02":{"label":"AI digest #2 New command Aider, OpenHands, Qwen2.5 Coder 32B, Predicted Output","children":{}},"/playground/topics/ai/digest/ai-digest-01":{"label":"AI digest #1 Aider reasoning, OpenAI Realtime API, Cline - pre Claude-dev ","children":{}}}},"/playground/topics/ai/copilots":{"label":"Copilots","children":{"/playground/topics/ai/copilots/projects-operations":{"label":"Project Operations Copilots","children":{}},"/playground/topics/ai/copilots/team-copilots":{"label":"Team Copilots","children":{}}}},"/playground/topics/ai/text-to-mongodb":{"label":"Natural Language to Database Queries: Text-to-MongoDB","children":{}},"/playground/topics/ai/use-cases":{"label":"Use Cases","children":{"/playground/topics/ai/use-cases/salesforce":{"label":"Salesforce use cases","children":{}},"/playground/topics/ai/use-cases/yelp":{"label":"Yelp use cases","children":{}}}},"/playground/topics/ai/building-llm-system":{"label":"Building LLM System","children":{"/playground/topics/ai/building-llm-system/trace-pillar":{"label":"Tracing","children":{}},"/playground/topics/ai/building-llm-system/use-cases-for-llm-applications":{"label":"Use cases for LLM applications","children":{}},"/playground/topics/ai/building-llm-system/quantization-in-llm":{"label":"Quantization for large language models","children":{}},"/playground/topics/ai/building-llm-system/graphrag":{"label":"GraphRAG - Building a knowledge graph for RAG system","children":{}},"/playground/topics/ai/building-llm-system/guardrails-in-llm":{"label":"Guardrails in LLM","children":{}},"/playground/topics/ai/building-llm-system/react-in-llm":{"label":"ReAct(Reason + Act) in LLM","children":{}},"/playground/topics/ai/building-llm-system/rewoo-in-llm":{"label":"ReWOO: Reasoning without observation - A deeper look","children":{}},"/playground/topics/ai/building-llm-system/model-selection":{"label":"Model selection","children":{}},"/playground/topics/ai/building-llm-system/logs-pillar":{"label":"Logging","children":{}},"/playground/topics/ai/building-llm-system/metric-pillar":{"label":"Metrics","children":{}},"/playground/topics/ai/building-llm-system/observability-in-ai-platforms":{"label":"Observability in AI platforms","children":{}},"/playground/topics/ai/building-llm-system/intent-classification-by-llm":{"label":"Intent classification by LLM","children":{}},"/playground/topics/ai/building-llm-system/llm-as-a-judge":{"label":"LLM as a judge","children":{}},"/playground/topics/ai/building-llm-system/the-rise-of-ai-applications-with-llm":{"label":"The rise of AI applications with LLM","children":{}},"/playground/topics/ai/building-llm-system/evaluation-guideline-for-llm-application":{"label":"Evaluation guidelines for LLM applications","children":{}},"/playground/topics/ai/building-llm-system/prevent-prompt-injection":{"label":"Prevent prompt injection","children":{}},"/playground/topics/ai/building-llm-system/building-llm-system":{"label":"§ Building LLM system","children":{}},"/playground/topics/ai/building-llm-system/multi-agent-collaboration-for-task-completion":{"label":"Multi-agent collaboration for task completion","children":{}},"/playground/topics/ai/building-llm-system/multimodal-in-rag":{"label":"Multimodal in RAG","children":{}}}},"/playground/topics/ai/evaluate-chatbot-agent-by-simulated-user":{"label":"Evaluate Chatbot Agent by User Simulation","children":{}},"/playground/topics/ai/journey-of-thought-prompting":{"label":"Journey of Thought Prompting: Harnessing AI to Craft Better Prompts","children":{}},"/playground/topics/ai/llm-tracing-in-ai-system":{"label":"LLM tracing in AI system","children":{}},"/playground/topics/ai/caching-with-rag-system":{"label":"Evaluating caching in RAG systems","children":{}},"/playground/topics/ai/generative-ui":{"label":"What is Generative UI?","children":{}},"/playground/topics/ai/hybrid-search":{"label":"Evaluating search engine in RAG systems","children":{}},"/playground/topics/ai/re-ranking-in-rag":{"label":"Re-ranking in RAG","children":{}},"/playground/topics/ai/function-calling":{"label":"Function calling in AI agents","children":{}},"/playground/topics/ai/thumbs-up-and-thumbs-down-pattern":{"label":"Thumbs up and Thumbs down pattern","children":{}},"/playground/topics/ai/supervisor-ai-agents":{"label":"Building Agent Supervisors to Generate Insights","children":{}},"/playground/topics/ai/how-we-crafted-the-ogif-summarizer-bot-to-streamline-weekly-knowledge-sharing":{"label":"How we crafted the OGIF summarizer bot to streamline weekly knowledge-sharing","children":{}},"/playground/topics/ai/raptor-llm-retrieval":{"label":"RAPTOR: Tree-based Retrieval for Language Models","children":{}},"/playground/topics/ai/proximal-policy-optimization":{"label":"Proximal Policy Optimization","children":{}},"/playground/topics/ai/explaining-gradient-descent-in-machine-learning-with-a-simple-analogy":{"label":"Explaining Gradient Descent in Machine Learning with a simple analogy","children":{}},"/playground/topics/ai/developing-rapidly-with-generative-ai":{"label":"Developing rapidly with Generative AI","children":{}},"/playground/topics/ai/rlhf-with-open-assistant":{"label":"RLHF with Open Assistant","children":{}},"/playground/topics/ai/story-map-for-llms":{"label":"Story map for LLMs","children":{}},"/playground/topics/ai/chunking-strategies-to-overcome-context-limitation-in-llm":{"label":"Chunking strategies to overcome context limitation in LLM","children":{}},"/playground/topics/ai/llm-s-accuracy-self-refinement":{"label":"LLM's Accuracy - Self Refinement","children":{}},"/playground/topics/ai/llm-query-caching":{"label":"Query Caching for Large Language Models","children":{}},"/playground/topics/ai/reinforcement-learning":{"label":"Introduction to Reinforcement Learning and Its Application with LLMs","children":{}},"/playground/topics/ai/how-we-created-an-ai-powered-interview-system-using-openais-chatgpt":{"label":"How We Created An AI Powered Interview System Using Openais Chatgpt","children":{}},"/playground/topics/ai/foundation-model":{"label":"Foundation Models: The Latest Advancement in AI","children":{}},"/playground/topics/ai/select-vector-database-for-llm":{"label":"Select Vector Database for LLM","children":{}},"/playground/topics/ai/exploring-machine-learning-approaches-for-fine-tuning-llama-models":{"label":"Exploring Machine Learning Approaches For Fine Tuning Llama Models","children":{}},"/playground/topics/ai/workaround-with-openai-s-token-limit-with-langchain":{"label":"Workaround with OpenAI's token limit with Langchain","children":{}},"/playground/topics/ai/working-with-langchain-document-loaders":{"label":"Working with langchain document loaders","children":{}},"/playground/topics/ai/building-llm-powered-tools-with-dify":{"label":"Streamlining Internal Tool Development with Managed LLMOps: A Dify Case Study","children":{}},"/playground/topics/ai/a-grand-unified-theory-of-the-ai-hype-cycle":{"label":"A Grand Unified Theory of the AI Hype Cycle","children":{}},"/playground/topics/ai/adversarial-prompting":{"label":"Adversarial Prompting in Prompt Engineering","children":{}},"/playground/topics/ai/build-your-chatbot-with-open-source-large-language-models":{"label":"Build your chatbot with open source Large Language Models","children":{}}}},"/playground/topics/golang":{"label":"Golang","children":{"/playground/topics/golang/weekly":{"label":"Weekly","children":{"/playground/topics/golang/weekly/dec-13":{"label":"#24 Go 1.24 testing/synctest experiment for time and concurrency testing","children":{}},"/playground/topics/golang/weekly/dec-06":{"label":"#23 Draft Release Notes for Go 1.24 and weak pointers in Go","children":{}},"/playground/topics/golang/weekly/nov-29":{"label":"#22 GoMLX: ML in Go without Python","children":{}},"/playground/topics/golang/weekly/nov-22":{"label":"#21 Go sync.Once is Simple","children":{}},"/playground/topics/golang/weekly/nov-15":{"label":"#20 Go Turns 15","children":{}},"/playground/topics/golang/weekly/nov-08":{"label":"#19 Writing secure Go code","children":{}},"/playground/topics/golang/weekly/nov-01":{"label":"#18 Fuzz Testing Go HTTP Services","children":{}},"/playground/topics/golang/weekly/oct-25":{"label":"#17 Leveraging benchstat Projects in Go benchmark and Go Plan9 memo on 450% speeding up calculations","children":{}},"/playground/topics/golang/weekly/oct-18":{"label":"#16 Understand sync.Map","children":{}},"/playground/topics/golang/weekly/oct-11":{"label":"#15 Go embed and Reflect","children":{}},"/playground/topics/golang/weekly/oct-04":{"label":"#14 Compile-time eval & SQLite with wazero","children":{}},"/playground/topics/golang/weekly/sep-27":{"label":"#13 Compiler Quests and Vector Vexations","children":{}},"/playground/topics/golang/weekly/sep-20":{"label":"#12 CLI Tools for K8s, REST, and Terminals","children":{}},"/playground/topics/golang/weekly/sep-13":{"label":"#11 Actors, Frameworks, and the Future of Go","children":{}},"/playground/topics/golang/weekly/sep-06":{"label":"#10 Script, Telemetry","children":{}},"/playground/topics/golang/weekly/aug-30":{"label":"#9 TinyGo, SQLite vector search, and Permify","children":{}},"/playground/topics/golang/weekly/aug-23":{"label":"#8 GoNB, kubetrim, and GopherCon UK 2024","children":{}},"/playground/topics/golang/weekly/aug-16":{"label":"#7 Go 1.23, Websockets, and Structs","children":{}},"/playground/topics/golang/weekly/aug-09":{"label":"#6 Cogent Core, Russ Cox stepping down","children":{}},"/playground/topics/golang/weekly/aug-02":{"label":"#5 Go 1.23 features, Memory, Minecraft, and More","children":{}},"/playground/topics/golang/weekly/jul-26":{"label":"#4 Ethical Hacking, HTTP Requests, Mac App Development","children":{}},"/playground/topics/golang/weekly/jul-12":{"label":"#3 Generic Collections, Generics Constraints, AI Bot","children":{}},"/playground/topics/golang/weekly/jul-05":{"label":"#2 Go 1.23 Iterators","children":{}},"/playground/topics/golang/weekly/june-27":{"label":"#1 eBPF and PGO Optimization Techniques","children":{}}}},"/playground/topics/golang/extension-interface-pattern":{"label":"Go extension interface pattern","children":{}},"/playground/topics/golang/go-import":{"label":"Go import design: using git repo path","children":{}},"/playground/topics/golang/go-package":{"label":"Package first design","children":{}},"/playground/topics/golang/go-generics-type-safety":{"label":"How does Go achieve type safety when it enables generics?","children":{}},"/playground/topics/golang/go-for-enterprise":{"label":"Go For Enterprise","children":{"/playground/topics/golang/go-for-enterprise/who-using-golang-in-enterprise":{"label":"Who is using Go in enterprise?","children":{}},"/playground/topics/golang/go-for-enterprise/enterprise-standard-language":{"label":"Go as an Enterprise Standard Language","children":{}},"/playground/topics/golang/go-for-enterprise/how-to-use-go-in-enterprise":{"label":"How to use Go in the Enterprise","children":{}},"/playground/topics/golang/go-for-enterprise/when-to-use-golang-in-enterprise":{"label":"When to use Go in the Enterprise","children":{}},"/playground/topics/golang/go-for-enterprise/why-enterprise-chose-java":{"label":"Why Enterprise Chose Java","children":{}},"/playground/topics/golang/go-for-enterprise/why-go":{"label":"Why Go?","children":{}}}},"/playground/topics/golang/compute-union-2-finite-automata":{"label":"Efficient Union of Finite Automata in Golang: A Practical Approach","children":{}},"/playground/topics/golang/approaches-to-manage-concurrent-workloads-like-worker-pools-and-pipelines":{"label":"Approaches To Manage Concurrent Workloads Like Worker Pools And Pipelines","children":{}},"/playground/topics/golang/message-queues-and-streaming-platforms-eg-kafka-nats-rabbitmq":{"label":"Message Queues And Streaming Platforms Eg Kafka Nats Rabbitmq","children":{}},"/playground/topics/golang/unit-testing-best-practices-in-golang":{"label":"Unit Testing Best Practices In Golang","children":{}},"/playground/topics/golang/profiling-in-go":{"label":"Profiling in Go","children":{}},"/playground/topics/golang/go-in-software-engineering":{"label":"Go In Software Engineering","children":{}},"/playground/topics/golang/bunk-license-check":{"label":"Bunk license check","children":{}},"/playground/topics/golang/go-concurrency":{"label":"Go Concurrency","children":{}},"/playground/topics/golang/slice-and-array-in-golang":{"label":"Slice And Array In Golang","children":{}},"/playground/topics/golang/use-go-selenium-to-crawl-data":{"label":"Use Go Selenium To Crawl Data","children":{}},"/playground/topics/golang/connecting-vim-with-golang":{"label":"Connecting Vim With Golang","children":{}}}},"/playground/topics/data":{"label":"Data","children":{"/playground/topics/data/a-lens-to-modern-data-engineering":{"label":"A Lens to Modern Data Engineering","children":{}},"/playground/topics/data/creating-a-fully-local-search-engine-on-memo":{"label":"Building a Local Search Engine for Our Memo Website","children":{}},"/playground/topics/data/managing-dataflow-and-sql-database-with-concurrency-control":{"label":"Managing Dataflow And Sql Database With Concurrency Control","children":{}},"/playground/topics/data/data-analyst-in-retail-trading":{"label":"Data Analyst In Retail Trading","children":{}}}},"/playground/topics/devbox":{"label":"Devbox","children":{"/playground/topics/devbox/devbox":{"label":"§ Devbox","children":{}},"/playground/topics/devbox/story":{"label":"Story","children":{"/playground/topics/devbox/story/devbox-production-success-story":{"label":"Devbox in Production: Our Success Story","children":{}},"/playground/topics/devbox/story/devbox-local-development-env":{"label":"Using Devbox to setup local development environment","children":{}},"/playground/topics/devbox/story/devbox-nix-and-our-devbox-adoption":{"label":"The overview into Nix & how we use Devbox @ Dwarves","children":{}},"/playground/topics/devbox/story/devbox-docker-adoption-and-challenges":{"label":"Our Docker adoption and its challenges","children":{}},"/playground/topics/devbox/story/devbox-a-world-before-docker":{"label":"The world before Docker","children":{}}}},"/playground/topics/devbox/guide":{"label":"Guide","children":{"/playground/topics/devbox/guide/containerless":{"label":"Ditch the Containers: Go Containerless with Devbox","children":{}},"/playground/topics/devbox/guide/devboxjson":{"label":"Devbox.json: Your Project's DNA","children":{}},"/playground/topics/devbox/guide/run-your-own-shell":{"label":"Devbox Shell: Your Dev Environment, Your Rules","children":{}}}},"/playground/topics/devbox/introduction":{"label":"Introduction","children":{"/playground/topics/devbox/introduction/the-reason-for-being":{"label":"The reason for being","children":{}},"/playground/topics/devbox/introduction/why-devbox-but-not-nix":{"label":"Devbox vs Nix: Why We Chose Simplicity","children":{}}}},"/playground/topics/devbox/research":{"label":"Research","children":{"/playground/topics/devbox/research/content-addressable-storage-in-docker":{"label":"Devbox vs Nix: Why We Chose Simplicity","children":{}},"/playground/topics/devbox/research/fixed-output-derivation":{"label":"Fixed-output Derivation in Nix","children":{}},"/playground/topics/devbox/research/nix-is-faster-than-docker-build":{"label":"Nix is Faster Than Docker Build","children":{}},"/playground/topics/devbox/research/pinning-nixpkgs":{"label":"Pinning nixpkgs in Nix","children":{}},"/playground/topics/devbox/research/shadow-copies":{"label":"Shadow Copies in Docker Builds","children":{}},"/playground/topics/devbox/research/unstable-package-installation":{"label":"Unstable Package Installation in Docker","children":{}}}}}},"/playground/topics/llm":{"label":"LLM","children":{"/playground/topics/llm/feedback-mechanism":{"label":"Design feedback mechanism for LLM applications","children":{}},"/playground/topics/llm/how-to-talk-to-chatgpt-effectively":{"label":"How to talk to ChatGPT effectively","children":{}},"/playground/topics/llm/history-of-structured-output-for-llms":{"label":"History of Structured Outputs for LLMs","children":{}},"/playground/topics/llm/easy-prompt-engineering-for-business-use-and-mitigating-risks-in-llms":{"label":"Easy Prompt Engineering For Business Use And Mitigating Risks In Llms","children":{}}}},"/playground/topics/engineering":{"label":"Engineering","children":{"/playground/topics/engineering/our-view-on-fullstack-engineering":{"label":"Our View On Fullstack Engineering","children":{}},"/playground/topics/engineering/are-we-really-engineers":{"label":"Are We Really Engineers","children":{}},"/playground/topics/engineering/reusability-in-software-development":{"label":"Reusability In Software Development","children":{}},"/playground/topics/engineering/introduction-to-software-craftsmanship":{"label":"Introduction To Software Craftsmanship","children":{}},"/playground/topics/engineering/architecture-decision-record":{"label":"Architecture Decision Record","children":{}},"/playground/topics/engineering/well-crafted-software":{"label":"Well Crafted Software","children":{}},"/playground/topics/engineering/skill-of-software-engineer":{"label":"Skill Of Software Engineer","children":{}},"/playground/topics/engineering/the-10x-engineer":{"label":"The 10x Engineer","children":{}}}},"/playground/topics/softskills":{"label":"Softskills","children":{"/playground/topics/softskills/asking-as-a-junior":{"label":"Asking As A Junior","children":{}}}},"/playground/topics/product":{"label":"Product","children":{"/playground/topics/product/aarrr-framework-in-a-nutshell":{"label":"AARRR Framework In A Nutshell","children":{}}}},"/playground/topics/pm":{"label":"Pm","children":{"/playground/topics/pm/an-alternative-to-tm":{"label":"An Alternative To Tm","children":{}},"/playground/topics/pm/project-management":{"label":"Project Management","children":{}},"/playground/topics/pm/our-daily-standup-format":{"label":"Our Daily Standup Format","children":{}},"/playground/topics/pm/definition-of-done":{"label":"Definition Of Done","children":{}},"/playground/topics/pm/estimation-in-agile":{"label":"Estimation In Agile","children":{}}}},"/playground/topics/security":{"label":"Security","children":{"/playground/topics/security/applied-security-basis":{"label":"Applied Security Basis","children":{}}}}}},"/playground/notes":{"label":"Notes","children":{"/playground/notes/evolutionary-database-design":{"label":"Evolutionary Database Design: Managing Change and Scaling with the System","children":{}},"/playground/notes/giving-a-talk-checklist":{"label":"Giving a talk","children":{}},"/playground/notes/database-design-circular":{"label":"Database design Circular","children":{}},"/playground/notes/automata":{"label":"Automata","children":{}},"/playground/notes/error-handling-patterns":{"label":"Error handling patterns","children":{}},"/playground/notes/founder-liquidity":{"label":"Founder Liquidity","children":{}},"/playground/notes/why-hollywood-and-gaming-struggle-with-ai":{"label":"Why Hollywood and gaming struggle with AI","children":{}},"/playground/notes/security":{"label":"Security","children":{"/playground/notes/security/a-holistic-guide-to-security":{"label":"A Holistic Guide to Security","children":{}},"/playground/notes/security/how-i-came-up-with-our-security-standard":{"label":"How I came up with our Security Standard","children":{}}}},"/playground/notes/record-reward-sharing-culture":{"label":"Record and reward sharing at Dwarves","children":{}},"/playground/notes/designing-for-forgiveness":{"label":"Designing for Forgiveness: Creating Error-Tolerant Interfaces","children":{}},"/playground/notes/design-file-sharing-system-part-2-permission-and-password":{"label":"Design file-sharing system - Part 2: Permission & Password","children":{}},"/playground/notes/designing-a-model-with-dynamic-properties":{"label":"Designing a model with dynamic properties","children":{}},"/playground/notes/design-file-sharing-system-part-1-directory-structure":{"label":"Design file-sharing system - Part 1: Directory Structure","children":{}},"/playground/notes/subscription-pricing-models":{"label":"Subscription Pricing Models","children":{}},"/playground/notes/using-foundry-for-evm-smart-contract-developement":{"label":"Using Foundry for EVM smart contract development","children":{}},"/playground/notes/erlang-fsm":{"label":"Erlang Finite State Machine","children":{}},"/playground/notes/observer-pattern":{"label":"Introduce the Observer pattern and its use cases","children":{}},"/playground/notes/visitor-design-pattern":{"label":"Visitor design pattern, the concept, problem solution and use cases","children":{}},"/playground/notes/strategy-design-pattern":{"label":"Strategy design pattern, the concept, use cases and difference with the state design pattern","children":{}},"/playground/notes/vietnam-tech-ecosystem-report":{"label":"Vietnam Tech Ecosystem 2024 Report","children":{}},"/playground/notes/local-first-software":{"label":"Local-first Software","children":{}},"/playground/notes/error-handling-in-rust":{"label":"Error handling on Rust","children":{}},"/playground/notes/rust-trait":{"label":"Rust Trait","children":{}},"/playground/notes/engineering":{"label":"Engineering","children":{"/playground/notes/engineering/backend":{"label":"Backend","children":{"/playground/notes/engineering/backend/bloom-filter":{"label":"Bloom Filter","children":{}},"/playground/notes/engineering/backend/introduction-to-crdt":{"label":"Introduction to CRDT","children":{}},"/playground/notes/engineering/backend/sql-sargable-queries-and-their-impact-on-database-performance":{"label":"SQL Saragable Queries and Their Impact on Database Performance","children":{}},"/playground/notes/engineering/backend/the-removal-of-apache-kafkas-dependency-on-zookeeper":{"label":"The removal of Apache Kafka's dependency on Zookeeper","children":{}},"/playground/notes/engineering/backend/sql-and-how-it-relates-to-disk-reads-and-writes":{"label":"SQL and how it relates to Disk Reads and Writes","children":{}}}},"/playground/notes/engineering/data":{"label":"Data","children":{"/playground/notes/engineering/data/data-pipeline-design-framework":{"label":"Data Pipeline Design Framework","children":{}},"/playground/notes/engineering/data/quick-learning-vector-database":{"label":"Quick Learning Vector Database","children":{}},"/playground/notes/engineering/data/mapreduce":{"label":"MapReduce","children":{}}}},"/playground/notes/engineering/google-data-fusion":{"label":"Google Data Fusion","children":{}},"/playground/notes/engineering/google-dataproc":{"label":"Google Dataproc","children":{}},"/playground/notes/engineering/introducing-htmx-navigating-the-advantages-and-concerns":{"label":"Introducing HTMX - Navigating the Advantages and Concerns","children":{}},"/playground/notes/engineering/typesafe-client-server":{"label":"Typesafe Client Server","children":{}},"/playground/notes/engineering/golang-for-high-performance-video-streaming":{"label":"Leveraging Golang and WebRTC for High-Performance Video Streaming","children":{}},"/playground/notes/engineering/url-redirect-vs-rewrite":{"label":"URL Redirect vs. Rewrite; What’s the difference?","children":{}},"/playground/notes/engineering/devops":{"label":"Devops","children":{"/playground/notes/engineering/devops/deploy-branch-with-vercel-cli":{"label":"deploy-branch-with-vercel-cli","children":{}},"/playground/notes/engineering/devops/testing-aws-services-locally-with-localstack":{"label":"testing-aws-services-locally-with-localstack","children":{}},"/playground/notes/engineering/devops/kubeseal-sops":{"label":"kubeseal-sops","children":{}},"/playground/notes/engineering/devops/feature-flags":{"label":"feature-flags","children":{}},"/playground/notes/engineering/devops/progressive-delivery":{"label":"progressive-delivery","children":{}},"/playground/notes/engineering/devops/blue-green-deployment":{"label":"blue-green-deployment","children":{}}}}}},"/playground/notes/template-method-design-pattern":{"label":"A Tour of Template method pattern with Golang","children":{}},"/playground/notes/command-pattern":{"label":"Command Pattern","children":{}},"/playground/notes/radix-sort":{"label":"Radix Sort","children":{}},"/playground/notes/state-pattern":{"label":"State Pattern","children":{}},"/playground/notes/organize-team-know-how-with-zettelkasten-method":{"label":"Organize team know-how with Zettelkasten Method","children":{}},"/playground/notes/dynamic-liquidity-market-a-new-form-of-concentrated-liquidity-amm-on-solana":{"label":"Dynamic Liquidity Market Maker - a new form of concentrated liquidity AMM on Solana","children":{}},"/playground/notes/memo-knowledge-base-meeting":{"label":"Memo Knowledge Base Meeting","children":{}},"/playground/notes/peep-nft":{"label":"Claim your Peeps NFT","children":{}},"/playground/notes/recording-flow":{"label":"How We Set Up a Recording Workflow for Dwarves Office Hours","children":{}},"/playground/notes/memo-publication-workflow":{"label":"Memo Publication Workflow","children":{}},"/playground/notes/builder-design-pattern":{"label":"Introduce the Builder pattern and its use cases","children":{}},"/playground/notes/how-to-make-a-moc":{"label":"How to make a MOC","children":{}},"/playground/notes/prototype-design-pattern":{"label":"Going Through use cases of the prototype design pattern and it place among the creational patterns","children":{}},"/playground/notes/singleton-design-pattern":{"label":"A tour of Singleton design pattern with Golang","children":{}},"/playground/notes/echelon-x-singapore-2024-where-innovations-meet-inspiration":{"label":"Echelon X Singapore 2024: Where Innovations Meet Inspiration","children":{}},"/playground/notes/c4-modelling":{"label":"Breaking Down Complexity: The Role of Abstractions and UML in C4 Modelling","children":{}},"/playground/notes/dollar-cost-averaging":{"label":"Dollar Cost Averaging (DCA)","children":{}},"/playground/notes/how-i-create-content-for-multiple-platforms-at-dwarves":{"label":"How I Create Content for Multiple Platforms at Dwarves","children":{}},"/playground/notes/understanding-saving-investing-and-speculating-key-differences-and-strategies":{"label":"Understanding Saving, Investing, and Speculating: Key Differences and Strategies","children":{}},"/playground/notes/writing-content-for-multimedia-guidelines":{"label":"Writing Content for Multimedia Guidelines","children":{}},"/playground/notes/how-to-earn-reward-from-staking-dfg":{"label":"How to earn reward from staking DFG","children":{}},"/playground/notes/how-to-transfer-dfg-from-eth-to-base-for-staking":{"label":"How to bridge $DFG from Ethereum Mainnet to Base Network for staking","children":{}},"/playground/notes/design-less-present-more-with-deckset":{"label":"Design less, present more with Deckset","children":{}},"/playground/notes/level-up-your-markdown-memos":{"label":"Level Up Your Markdown Memos: Avoiding Common Pitfalls","children":{}},"/playground/notes/how-to-recap-a-publication":{"label":"Recapping A publication","children":{}},"/playground/notes/lifecycle-of-a-publication":{"label":"Life cycle of a publication","children":{}},"/playground/notes/how-to-set-up-environment-for-editing-memo":{"label":"How to set up environment to edit memo","children":{}},"/playground/notes/_how-to-setup-crypto-wallet-to-withdraw-icy":{"label":"How to set up crypto wallet to withdraw ICY","children":{}},"/playground/notes/_how-to-withdraw-icy":{"label":"How to withdraw ICY","children":{}},"/playground/notes/how-to-take-better-screenshots-on-mac":{"label":"How To Take Better Screenshots On Mac","children":{}},"/playground/notes/how-to-push-content-on-note-d":{"label":"How to push content on memo.d.foundation","children":{}},"/playground/notes/labs-weekly-catchup-5":{"label":"Labs Weekly Catchup #5","children":{}},"/playground/notes/labs-weekly-catchup-4":{"label":"Labs Weekly Catchup #4","children":{}},"/playground/notes/labs-weekly-catchup-3":{"label":"Labs Weekly Catchup #3","children":{}},"/playground/notes/labs-weekly-catchup-2":{"label":"Labs Weekly Catchup #2","children":{}},"/playground/notes/labs-weekly-catchup-1":{"label":"Labs Weekly Catchup #1","children":{}},"/playground/notes/duckdb-demo-and-showcase":{"label":"DuckDB demo and showcase","children":{}},"/playground/notes/icy-in-2024":{"label":"$icy in 2024","children":{}},"/playground/notes/salary-advance":{"label":"$icy Salary Advance","children":{}},"/playground/notes/icy-dfg":{"label":"💠 df protocol, $icy and $dfg","children":{}},"/playground/notes/how-rd-contributes-to-performance-review":{"label":"How R&D contributes to Performance Review","children":{}},"/playground/notes/knowledge-journey":{"label":"Knowledge Journey","children":{}},"/playground/notes/labs-roadmap-nov-23-update":{"label":"Labs Roadmap (Nov 23 update)","children":{}},"/playground/notes/reward-model-nomination":{"label":"Reward Model & Nomination","children":{}},"/playground/notes/working-on-a-project-interview-assessment-at-dwarves":{"label":"Working On A Project Interview Assessment At Dwarves","children":{}},"/playground/notes/design-system-for-layer-2-using-zk-rollup":{"label":"Design System For Layer 2 Using Zk Rollup","children":{}},"/playground/notes/cost-of-react-native":{"label":"Cost Of React Native","children":{}},"/playground/notes/lessons-learned-from-concurrency-practices-in-blockchain-projects":{"label":"Lessons Learned From Concurrency Practices In Blockchain Projects","children":{}},"/playground/notes/database-designs-for-multilingual-apps":{"label":"Database Designs For Multilingual Apps","children":{}},"/playground/notes/how-blue-green-deployment-helped-mochi":{"label":"How Blue Green Deployment Helped Mochi","children":{}},"/playground/notes/radio-talk-61-monorepo":{"label":"Radio Talk 61 Monorepo","children":{}},"/playground/notes/radio-talk-60-blue-green-deployment":{"label":"Radio Talk 60 Blue Green Deployment","children":{}},"/playground/notes/202302281019-case-study-write-heavy-scalable-and-reliable-inventory-platform":{"label":"Case study: Write-heavy scalable and reliable inventory platform","children":{}},"/playground/notes/growth-is-our-universal-language":{"label":"Growth Is Our Universal Language","children":{}},"/playground/notes/202301191192-multi-column-index-in-db":{"label":"Multi-column index in DB","children":{}},"/playground/notes/202301091379-invoking-component-functions-in-react":{"label":"Invoking component functions in React","children":{}},"/playground/notes/the-key-of-security-mechanisms-in-tackling-cyber-threats":{"label":"The Key Of Security Mechanisms In Tackling Cyber Threats","children":{}},"/playground/notes/202212131609-how-to-deal-with-technical-debt-in-scrum":{"label":"How to deal with technical debt in Scrum","children":{}},"/playground/notes/responsibility":{"label":"Responsibility","children":{}},"/playground/notes/configure-the-company-email":{"label":"Configure The Company Email","children":{}},"/playground/notes/tech-event-in-the-latest-transforming-healthcare-with-technology":{"label":"Tech Event In The Latest Transforming Healthcare With Technology","children":{}},"/playground/notes/202211141287-go-json-parsing":{"label":"Go JSON parser: number <-> interface","children":{}},"/playground/notes/202211141513-materialized-view-pattern":{"label":"Materialized View Pattern","children":{}},"/playground/notes/202211081111-error-messaging":{"label":"Error Messaging","children":{}},"/playground/notes/202210172128-sign-in-form-best-practices":{"label":"Sign-in Form Best Practices","children":{}},"/playground/notes/202210162154-the-best-of-css-tldr":{"label":"The Best of CSS TLDR","children":{}},"/playground/notes/202210150019-migration-planning":{"label":"Migration Planning","children":{}},"/playground/notes/202210131000-behavior-driven-development":{"label":"Behavior Driven Development","children":{}},"/playground/notes/202210131516-react-fiber":{"label":"React Fiber","children":{}},"/playground/notes/202210122014-forward-proxy":{"label":"Forward Proxy","children":{}},"/playground/notes/passing-the-probation-get-3-upvotes":{"label":"Passing The Probation Get 3 Upvotes","children":{}},"/playground/notes/writing":{"label":"Writing","children":{"/playground/notes/writing/state-explain-link":{"label":"State, Explain, Link - An all-purpose writing technique","children":{}}}},"/playground/notes/dwarves-radio-talk-17-conduct-a-1-1-session":{"label":"Dwarves Radio Talk 17 Conduct A 1 1 Session","children":{}},"/playground/notes/dwarves-radio-talk-16-run-an-effective-performance-review":{"label":"Dwarves Radio Talk 16 Run An Effective Performance Review","children":{}},"/playground/notes/understanding-an-application-design":{"label":"Understanding An Application Design","children":{}},"/playground/notes/sql-practices-orm-vs-plain-sql":{"label":"Sql Practices Orm Vs Plain Sql","children":{}},"/playground/notes/what-i-learned-on-design-thinking-and-software-development":{"label":"What I Learned On Design Thinking And Software Development","children":{}},"/playground/notes/six-things-i-extracted-from-design-thinking":{"label":"Six Things I Extracted From Design Thinking","children":{}},"/playground/notes/gitflow-pull-request":{"label":"Gitflow Pull Request","children":{}},"/playground/notes/git-commit-message-convention":{"label":"Git Commit Message Convention","children":{}},"/playground/notes/how-we-setup-cicd":{"label":"How We Setup Cicd","children":{}},"/playground/notes/getting-started-with-webflow":{"label":"Getting Started With Webflow","children":{}},"/playground/notes/ui-design-best-practices-dwarves":{"label":"UI Design Best Practices Dwarves","children":{}},"/playground/notes/xpc-services-on-macos-app-using-swift":{"label":"Xpc Services On Macos App Using Swift","children":{}},"/playground/notes/the-correct-way-to-build-kpi":{"label":"The Correct Way To Build Kpi","children":{}},"/playground/notes/domain-insight-research-framework":{"label":"Domain Insight Research Framework","children":{}},"/playground/notes/infinite-image-gallery-with-r3f-an-approach":{"label":"Infinite Image Gallery With R3f An Approach","children":{}},"/playground/notes/market":{"label":"Market","children":{"/playground/notes/market/an-overview-of-micro-investment-in-real-estate":{"label":"An Overview Of Micro Investment In Real Estate","children":{}}}},"/playground/notes/grid-and-layout":{"label":"Grid And Layout","children":{}},"/playground/notes/startups-vs-junior-designers":{"label":"Startups Vs Junior Designers","children":{}},"/playground/notes/gestalt-principles-in-ui-design":{"label":"Gestalt Principles In UI Design","children":{}},"/playground/notes/a-quick-intro-to-webassembly":{"label":"A Quick Intro To Webassembly","children":{}},"/playground/notes/sdk-event-sourcing":{"label":"Sdk Event Sourcing","children":{}},"/playground/notes/software-development-life-cycle-101":{"label":"Software Development Life Cycle 101","children":{}},"/playground/notes/introduce-to-dwarves-memo":{"label":"Introduce To Dwarves Memo","children":{}},"/playground/notes/daemons-and-services-programming-guide":{"label":"Daemons And Services Programming Guide","children":{}},"/playground/notes/remote-moderated-usability-testing":{"label":"Remote Moderated Usability Testing","children":{}},"/playground/notes/how-a-design-system-work":{"label":"How A Design System Work","children":{}},"/playground/notes/software-modeling":{"label":"Software Modeling","children":{}},"/playground/notes/blockchain-for-designers":{"label":"Blockchain For Designers","children":{}},"/playground/notes/design-better-mobile-application":{"label":"Design Better Mobile Application","children":{}},"/playground/notes/domain-glossary":{"label":"Domain Glossary","children":{}},"/playground/notes/build-an-assistant-on-the-terminal":{"label":"Build An Assistant On The Terminal","children":{}},"/playground/notes/create-circular-text-using-swiftui":{"label":"Create Circular Text Using Swiftui","children":{}},"/playground/notes/draw-watch-face-using-swiftui":{"label":"Draw Watch Face Using Swiftui","children":{}},"/playground/notes/swiftui":{"label":"Swiftui","children":{}},"/playground/notes/bunk-license-check":{"label":"Bunk License Check","children":{}},"/playground/notes/objective":{"label":"Objective","children":{}},"/playground/notes/kubernetes-helm-101":{"label":"Kubernetes Helm 101","children":{}},"/playground/notes/what-is-kubernetes":{"label":"What Is Kubernetes","children":{}},"/playground/notes/traits-to-assess-during-an-interview":{"label":"Traits To Assess During An Interview","children":{}},"/playground/notes/recursively-export-file-pattern-in-javascript-es6-application":{"label":"Recursively Export File Pattern In Javascript Es6 Application","children":{}},"/playground/notes/playaround-with-clojure":{"label":"Playaround With Clojure","children":{}},"/playground/notes/playaround-with-rust":{"label":"Playaround With Rust","children":{}},"/playground/notes/overview-on-broker-pattern-in-distributed-system":{"label":"Overview On Broker Pattern In Distributed System","children":{}},"/playground/notes/uidynamicanimator":{"label":"Uidynamicanimator","children":{}},"/playground/notes/reproduce-apple-find-me-bottom-menu-view":{"label":"Reproduce Apple Find Me Bottom Menu View","children":{}},"/playground/notes/build-a-passcode-view-with-swift":{"label":"Build A Passcode View With Swift","children":{}},"/playground/notes/istio":{"label":"Istio","children":{}},"/playground/notes/federated-byzantine":{"label":"Federated Byzantine","children":{}},"/playground/notes/fabric-hyperledger-architecture-explanation":{"label":"Fabric Hyperledger Architecture Explanation","children":{}},"/playground/notes/split-and-reuse-code-in-react-application":{"label":"Split And Reuse Code In React Application","children":{}},"/playground/notes/resource-assignment":{"label":"Resource Assignment","children":{}},"/playground/notes/the-principle-of-spacing-in-ui-design-part-2":{"label":"The Principle Of Spacing In UI Design Part 2","children":{}},"/playground/notes/card-sorting-and-a-glimpse-at-experimental-sorting-session":{"label":"Card Sorting And A Glimpse At Experimental Sorting Session","children":{}},"/playground/notes/about-devops":{"label":"About Devops","children":{}},"/playground/notes/good-design-understanding":{"label":"Good Design Understanding","children":{}},"/playground/notes/competency-mapping":{"label":"Competency Mapping","children":{}},"/playground/notes/design-resourcestools":{"label":"Design Resourcestools","children":{}},"/playground/notes/design-tips-tricks":{"label":"Design Tips Tricks","children":{}},"/playground/notes/design-system":{"label":"Design System","children":{}},"/playground/notes/design-workflow":{"label":"Design Workflow","children":{}},"/playground/notes/three-levels-of-design":{"label":"Three Levels Of Design","children":{}},"/playground/notes/ui-design-fundamental":{"label":"UI Design Fundamental","children":{}},"/playground/notes/ux-model":{"label":"UX Model","children":{}},"/playground/notes/the-principle-of-spacing-in-ui-design-part-1":{"label":"The Principle Of Spacing In UI Design Part 1","children":{}},"/playground/notes/qc-onboarding":{"label":"Qc Onboarding","children":{}},"/playground/notes/dcos-series-part-5-gitlab":{"label":"Dcos Series Part 5 Gitlab","children":{}},"/playground/notes/dcos-series-part-4-deploy-simple-application-with-backend-database":{"label":"Dcos Series Part 4 Deploy Simple Application With Backend Database","children":{}},"/playground/notes/dcos-series-part-3-service-discovery-and-load-balancing":{"label":"Dcos Series Part 3 Service Discovery And Load Balancing","children":{}},"/playground/notes/dcos-series-part-2-deploy-simple-applications":{"label":"Dcos Series Part 2 Deploy Simple Applications","children":{}},"/playground/notes/dcos-series-part-1-quick-look-installation":{"label":"Dcos Series Part 1 Quick Look Installation","children":{}},"/playground/notes/docker-registry":{"label":"Docker Registry","children":{}},"/playground/notes/agile-using-clickup-as-agile-management-tool":{"label":"Agile Using Clickup As Agile Management Tool","children":{}},"/playground/notes/considering-factors-for-performance-evaluating":{"label":"Considering Factors For Performance Evaluating","children":{}},"/playground/notes/how-we-contribute-to-homebrew":{"label":"How We Contribute To Homebrew","children":{}},"/playground/notes/sprint-lifecycle":{"label":"Sprint Lifecycle","children":{}},"/playground/notes/docker-microcontainers":{"label":"Docker Microcontainers","children":{}},"/playground/notes/remote-prepare-and-get-going":{"label":"Remote Prepare And Get Going","children":{}}}},"/playground/onboarding":{"label":"Labs - New Member Onboarding","children":{}},"/playground/schedule":{"label":"Labs x Consulting Workflow","children":{}}}},"/radar":{"label":"Radar","children":{"/radar/index":{"label":"Index","children":{"/radar/index/readme":{"label":"Tech Radar","children":{}},"/radar/index/apache-spark":{"label":"Apache Spark","children":{}},"/radar/index/ant-design":{"label":"Ant Design","children":{}},"/radar/index/apache-kafka":{"label":"Apache Kafka","children":{}},"/radar/index/argocd":{"label":"Argocd","children":{}},"/radar/index/astro":{"label":"Astro","children":{}},"/radar/index/backstage":{"label":"Backstage","children":{}},"/radar/index/blue-green-deployment":{"label":"Blue Green Deployment","children":{}},"/radar/index/browserstack":{"label":"Browserstack","children":{}},"/radar/index/carbon":{"label":"Carbon","children":{}},"/radar/index/chatgpt-assistance":{"label":"Chatgpt Assistance","children":{}},"/radar/index/chromatic":{"label":"Chromatic","children":{}},"/radar/index/clickhouse":{"label":"Clickhouse","children":{}},"/radar/index/cloudflare-workers":{"label":"Cloudflare Workers","children":{}},"/radar/index/codecept":{"label":"Codecept","children":{}},"/radar/index/commitlint":{"label":"Commitlint","children":{}},"/radar/index/copilot":{"label":"Copilot","children":{}},"/radar/index/cucumber":{"label":"Cucumber","children":{}},"/radar/index/cypress":{"label":"Cypress","children":{}},"/radar/index/dapr":{"label":"Dapr","children":{}},"/radar/index/deno":{"label":"Deno","children":{}},"/radar/index/detox":{"label":"Detox","children":{}},"/radar/index/devcontainers":{"label":"Devcontainers","children":{}},"/radar/index/devpod":{"label":"Devpod","children":{}},"/radar/index/dora-metrics":{"label":"Dora Metrics","children":{}},"/radar/index/duckdb":{"label":"Duckdb","children":{}},"/radar/index/earthly":{"label":"Earthly","children":{}},"/radar/index/elixir-umbrella-project":{"label":"Elixir Umbrella Project","children":{}},"/radar/index/elixir":{"label":"Elixir","children":{}},"/radar/index/erlang":{"label":"Erlang","children":{}},"/radar/index/error-logging-convention":{"label":"Error Logging Convention","children":{}},"/radar/index/eslint":{"label":"Eslint","children":{}},"/radar/index/event-sourcing":{"label":"Event Sourcing","children":{}},"/radar/index/excalidraw":{"label":"Excalidraw","children":{}},"/radar/index/expo":{"label":"Expo","children":{}},"/radar/index/figma":{"label":"Figma","children":{}},"/radar/index/formal-verification":{"label":"Formal Verification","children":{}},"/radar/index/fullstack-tracing":{"label":"Fullstack Tracing","children":{}},"/radar/index/gestalt-principle":{"label":"Gestalt Principle","children":{}},"/radar/index/github-actions":{"label":"Github Actions","children":{}},"/radar/index/golang":{"label":"Golang","children":{}},"/radar/index/grafana":{"label":"Grafana","children":{}},"/radar/index/graylog":{"label":"Graylog","children":{}},"/radar/index/headless-ui":{"label":"Headless UI","children":{}},"/radar/index/hoppscotch":{"label":"Hoppscotch","children":{}},"/radar/index/ipfs":{"label":"Ipfs","children":{}},"/radar/index/jotai":{"label":"Jotai","children":{}},"/radar/index/k6":{"label":"K6","children":{}},"/radar/index/k9s":{"label":"K9s","children":{}},"/radar/index/kaniko":{"label":"Kaniko","children":{}},"/radar/index/kotlin":{"label":"Kotlin","children":{}},"/radar/index/kubeseal-sops":{"label":"Kubeseal Sops","children":{}},"/radar/index/ladle":{"label":"Ladle","children":{}},"/radar/index/langchain":{"label":"Langchain","children":{}},"/radar/index/large-language-model-llm":{"label":"Large Language Model LLM","children":{}},"/radar/index/loki":{"label":"Loki","children":{}},"/radar/index/makefile":{"label":"Makefile","children":{}},"/radar/index/micro-frontend":{"label":"Micro Frontend","children":{}},"/radar/index/monorepo":{"label":"Monorepo","children":{}},"/radar/index/msw":{"label":"Msw","children":{}},"/radar/index/n6n":{"label":"N6n","children":{}},"/radar/index/nestjs":{"label":"Nestjs","children":{}},"/radar/index/netlify":{"label":"Netlify","children":{}},"/radar/index/newrelic":{"label":"Newrelic","children":{}},"/radar/index/nextjs":{"label":"Nextjs","children":{}},"/radar/index/nodejs":{"label":"Nodejs","children":{}},"/radar/index/nostrum":{"label":"Nostrum","children":{}},"/radar/index/nx":{"label":"Nx","children":{}},"/radar/index/orval":{"label":"Orval","children":{}},"/radar/index/page-object-model":{"label":"Page Object Model","children":{}},"/radar/index/partytown":{"label":"Partytown","children":{}},"/radar/index/phaser":{"label":"Phaser","children":{}},"/radar/index/phoenix":{"label":"Phoenix","children":{}},"/radar/index/playwright":{"label":"Playwright","children":{}},"/radar/index/pnpm":{"label":"Pnpm","children":{}},"/radar/index/progressive-delivery":{"label":"Progressive Delivery","children":{}},"/radar/index/prometheus":{"label":"Prometheus","children":{}},"/radar/index/prompt-engineering":{"label":"Prompt Engineering","children":{}},"/radar/index/qwik":{"label":"Qwik","children":{}},"/radar/index/radix-ui":{"label":"Radix UI","children":{}},"/radar/index/react-hook-form":{"label":"React Hook Form","children":{}},"/radar/index/react-llm":{"label":"React LLM","children":{}},"/radar/index/react-native":{"label":"React Native","children":{}},"/radar/index/react-query":{"label":"React Query","children":{}},"/radar/index/react-server-component":{"label":"React Server Component","children":{}},"/radar/index/react-testing-library":{"label":"React Testing Library","children":{}},"/radar/index/react":{"label":"React","children":{}},"/radar/index/reinforcement-learning-from-human-feedback":{"label":"Reinforcement Learning From Human Feedback","children":{}},"/radar/index/remix":{"label":"Remix","children":{}},"/radar/index/replayio":{"label":"Replayio","children":{}},"/radar/index/reverse-engineering":{"label":"Reverse Engineering","children":{}},"/radar/index/rust":{"label":"Rust","children":{}},"/radar/index/selenium":{"label":"Selenium","children":{}},"/radar/index/semantic-release-auto-release":{"label":"Semantic Release Auto Release","children":{}},"/radar/index/sentry":{"label":"Sentry","children":{}},"/radar/index/serverlessq":{"label":"Serverlessq","children":{}},"/radar/index/solidity":{"label":"Solidity","children":{}},"/radar/index/solidjs":{"label":"Solidjs","children":{}},"/radar/index/stern":{"label":"Stern","children":{}},"/radar/index/svelte":{"label":"Svelte","children":{}},"/radar/index/swagger":{"label":"Swagger","children":{}},"/radar/index/swift-ui":{"label":"Swift UI","children":{}},"/radar/index/swift":{"label":"Swift","children":{}},"/radar/index/swr":{"label":"Swr","children":{}},"/radar/index/tailwindcss":{"label":"Tailwindcss","children":{}},"/radar/index/tauri":{"label":"Tauri","children":{}},"/radar/index/team-topologies":{"label":"Team Topologies","children":{}},"/radar/index/timescaledb":{"label":"Timescaledb","children":{}},"/radar/index/tla":{"label":"Tla","children":{}},"/radar/index/trunk-based-development":{"label":"Trunk Based Development","children":{}},"/radar/index/turborepo":{"label":"Turborepo","children":{}},"/radar/index/type-safe-client-server":{"label":"Type Safe Client Server","children":{}},"/radar/index/typescript":{"label":"Typescript","children":{}},"/radar/index/ui-documentation":{"label":"UI Documentation","children":{}},"/radar/index/uno-css":{"label":"Uno Css","children":{}},"/radar/index/upptime":{"label":"Upptime","children":{}},"/radar/index/v-model":{"label":"V Model","children":{}},"/radar/index/vector-database":{"label":"Vector Database","children":{}},"/radar/index/vercel":{"label":"Vercel","children":{}},"/radar/index/vitejs":{"label":"Vitejs","children":{}},"/radar/index/volta":{"label":"Volta","children":{}},"/radar/index/wasm":{"label":"Wasm","children":{}},"/radar/index/webdriverio":{"label":"Webdriverio","children":{}},"/radar/index/webflow":{"label":"Webflow","children":{}},"/radar/index/yup":{"label":"Yup","children":{}},"/radar/index/zod":{"label":"Zod","children":{}},"/radar/index/zustand":{"label":"Zustand","children":{}}}},"/radar/readme":{"label":"Tech radar index","children":{}}}},"/updates":{"label":"Updates","children":{"/updates/forward":{"label":"Forward","children":{"/updates/forward/vol-01":{"label":"Vol 01","children":{"/updates/forward/vol-01/istio":{"label":"New Member","children":{}}}},"/updates/forward/market-commentary":{"label":"Market Commentary","children":{"/updates/forward/market-commentary/event-takeaways-2nd":{"label":"2nd Talks and Takeaways","children":{}},"/updates/forward/market-commentary/event-takeaways-1st":{"label":"1st Talks and Takeaways","children":{}},"/updates/forward/market-commentary/2025-28th-feb":{"label":"#9: Bybit Loses $1.5B in Hack, Claude 3.7 Sonnet Drops, and OpenArt Designs Characters","children":{}},"/updates/forward/market-commentary/2025-21th-feb":{"label":"#8: R1 1776 Goes Open-Source, Cardex Gets Hacked, and Grok-3 Debuts","children":{}},"/updates/forward/market-commentary/2025-14th-feb":{"label":"#7: 10x AI Cost Reduction, Lyft’s 2026 Robotaxi Milestone, and Solana ETF Buzz","children":{}},"/updates/forward/market-commentary/2025-7th-feb":{"label":"#6 Trending Products, DeepSeek Wave, and Ethereum Predictions","children":{}},"/updates/forward/market-commentary/2025-17th-jan":{"label":"#5 VC Trends, Blockchain Breakthroughs, and AI Innovations","children":{}},"/updates/forward/market-commentary/2025-10th-jan":{"label":"#4 AI Supercomputers, Mini AI PCs, SEA VC","children":{}},"/updates/forward/market-commentary/2025-3rd-jan":{"label":"#3 AI at CES, Wall Street Boom, Blockchain Trends","children":{}},"/updates/forward/market-commentary/2024-27th-dec":{"label":"#2 AI Talent Wars, OpenAI’s New Models, Hyperliquid","children":{}},"/updates/forward/market-commentary/2024-13th-dec":{"label":"#1 Gemini 2.0, OpenAI’s Sora,  a16z’s Predictions","children":{}}}},"/updates/forward/2025-02":{"label":"20242025","children":{}},"/updates/forward/product-design":{"label":"Product Design","children":{"/updates/forward/product-design/product-design-commentary-20241122":{"label":"Product Design Commentary #7: Hyper-personalization - How AI improves user experience personalization","children":{}},"/updates/forward/product-design/product-design-commentary-20241115":{"label":"Product Design Commentary #6: AI in Design - Cool ideas and how to make them happen","children":{}},"/updates/forward/product-design/product-design-commentary-20241101":{"label":"Product Design Commentary #5: Figma to SwiftUI (functional code) with Claude AI","children":{}},"/updates/forward/product-design/product-design-commentary-20241018":{"label":"Product Design Commentary #4: Generative AI UX design patterns","children":{}},"/updates/forward/product-design/product-design-commentary-20241011":{"label":"Product Design Commentary #3: The art of prompting in AI-human interaction","children":{}},"/updates/forward/product-design/product-design-commentary-20241004":{"label":"Product Design Commentary #2: Unpacking the sparkles icon and AI onboarding challenges","children":{}},"/updates/forward/product-design/product-design-commentary-20240927":{"label":"Product Design Commentary #1: New technologies changing UX/UI and product design","children":{}}}},"/updates/forward/market-report":{"label":"Market Report","children":{"/updates/forward/market-report/2024-october":{"label":"October 2024","children":{}},"/updates/forward/market-report/2024-september":{"label":"September 2024","children":{}},"/updates/forward/market-report/2024-august":{"label":"August 2024","children":{}},"/updates/forward/market-report/2024-july":{"label":"July 2024","children":{}},"/updates/forward/market-report/2024-may":{"label":"May 2024","children":{}},"/updates/forward/market-report/2024-april":{"label":"April 2024","children":{}},"/updates/forward/market-report/2024-march":{"label":"March 2024","children":{}},"/updates/forward/market-report/2024-february":{"label":"February 2024","children":{}},"/updates/forward/market-report/2024-january":{"label":"January 2024","children":{}},"/updates/forward/market-report/2023-december":{"label":"December 2023","children":{}}}},"/updates/forward/2024-09":{"label":"September 2024","children":{}},"/updates/forward/2023-11":{"label":"November 2023","children":{}},"/updates/forward/2023-10":{"label":"October 2023","children":{}},"/updates/forward/2023-08":{"label":"August 2023","children":{}},"/updates/forward/2023-06":{"label":"June 2023","children":{}},"/updates/forward/2023-05":{"label":"May 2023","children":{}},"/updates/forward/2023-03":{"label":"March 2023","children":{}},"/updates/forward/2023-12":{"label":"December 2023","children":{}},"/updates/forward/2022":{"label":"2022","children":{}},"/updates/forward/volume-03":{"label":"Tech Radar Volume 03","children":{}},"/updates/forward/volume-02":{"label":"Tech Radar Volume 02","children":{}},"/updates/forward/volume-01":{"label":"Tech Radar Volume 01","children":{}},"/updates/forward/readme":{"label":"Forward Engineering","children":{}}}},"/updates/build-log":{"label":"Build Log","children":{"/updates/build-log/service_monitoring_with_upptime":{"label":"Secure and transparent uptime monitoring with Upptime and GitHub secrets","children":{}},"/updates/build-log/create-slides-with-overleaf":{"label":"Create slides with Overleaf and ChatGPT","children":{}},"/updates/build-log/optimize-init-load-time-for-trading-platform":{"label":"Optimizing initial load time for a Trading Platform","children":{}},"/updates/build-log/ai-interview-platform-mvp":{"label":"Building MVP for AI-driven interview platform","children":{}},"/updates/build-log/optimizing-ui-for-effective-investment-experience":{"label":"Hedge Foundation - Optimizing UI for effective investment experience","children":{}},"/updates/build-log/implement-binance-future-pnl-analysis-page":{"label":"Implement Binance Futures PNL analysis page by Phoenix LiveView","children":{}},"/updates/build-log/migrate-normal-table-to-timescale-table":{"label":"Migrate regular tables into TimescaleDB hypertables to improve query performance","children":{}},"/updates/build-log/bitcoin-alt-performance-tracking":{"label":"Tracking Bitcoin-Altcoin Performance Indicators in BTC Hedging Strategy","children":{}},"/updates/build-log/database-hardening-for-trading-platform":{"label":"Database hardening for a trading platform","children":{}},"/updates/build-log/data-archive-and-recovery":{"label":"Building a data archive and recovery strategy for high-volume trading system","children":{}},"/updates/build-log/persist-history-using-data-snapshot-pattern":{"label":"Implementing data snapshot pattern to persist historical data","children":{}},"/updates/build-log/ai-ruby-travel-assistant-chatbot":{"label":"AI-powered Ruby travel assistant","children":{}},"/updates/build-log/building-chatbot-agent-for-project-management-tool":{"label":"Building chatbot agent to streamline project management","children":{}},"/updates/build-log/building-data-pipeline-ogif-transcriber":{"label":"Building data pipeline for OGIF transcriber","children":{}},"/updates/build-log/centralized-monitoring-setup-for-trading-platform":{"label":"Setup centralized monitoring system for Hedge Foundation trading platform","children":{}},"/updates/build-log/binance-transfer-matching":{"label":"Building better Binance transfer tracking","children":{}},"/updates/build-log/crypto-market-outperform-chart-rendering":{"label":"Visualizing crypto market performance: BTC-Alt dynamic indicators in Golang","children":{}},"/updates/build-log/enhancing-cryptocurrency-transfer-logger":{"label":"Transfer mapping: enhancing loggers for better transparency","children":{}},"/updates/build-log/reconstructing_trading_pnl_data_pipeline_approach":{"label":"Reconstructing historical trading PnL: a data pipeline approach","children":{}},"/updates/build-log/ai-powered-monthly-project-reports":{"label":"Project reports system: a case study","children":{}}}},"/updates/ogif":{"label":"OGIF","children":{"/updates/ogif/41-20250314":{"label":"#41 ICY-BTC, GitHub Bot, MCP-DB, Pocket Turing","children":{}},"/updates/ogif/39-20250207":{"label":"#39 Frontend report, DB Scaling, AI Workflow","children":{}},"/updates/ogif/38-20250117":{"label":"#38 Erlang automata, AI Trends, Year-End Awards","children":{}},"/updates/ogif/37-20241227":{"label":"#37 AI Fine-tuning, Data archiving, Datalakes","children":{}},"/updates/ogif/28-20241018":{"label":"#28 Go sync.Map, AI UX, Yelp AI, LLM Patterns, Git Analysis","children":{}},"/updates/ogif/27-20241011":{"label":"#27 Go weekly, Frontend, AI UX, Finite Automata","children":{}},"/updates/ogif/26-20241004":{"label":"#26 Design insights, Go tools, Trading app, Chatbots, Essays","children":{}},"/updates/ogif/25-20240927":{"label":"#25 Team updates, Hybrid work, AI insights, Go weekly","children":{}},"/updates/ogif/24-20240920":{"label":"#24 Go weekly, AI workflows, Team AI demo, Figma-UI with Claude","children":{}},"/updates/ogif/23-20240913":{"label":"#23 Go weekly, FE report, Hybrid work, AI agents","children":{}},"/updates/ogif/22-20240906":{"label":"#22 Hybrid work, Tech report, Go weekly, AI demo","children":{}},"/updates/ogif/21-20240830":{"label":"#21 Community engagement, Go weekly, Journey of thought for prompt engineering","children":{}},"/updates/ogif/20-20240823":{"label":"#20 Go weekly, Dynamic objects, Devbox, LLM tracing, Cursor AI","children":{}},"/updates/ogif/19-20240821":{"label":"#19 Go weekly, UI design, File sharing, Dify AI","children":{}},"/updates/ogif/18-20240809":{"label":"#18 Go weekly, RAG, UI, FE updates","children":{}},"/updates/ogif/17-20240802":{"label":"#17 Community Call July, C4 Model, Interview Life in the US","children":{}},"/updates/ogif/16-20240726":{"label":"#16 Go weekly, Dune query, AI voice clone, RAG re-ranking","children":{}},"/updates/ogif/15-20240719":{"label":"#15 AI Supervisors, Local-first Software, Code Completion, Bot Commands","children":{}},"/updates/ogif/14-20240712":{"label":"#14 Generic Collections, Pricing Models, and OGIF Summarizer","children":{}},"/updates/ogif/13-20240705":{"label":"#13 Go Weekly updates, Radix Sort, Human Feedback Mechanism, and effective ChatGPT usage","children":{}},"/updates/ogif/12-20240628":{"label":"#12 June updates, Go Performance, eBPF, PGO, Multimodal RAG","children":{}},"/updates/ogif/11-20240621":{"label":"#11 Design patterns: template method & visitor, Radix sort, and weekly tech commentary","children":{}},"/updates/ogif/10-20240614":{"label":"#10 Behavioral Patterns and Map Content Organization","children":{}},"/updates/ogif/9-20240607":{"label":"#9 What's next for June and Behavior Design Patterns","children":{}},"/updates/ogif/7-20240517":{"label":"#7 Echelon EXPO, Programming patterns, and Moonlighting","children":{}},"/updates/ogif/6-20240510":{"label":"#6 Factory Pattern, Erlang State Machines, and Trading Process","children":{}},"/updates/ogif/5-20240503":{"label":"#5 Singapore Market Report, C4 Modelling, Memo's Nested Sidebar","children":{}},"/updates/ogif/4-20240426":{"label":"#4 DCA, Devbox","children":{}},"/updates/ogif/3-20240419":{"label":"#3 Generative AI, Tokenomics, and Finance Talks","children":{}},"/updates/ogif/2-20240412":{"label":"#2 Devbox as the new Docker, Security Standards, and Understanding Liquidity","children":{}},"/updates/ogif/1-20240405":{"label":"#1 Markdown Presentations, Research Pipeline, Screenshots How-to","children":{}},"/updates/ogif/readme":{"label":"OGIF - Oh God It's Friday","children":{}}}},"/updates/changelog":{"label":"Changelog","children":{"/updates/changelog/2024-10-25-knowledge-base":{"label":"Build your knowledge base","children":{}},"/updates/changelog/2024-09-13-dwarve-updates-ai-llm":{"label":"The Stage of AI and LLM at Dwarves","children":{}},"/updates/changelog/readme":{"label":"Dwarves Updates","children":{}},"/updates/changelog/2023-09-12-growth-stages":{"label":"The Stage of Growth at Dwarves","children":{}},"/updates/changelog/2022-08-26-the-next-leading-chairs":{"label":"The Next Leading Chairs","children":{}},"/updates/changelog/2022-06-26-blockchain-and-data":{"label":"The future is blockchain and data","children":{}},"/updates/changelog/2022-03-31-hiring-stages":{"label":"The stages of hiring at Dwarves","children":{}},"/updates/changelog/2021-12-30-2021-in-review":{"label":"It's a wrap: 2021 in Review","children":{}},"/updates/changelog/2021-12-01-engineering-org-structure":{"label":"Engineering Organizational Structure","children":{}},"/updates/changelog/2021-10-31-path-to-growth":{"label":"The Path To Growth at Dwarves","children":{}},"/updates/changelog/2021-09-29-engineer-performance-review":{"label":"Engineer Performance Review","children":{}},"/updates/changelog/2021-08-23-project-compliance":{"label":"Project Compliance","children":{}},"/updates/changelog/2021-07-11-dalat-office":{"label":"Da Lat Office","children":{}},"/updates/changelog/2021-06-10-dwarves-updates":{"label":"Dwarves Updates","children":{}}}},"/updates/wala":{"label":"WALA","children":{"/updates/wala/001-43-factory":{"label":"43 Factory","children":{}},"/updates/wala/002-dzs-media":{"label":"DZS Media","children":{}},"/updates/wala/003-sp-group":{"label":"SP Group","children":{}},"/updates/wala/readme":{"label":"WALA","children":{}}}}}},"/consulting":{"label":"Consulting","children":{"/consulting/case-study":{"label":"Case Study","children":{"/consulting/case-study/screenz-ai":{"label":"Screenz.ai","children":{}},"/consulting/case-study/kafi":{"label":"Kafi","children":{}},"/consulting/case-study/droppii":{"label":"Droppii","children":{}},"/consulting/case-study/konvoy":{"label":"Konvoy","children":{}},"/consulting/case-study/cimb":{"label":"CIMB","children":{}},"/consulting/case-study/swift":{"label":"Swift","children":{}},"/consulting/case-study/startupvn":{"label":"StartupVN","children":{}},"/consulting/case-study/open-fabric":{"label":"Open Fabric","children":{}},"/consulting/case-study/icrosschain":{"label":"iCrosschain","children":{}},"/consulting/case-study/hedge-foundation":{"label":"Hedge Foundation","children":{}},"/consulting/case-study/searchio":{"label":"Search.io","children":{}},"/consulting/case-study/tokenomy":{"label":"Tokenomy","children":{}},"/consulting/case-study/basehq":{"label":"BaseHQ","children":{}},"/consulting/case-study/momos":{"label":"Momos","children":{}},"/consulting/case-study/attrace":{"label":"Attrace","children":{}},"/consulting/case-study/setel":{"label":"Setel","children":{}},"/consulting/case-study/joinpara":{"label":"JoinPara","children":{}},"/consulting/case-study/relay":{"label":"Relay","children":{}},"/consulting/case-study/naru":{"label":"Naru","children":{}},"/consulting/case-study/mudah":{"label":"Mudah","children":{}},"/consulting/case-study/reapit":{"label":"Reapit","children":{}},"/consulting/case-study/aharooms":{"label":"Aharooms","children":{}},"/consulting/case-study/begroup":{"label":"beGroup","children":{}},"/consulting/case-study/airwatt":{"label":"AirWatt","children":{}},"/consulting/case-study/voconic":{"label":"Voconic","children":{}},"/consulting/case-study/sol":{"label":"Sol","children":{}},"/consulting/case-study/dental-marketplace":{"label":"Dental Marketplace","children":{}},"/consulting/case-study/bhd":{"label":"BHD Cinema","children":{}}}},"/consulting/bill-by-hours":{"label":"Pricing model: Bill by hours","children":{}},"/consulting/partners-network":{"label":"Partners Network","children":{}},"/consulting/readme":{"label":"💼 Consulting team","children":{}},"/consulting/collaboration-guideline":{"label":"Collaboration Guideline","children":{}},"/consulting/fbsc":{"label":"FBSC","children":{}},"/consulting/how-to-work-with-clients":{"label":"How to work with clients","children":{}},"/consulting/service-feedbacks":{"label":"Service feedbacks","children":{}},"/consulting/setting-the-budget":{"label":"Setting The Budget","children":{}},"/consulting/fixed-budget-scope-controlled":{"label":"Fixed Budget Scope Controlled","children":{}},"/consulting/the-adjacent-possible":{"label":"The Adjacent Possible","children":{}}}},"/handbook":{"label":"Handbook","children":{"/handbook/navigate-changes":{"label":"Navigate changes","children":{}},"/handbook/community":{"label":"Community","children":{"/handbook/community/icy-worth":{"label":"How much is your ICY worth","children":{}},"/handbook/community/icy-swap":{"label":"How to swap ICY to BTC","children":{}},"/handbook/community/icy":{"label":"ICY","children":{}},"/handbook/community/discord":{"label":"Discord","children":{}},"/handbook/community/earn":{"label":"Earn","children":{}},"/handbook/community/readme":{"label":"Radar","children":{}},"/handbook/community/radar":{"label":"Radar","children":{}},"/handbook/community/sharing":{"label":"Sharing knowledge","children":{}},"/handbook/community/showcase":{"label":"Showcase","children":{}},"/handbook/community/memo":{"label":"Memo","children":{}}}},"/handbook/guides":{"label":"Guides","children":{"/handbook/guides/check-in-at-office":{"label":"Office check-in process for earning ICY","children":{}},"/handbook/guides/leave-request":{"label":"Leave request","children":{}},"/handbook/guides/nda":{"label":"NDA & Agreements","children":{}},"/handbook/guides/configure-company-email":{"label":"Configure your company email","children":{}},"/handbook/guides/one-on-one-meeting":{"label":"1-on-1 meetings","children":{}},"/handbook/guides/continuing-education-allowance":{"label":"Continuing education allowance","children":{}},"/handbook/guides/reimbursement":{"label":"Reimbursement","children":{}},"/handbook/guides/email-communication-and-use":{"label":"Email use","children":{}},"/handbook/guides/password-sharing":{"label":"Password Sharing","children":{}},"/handbook/guides/asset-request":{"label":"Request an asset","children":{}},"/handbook/guides/effective-meeting":{"label":"Effective meetings","children":{}},"/handbook/guides/conduct-a-meeting":{"label":"How to conduct a meeting","children":{}}}},"/handbook/making-a-career":{"label":"Making a career","children":{}},"/handbook/as-a-community":{"label":"As a community","children":{}},"/handbook/knowledge-base":{"label":"Knowledge base","children":{}},"/handbook/stock-option-plan":{"label":"Stock option plan","children":{}},"/handbook/readme":{"label":"📔 Handbook","children":{}},"/handbook/compliance":{"label":"Compliance","children":{}},"/handbook/mma":{"label":"MMA","children":{}},"/handbook/hybrid-working":{"label":"Hybrid Working","children":{}},"/handbook/routine":{"label":"Work routine","children":{}},"/handbook/ventures":{"label":"Ventures arm","children":{}},"/handbook/purpose":{"label":"Purpose","children":{}},"/handbook/benefits-and-perks":{"label":"Benefits & perks","children":{}},"/handbook/dwarves-foundation-is-you":{"label":"You are Dwarves Foundation","children":{}},"/handbook/getting-started":{"label":"💎 Getting started","children":{}},"/handbook/how-we-hire":{"label":"How we hire","children":{}},"/handbook/how-we-spend-money":{"label":"How we spend money","children":{}},"/handbook/misc":{"label":"Misc","children":{"/handbook/misc/marketing-assets":{"label":"Marketing assets","children":{}}}},"/handbook/moonlighting":{"label":"Moonlighting","children":{}},"/handbook/places-to-work":{"label":"Places to work","children":{}},"/handbook/security-rules":{"label":"Security rules","children":{}},"/handbook/tools-and-systems":{"label":"Tools and systems","children":{}},"/handbook/what-we-stand-for":{"label":"What we stand for","children":{}},"/handbook/what-we-value":{"label":"What we value","children":{}},"/handbook/where-we-work":{"label":"Where we work","children":{}},"/handbook/who-does-what":{"label":"Who does what","children":{}},"/handbook/faq":{"label":"FAQs","children":{}},"/handbook/how-we-work":{"label":"How we work","children":{}}}},"/careers":{"label":"Careers","children":{"/careers/archived":{"label":"Archived","children":{"/careers/archived/full-stack-engineer":{"label":"Full-Stack Engineer","children":{}},"/careers/archived/executive-assistant":{"label":"Executive Assistant","children":{}},"/careers/archived/technical-recruiter":{"label":"Technical Recruiter","children":{}},"/careers/archived/backend-engineer-go-elixir-rust":{"label":"Backend Engineer, Go/Elixir/Rust","children":{}},"/careers/archived/react-native-developer":{"label":"React Native Developer","children":{}},"/careers/archived/android-developer":{"label":"Mobile Engineer, Android","children":{}},"/careers/archived/community-executive":{"label":"Community Executive","children":{}},"/careers/archived/data-engineering":{"label":"Energy - Data Engineering","children":{}},"/careers/archived/devops":{"label":"DevOps Engineer - FinTech","children":{}},"/careers/archived/frontend-developer-junior":{"label":"Junior Frontend Developer","children":{}},"/careers/archived/frontend":{"label":"Frontend","children":{}},"/careers/archived/ios-developer":{"label":"iOS Developer - EnergyTech","children":{}},"/careers/archived/macos-developer":{"label":"Software Engineer, macOS","children":{}},"/careers/archived/product-designer-new-grad":{"label":"Product Designer, New Grad","children":{}},"/careers/archived/product-designer":{"label":"Product Designer","children":{}},"/careers/archived/qc-automation":{"label":"QC Engineer, Automation - Logistics","children":{}},"/careers/archived/qc-manual":{"label":"Fintech - QC Engineer, Manual","children":{}},"/careers/archived/reactjs-web-engineer":{"label":"Web Engineer, React.js","children":{}},"/careers/archived/visual-designer":{"label":"Visual Designer","children":{}},"/careers/archived/android":{"label":"Android","children":{}},"/careers/archived/golang":{"label":"Golang","children":{}},"/careers/archived/intern":{"label":"Intern","children":{}},"/careers/archived/ios":{"label":"iOS Developer","children":{}},"/careers/archived/qa":{"label":"QA Engineer","children":{}}}},"/careers/open-positions":{"label":"Open Positions","children":{"/careers/open-positions/business-manager":{"label":"Business Development Manager","children":{}},"/careers/open-positions/growth-lead":{"label":"Growth Lead","children":{}}}},"/careers/life":{"label":"Life","children":{"/careers/life/2024-09-26-29-dat-nguyen":{"label":"Dat Nguyen","children":{}},"/careers/life/2024-02-19-28-duyen-tran":{"label":"Duyen Tran","children":{}},"/careers/life/2024-01-22-27-tri-tran":{"label":"Tri Tran","children":{}},"/careers/life/2024-01-03-25-khoi-nguyen":{"label":"Khoi Nguyen","children":{}},"/careers/life/2023-12-13-24-tai-pham":{"label":"Tai Pham","children":{}},"/careers/life/2023-12-12-23-hieu-nghia":{"label":"Hieu Nghia","children":{}},"/careers/life/2023-11-27-22-cat-nguyen":{"label":"Cat Nguyen","children":{}},"/careers/life/2023-11-20-21-minh-cloud":{"label":"Minh Cloud","children":{}},"/careers/life/2023-11-13-20-hoai-khang":{"label":"Hoai Khang","children":{}},"/careers/life/2023-11-03-19-vi-tran":{"label":"Vi Tran","children":{}},"/careers/life/2023-10-30-18-tuan-tran":{"label":"Tuan Tran","children":{}},"/careers/life/2023-10-16-16-kim-ngan":{"label":"Kim Ngan","children":{}},"/careers/life/2023-10-13-17-hoang-nguyen":{"label":"Hoang Nguyen","children":{}},"/careers/life/2023-10-09-15-khoi-ngo":{"label":"Khoi Ngo","children":{}},"/careers/life/2023-10-02-14-dat-pham":{"label":"Dat Pham","children":{}},"/careers/life/2023-09-29-13-bien-vo":{"label":"Bien Vo","children":{}},"/careers/life/2023-09-18-12-toan-ho":{"label":"Toan Ho","children":{}},"/careers/life/2023-09-05-11-dinh-nam":{"label":"Dinh Nam","children":{}},"/careers/life/2023-08-17-10-cuong-mai":{"label":"Cuong Mai","children":{}},"/careers/life/2023-08-07-9-hoang-anh":{"label":"Hoang Anh","children":{}},"/careers/life/2023-06-30-7-khac-vy":{"label":"Khac Vy","children":{}},"/careers/life/group":{"label":"Group","children":{"/careers/life/group/2023-06-01-software-design-group":{"label":"Software Design Group","children":{}}}},"/careers/life/2022-09-21-7-my-anh":{"label":"My Anh","children":{}},"/careers/life/2022-08-11-6-hieu-vu":{"label":"Hieu Vu","children":{}},"/careers/life/2022-08-04-6-duy-nguyen":{"label":"Duy Nguyen","children":{}},"/careers/life/2022-08-03-5-nam-nguyen":{"label":"Nam Nguyen","children":{}},"/careers/life/2022-07-22-4-an-tran":{"label":"An Tran","children":{}},"/careers/life/2022-03-17-3-tom-nguyen":{"label":"Tom Nguyen","children":{}},"/careers/life/2022-02-25-2-anh-tran":{"label":"Anh Tran","children":{}},"/careers/life/2022-02-14-1-thanh-pham":{"label":"Thanh Pham","children":{}},"/careers/life/2021-03-31-0-tuan-dao":{"label":"Tuan Dao","children":{}},"/careers/life/2021-03-11-0-phat-nguyen":{"label":"Phat Nguyen","children":{}},"/careers/life/2020-05-08-0-thanh-pham":{"label":"Thanh Pham","children":{}},"/careers/life/2020-04-10-0-huy-nguyen":{"label":"Huy Nguyen","children":{}}}},"/careers/culture":{"label":"Culture","children":{}},"/careers/manifesto":{"label":"Manifesto","children":{}},"/careers/internship":{"label":"Internship","children":{"/careers/internship/2019":{"label":"2019","children":{"/careers/internship/2019/2019":{"label":"Spring Internship 2019","children":{}}}}}},"/careers/apprentice":{"label":"Apprentice","children":{"/careers/apprentice/2022":{"label":"2022","children":{"/careers/apprentice/2022/batch-of-2022":{"label":"Batch of 2022","children":{}},"/careers/apprentice/2022/2022-meet-ngoc-thanh-pham":{"label":"Thanh Pham","children":{}},"/careers/apprentice/2022/2022-meet-tuan-dao":{"label":"Tuan Dao","children":{}}}},"/careers/apprentice/apprentice":{"label":"Apprentice program","children":{}}}},"/careers/readme":{"label":"👋 Join the Dwarves","children":{}}}},"/opensource":{"label":"Opensource","children":{"/opensource/readme":{"label":"☀️ Open source","children":{}}}},"/culture":{"label":"Culture","children":{"/culture/culture-test":{"label":"The culture test","children":{}},"/culture/readme":{"label":"Notes on our culture","children":{}},"/culture/ogif-intro":{"label":"OGIF - Oh God It's Friday","children":{}},"/culture/red-flags":{"label":"Red flags","children":{}},"/culture/focus-on-delivery":{"label":"Focus on delivery","children":{}},"/culture/the-inner-circle":{"label":"The inner circle","children":{}},"/culture/making-decision":{"label":"Making decision as a team member","children":{}},"/culture/beyond-the-title":{"label":"Beyond the title","children":{}},"/culture/go-the-extra-mile":{"label":"Go the extra mile","children":{}},"/culture/runs-by-ideas":{"label":"The Dwarves runs by ideas","children":{}},"/culture/a-tips-of-hiring-dont":{"label":"A tips of hiring - Do & Don't","children":{}},"/culture/culture-handbook":{"label":"The Dwarves culture handbook","children":{}},"/culture/people-matter":{"label":"How people matter should work","children":{}},"/culture/delegation-and-believe-it-will-work":{"label":"Delegation and believe it will work","children":{}},"/culture/constructive-feedback":{"label":"Constructive feedback","children":{}},"/culture/transparency":{"label":"Transparency","children":{}},"/culture/account-management-strategy":{"label":"Account management strategies","children":{}},"/culture/avoid-burn-out":{"label":"Avoid burn out","children":{}},"/culture/high-performing-team":{"label":"Building a solid high performing team","children":{}},"/culture/delegate-work-not-responsibility":{"label":"Delegate work, not responsibility","children":{}},"/culture/blocking-distraction":{"label":"Blocking distraction","children":{}}}},"/playbook":{"label":"Playbook","children":{"/playbook/operations":{"label":"Operations","children":{"/playbook/operations/checklists":{"label":"Checklists","children":{"/playbook/operations/checklists/leave-and-request-checklist":{"label":"Leave Request","children":{}},"/playbook/operations/checklists/offboarding-checklist":{"label":"Offboarding","children":{}},"/playbook/operations/checklists/artifact-checklist":{"label":"Back up Artifact","children":{}},"/playbook/operations/checklists/project-archive":{"label":"Project Archive","children":{}},"/playbook/operations/checklists/project-case-study":{"label":"Project Case Study","children":{}},"/playbook/operations/checklists/project-communication":{"label":"Project Communication","children":{}},"/playbook/operations/checklists/project-handover":{"label":"Project Handover","children":{}},"/playbook/operations/checklists/project-initialization":{"label":"Project Initialization","children":{}},"/playbook/operations/checklists/assets-checklist":{"label":"Assets","children":{}},"/playbook/operations/checklists/billing-checklist":{"label":"Billing","children":{}},"/playbook/operations/checklists/candidate-checklist":{"label":"Candidate","children":{}},"/playbook/operations/checklists/consulting-contract-checklist":{"label":"Consulting Contract","children":{}},"/playbook/operations/checklists/hiring-checklist":{"label":"Hiring","children":{}},"/playbook/operations/checklists/onboarding-checklist":{"label":"Onboarding","children":{}},"/playbook/operations/checklists/unemployment-social-health-insurance":{"label":"Unemployment, Social, Health Insurance","children":{}},"/playbook/operations/checklists/vietnam-invoice-checklist":{"label":"Vietnam Invoice","children":{}}}},"/playbook/operations/how-to-conduct-delivery-reports":{"label":"How to conduct delivery reports","children":{}},"/playbook/operations/how-we-do-effective-planning-and-reporting":{"label":"How we do effective planning and reporting","children":{}},"/playbook/operations/project-schedule-delivery-guidelines":{"label":"Project Delivery Schedule and Guidelines","children":{}},"/playbook/operations/mbti-type-intj":{"label":"MBTI Type INTJ","children":{}},"/playbook/operations/mbti-type-istp":{"label":"MBTI Type ISTP","children":{}},"/playbook/operations/mbti-type-estj":{"label":"MBTI Type ESTJ","children":{}},"/playbook/operations/mbti-type-istj":{"label":"MBTI Type ISTJ","children":{}},"/playbook/operations/applying-myersbriggs-type-indicator-in-hr":{"label":"Applying Myersbriggs Type Indicator In Hiring","children":{}},"/playbook/operations/the-four-preferences":{"label":"The Four Preferences","children":{}},"/playbook/operations/adjust-the-way-we-work-in-basecamp-style":{"label":"Adjust The Way We Work In Basecamp Style","children":{}},"/playbook/operations/bric-a-brac":{"label":"Bric A Brac","children":{}},"/playbook/operations/writing-management-objectives-in-smart":{"label":"Writing Management Objectives In Smart","children":{}},"/playbook/operations/hiring-for-operations-team":{"label":"Hiring For Operations Team","children":{}},"/playbook/operations/annual-bonus-for-sales":{"label":"Annual bonus for sales","children":{}},"/playbook/operations/collaboration-guidelines":{"label":"Collaboration Guidelines","children":{}},"/playbook/operations/compliance-check-process":{"label":"Compliance Check Process","children":{}},"/playbook/operations/email-template":{"label":"Email Template","children":{"/playbook/operations/email-template/assignment-invitation-2":{"label":"Assignment Inviation (Skip pre-assessment)","children":{}},"/playbook/operations/email-template/assignment-invitation":{"label":"Assignment Inviation","children":{}},"/playbook/operations/email-template/confirm-resume-date":{"label":"Confirm Employee's Resume Date Day","children":{}},"/playbook/operations/email-template/farewell":{"label":"Farewell Letter","children":{}},"/playbook/operations/email-template/follow-up-onboarding-items":{"label":"Follow-up Onboarding Items","children":{}},"/playbook/operations/email-template/hung-king-commemoration-day":{"label":"Hung King Commemoration Day","children":{}},"/playbook/operations/email-template/information-about-resource-change":{"label":"Inform about resource change","children":{}},"/playbook/operations/email-template/international-labour-day":{"label":"International Labour Day","children":{}},"/playbook/operations/email-template/interview-invitation":{"label":"Interview Invitation","children":{}},"/playbook/operations/email-template/milestone-sign-off":{"label":"Milestone sign-off","children":{}},"/playbook/operations/email-template/national-day":{"label":"National Day","children":{}},"/playbook/operations/email-template/new-year-day":{"label":"New Year Day","children":{}},"/playbook/operations/email-template/offer-letter":{"label":"Offer Letter","children":{}},"/playbook/operations/email-template/referral-bonus-confirmation-note":{"label":"Referral Bonus Confirmation Note","children":{}},"/playbook/operations/email-template/rejection-email":{"label":"Rejection","children":{}},"/playbook/operations/email-template/salary-increment":{"label":"Salary Increment Announcement","children":{}},"/playbook/operations/email-template/tet-holiday":{"label":"Tet Holiday","children":{}},"/playbook/operations/email-template/thank-you-letter":{"label":"Thank you letter","children":{}},"/playbook/operations/email-template/welcome-onboard":{"label":"Welcome Onboard","children":{}},"/playbook/operations/email-template/welcome-to-dwarves-update":{"label":"Welcome to Dwarves Updates","children":{}}}},"/playbook/operations/naming-convention":{"label":"Naming convention","children":{}},"/playbook/operations/setup-email-template":{"label":"Setup email template in Gmail","children":{}},"/playbook/operations/types-of-employees":{"label":"Types Of Employees","children":{}},"/playbook/operations/hiring-approach":{"label":"Hiring Approach","children":{}},"/playbook/operations/the-okr":{"label":"The OKR","children":{}},"/playbook/operations/our-metrics-for-performance-review":{"label":"Our Metrics For Performance Review","children":{}},"/playbook/operations/make-remote-working-works":{"label":"Make Remote Working Works","children":{}},"/playbook/operations/our-policy-for-remote-working":{"label":"Our Policy For Remote Working","children":{}}}},"/playbook/engineering":{"label":"Engineering","children":{"/playbook/engineering/estimation-guidelines":{"label":"Estimation Guidelines","children":{}},"/playbook/engineering/presentation":{"label":"monitoring","children":{}},"/playbook/engineering/repo-icon":{"label":"release","children":{}}}},"/playbook/design":{"label":"Design","children":{"/playbook/design/design-system":{"label":"Design System","children":{}},"/playbook/design/ia-design":{"label":"Information Architecture","children":{}},"/playbook/design/ix-design":{"label":"IX","children":{}},"/playbook/design/aarrr":{"label":"AARRR","children":{}},"/playbook/design/design-sprint":{"label":"Design Sprint","children":{}},"/playbook/design/lean-canvas":{"label":"Lean Canvas","children":{}},"/playbook/design/prototype":{"label":"Low-fidelity prototype: UI Design","children":{}},"/playbook/design/ui-design":{"label":"UI","children":{}},"/playbook/design/ux-design":{"label":"UX","children":{}},"/playbook/design/wireframe":{"label":"wireframe","children":{}}}},"/playbook/readme":{"label":"Playbook","children":{}}}},"/fund":{"label":"Fund","children":{"/fund/ventures-fund-1":{"label":"Dwarves Ventures Fund 1","children":{}},"/fund/ventures-fund-0":{"label":"Dwarves Ventures Fund 0","children":{}}}}}},"/tags":{"label":"Popular Tags","children":{"/tags/earn":{"label":"#earn","children":{},"count":8},"/tags/productivity":{"label":"#productivity","children":{},"count":13},"/tags/quality":{"label":"#quality","children":{},"count":3},"/tags/open-source":{"label":"#open-source","children":{},"count":3},"/tags/liquidity":{"label":"#liquidity","children":{},"count":2},"/tags/rfc":{"label":"#RFC","children":{},"count":2},"/tags/icy":{"label":"#icy","children":{},"count":13},"/tags/blockchain":{"label":"#blockchain","children":{},"count":47},"/tags/ai":{"label":"#AI","children":{},"count":58},"/tags/evm":{"label":"#evm","children":{},"count":5},"/tags/web3":{"label":"#web3","children":{},"count":4},"/tags/foundry":{"label":"#foundry","children":{},"count":2},"/tags/frontend":{"label":"#frontend","children":{},"count":67},"/tags/market-report":{"label":"#market-report","children":{},"count":32},"/tags/security":{"label":"#security","children":{},"count":10},"/tags/mcp":{"label":"#MCP","children":{},"count":3},"/tags/btc":{"label":"#btc","children":{},"count":1},"/tags/swap":{"label":"#swap","children":{},"count":2},"/tags/golang":{"label":"#golang","children":{},"count":50},"/tags/go-weekly":{"label":"#go-weekly","children":{},"count":24},"/tags/llm":{"label":"#LLM","children":{},"count":76},"/tags/protocol":{"label":"#protocol","children":{},"count":2},"/tags/tooling":{"label":"#tooling","children":{},"count":9},"/tags/aider":{"label":"#aider","children":{},"count":2},"/tags/qwen2.5":{"label":"#qwen2.5","children":{},"count":1},"/tags/openhand":{"label":"#openhand","children":{},"count":1},"/tags/predicted output":{"label":"#predicted output","children":{},"count":1},"/tags/project-management":{"label":"#project-management","children":{},"count":1},"/tags/copilots":{"label":"#copilots","children":{},"count":2},"/tags/team-management":{"label":"#team-management","children":{},"count":1},"/tags/mongodb":{"label":"#mongodb","children":{},"count":1},"/tags/database":{"label":"#database","children":{},"count":8},"/tags/salesforce":{"label":"#salesforce","children":{},"count":1},"/tags/use cases":{"label":"#use cases","children":{},"count":2},"/tags/data-engineering":{"label":"#data-engineering","children":{},"count":5},"/tags/system-design":{"label":"#system-design","children":{},"count":2},"/tags/architecture":{"label":"#architecture","children":{},"count":4},"/tags/etl":{"label":"#etl","children":{},"count":3},"/tags/react":{"label":"#react","children":{},"count":15},"/tags/performance":{"label":"#performance","children":{},"count":17},"/tags/design-system":{"label":"#design-system","children":{},"count":1},"/tags/storybook":{"label":"#storybook","children":{},"count":1},"/tags/hook":{"label":"#hook","children":{},"count":1},"/tags/testing":{"label":"#testing","children":{},"count":4},"/tags/cline":{"label":"#cline","children":{},"count":1},"/tags/realtime api":{"label":"#realtime api","children":{},"count":1},"/tags/interface":{"label":"#interface","children":{},"count":1},"/tags/import":{"label":"#import","children":{},"count":1},"/tags/package":{"label":"#package","children":{},"count":1},"/tags/yelp":{"label":"#yelp","children":{},"count":1},"/tags/generics":{"label":"#generics","children":{},"count":2},"/tags/observability":{"label":"#observability","children":{},"count":5},"/tags/tracing":{"label":"#tracing","children":{},"count":1},"/tags/pillar":{"label":"#pillar","children":{},"count":3},"/tags/enterprise":{"label":"#enterprise","children":{},"count":10},"/tags/language":{"label":"#language","children":{},"count":5},"/tags/ai-agents":{"label":"#ai-agents","children":{},"count":2},"/tags/ai-evaluation":{"label":"#ai-evaluation","children":{},"count":1},"/tags/prompt-engineering":{"label":"#prompt-engineering","children":{},"count":4},"/tags/networking":{"label":"#networking","children":{},"count":7},"/tags/finite-automata":{"label":"#finite-automata","children":{},"count":1},"/tags/pattern-matching":{"label":"#pattern-matching","children":{},"count":1},"/tags/state-machines":{"label":"#state-machines","children":{},"count":1},"/tags/java":{"label":"#java","children":{},"count":1},"/tags/programming":{"label":"#programming","children":{},"count":1},"/tags/rag":{"label":"#RAG","children":{},"count":5},"/tags/caching":{"label":"#caching","children":{},"count":1},"/tags/moc":{"label":"#moc","children":{},"count":3},"/tags/devbox":{"label":"#devbox","children":{},"count":17},"/tags/nix":{"label":"#nix","children":{},"count":9},"/tags/case-study":{"label":"#case-study","children":{},"count":29},"/tags/generative-ui":{"label":"#generative-ui","children":{},"count":1},"/tags/search":{"label":"#search","children":{},"count":1},"/tags/evaluation":{"label":"#evaluation","children":{},"count":3},"/tags/docker":{"label":"#docker","children":{},"count":11},"/tags/function-calling":{"label":"#function-calling","children":{},"count":1},"/tags/ton":{"label":"#ton","children":{},"count":2},"/tags/search-engine":{"label":"#search-engine","children":{},"count":1},"/tags/duckdb":{"label":"#duckdb","children":{},"count":3},"/tags/transformers.js":{"label":"#transformers.js","children":{},"count":1},"/tags/hybrid-search":{"label":"#hybrid-search","children":{},"count":1},"/tags/feedback":{"label":"#feedback","children":{},"count":2},"/tags/pattern":{"label":"#pattern","children":{},"count":1},"/tags/supervisor-architecture":{"label":"#supervisor-architecture","children":{},"count":1},"/tags/ogif":{"label":"#OGIF","children":{},"count":32},"/tags/guidelines":{"label":"#guidelines","children":{},"count":3},"/tags/document-processing":{"label":"#document-processing","children":{},"count":1},"/tags/information-retrieval":{"label":"#information-retrieval","children":{},"count":1},"/tags/mechanism":{"label":"#mechanism","children":{},"count":1},"/tags/iterators":{"label":"#iterators","children":{},"count":1},"/tags/reinforcement-learning":{"label":"#reinforcement-learning","children":{},"count":3},"/tags/kernel-programing":{"label":"#kernel-programing","children":{},"count":1},"/tags/machine-learning":{"label":"#machine-learning","children":{},"count":2},"/tags/prompt":{"label":"#prompt","children":{},"count":1},"/tags/chatgpt":{"label":"#chatgpt","children":{},"count":1},"/tags/solana":{"label":"#solana","children":{},"count":7},"/tags/defi":{"label":"#DeFi","children":{},"count":2},"/tags/anchor":{"label":"#anchor","children":{},"count":2},"/tags/containerization":{"label":"#containerization","children":{},"count":4},"/tags/virtualization":{"label":"#virtualization","children":{},"count":4},"/tags/history":{"label":"#history","children":{},"count":1},"/tags/websocket":{"label":"#websocket","children":{},"count":1},"/tags/protocols":{"label":"#protocols","children":{},"count":1},"/tags/dwarves":{"label":"#dwarves","children":{},"count":19},"/tags/radar":{"label":"#radar","children":{},"count":9},"/tags/rendering":{"label":"#rendering","children":{},"count":1},"/tags/dom":{"label":"#dom","children":{},"count":3},"/tags/cssom":{"label":"#cssom","children":{},"count":1},"/tags/render-tree":{"label":"#render-tree","children":{},"count":1},"/tags/engineering":{"label":"#engineering","children":{},"count":58},"/tags/iframe":{"label":"#iframe","children":{},"count":1},"/tags/postmessage":{"label":"#postmessage","children":{},"count":1},"/tags/dx":{"label":"#dx","children":{},"count":1},"/tags/vector-database":{"label":"#vector-database","children":{},"count":4},"/tags/mock-service-worker":{"label":"#mock-service-worker","children":{},"count":1},"/tags/api-mocking":{"label":"#api-mocking","children":{},"count":1},"/tags/web-development-tool":{"label":"#web-development-tool","children":{},"count":1},"/tags/data-fetching":{"label":"#data-fetching","children":{},"count":1},"/tags/frontend,":{"label":"#frontend,","children":{},"count":1},"/tags/graphql":{"label":"#graphql","children":{},"count":1},"/tags/reactjs":{"label":"#reactjs","children":{},"count":2},"/tags/scroll-driven-animations":{"label":"#scroll-driven-animations","children":{},"count":1},"/tags/animations":{"label":"#animations","children":{},"count":1},"/tags/intersection-observer":{"label":"#intersection-observer","children":{},"count":1},"/tags/nextjs":{"label":"#nextjs","children":{},"count":1},"/tags/server-component":{"label":"#server-component","children":{},"count":1},"/tags/caching-data":{"label":"#caching-data","children":{},"count":1},"/tags/social-networks":{"label":"#social-networks","children":{},"count":1},"/tags/tool":{"label":"#tool","children":{},"count":3},"/tags/practice":{"label":"#practice","children":{},"count":5},"/tags/foundation-model":{"label":"#foundation-model","children":{},"count":1},"/tags/fine-tuning":{"label":"#fine-tuning","children":{},"count":1},"/tags/vector database":{"label":"#vector database","children":{},"count":1},"/tags/shadow-dom":{"label":"#shadow-dom","children":{},"count":1},"/tags/web-api":{"label":"#web-api","children":{},"count":1},"/tags/machine learning":{"label":"#machine learning","children":{},"count":1},"/tags/r&d":{"label":"#r&d","children":{},"count":1},"/tags/data":{"label":"#data","children":{},"count":14},"/tags/backend":{"label":"#backend","children":{},"count":5},"/tags/web":{"label":"#web","children":{},"count":9},"/tags/framework":{"label":"#framework","children":{},"count":6},"/tags/micro-frontend":{"label":"#micro-frontend","children":{},"count":3},"/tags/swr-infinite":{"label":"#swr-infinite","children":{},"count":1},"/tags/web-design":{"label":"#web-design","children":{},"count":1},"/tags/tuning-llm":{"label":"#tuning-llm","children":{},"count":2},"/tags/langchain":{"label":"#langchain","children":{},"count":1},"/tags/translation":{"label":"#translation","children":{},"count":1},"/tags/profiling":{"label":"#profiling","children":{},"count":1},"/tags/technique":{"label":"#technique","children":{},"count":9},"/tags/nft":{"label":"#nft","children":{},"count":3},"/tags/state-mangement":{"label":"#state-mangement","children":{},"count":1},"/tags/global-state-management":{"label":"#global-state-management","children":{},"count":1},"/tags/css":{"label":"#css","children":{},"count":5},"/tags/fonts":{"label":"#fonts","children":{},"count":1},"/tags/variable-fonts":{"label":"#variable-fonts","children":{},"count":1},"/tags/state-management":{"label":"#state-management","children":{},"count":2},"/tags/component":{"label":"#component","children":{},"count":1},"/tags/proof-of-knowledge":{"label":"#proof-of-knowledge","children":{},"count":1},"/tags/fronten":{"label":"#fronten","children":{},"count":1},"/tags/hooks":{"label":"#hooks","children":{},"count":2},"/tags/typescript":{"label":"#typescript","children":{},"count":4},"/tags/analytics-tools":{"label":"#analytics-tools","children":{},"count":1},"/tags/analytics-platform":{"label":"#analytics-platform","children":{},"count":1},"/tags/parsing":{"label":"#parsing","children":{},"count":1},"/tags/validation":{"label":"#validation","children":{},"count":1},"/tags/webassembly":{"label":"#webassembly","children":{},"count":1},"/tags/sandbox":{"label":"#sandbox","children":{},"count":1},"/tags/zk-rollup":{"label":"#zk-rollup","children":{},"count":2},"/tags/polygon":{"label":"#polygon","children":{},"count":1},"/tags/starknet":{"label":"#starknet","children":{},"count":1},"/tags/ethereum":{"label":"#ethereum","children":{},"count":2},"/tags/zero-knowledge":{"label":"#zero-knowledge","children":{},"count":1},"/tags/network":{"label":"#network","children":{},"count":2},"/tags/design-pattern":{"label":"#design-pattern","children":{},"count":9},"/tags/atomic-css":{"label":"#atomic-css","children":{},"count":1},"/tags/client-side":{"label":"#client-side","children":{},"count":1},"/tags/storage":{"label":"#storage","children":{},"count":1},"/tags/frontend/performance":{"label":"#frontend/performance","children":{},"count":2},"/tags/wai-aria":{"label":"#wai-aria","children":{},"count":1},"/tags/accessibility":{"label":"#accessibility","children":{},"count":4},"/tags/polymorphic-component":{"label":"#polymorphic-component","children":{},"count":1},"/tags/threejs":{"label":"#threejs","children":{},"count":1},"/tags/web-performance":{"label":"#web-performance","children":{},"count":2},"/tags/html":{"label":"#html","children":{},"count":4},"/tags/animation":{"label":"#animation","children":{},"count":1},"/tags/zk-proof":{"label":"#zk-proof","children":{},"count":1},"/tags/guides":{"label":"#guides","children":{},"count":1},"/tags/responsive-design":{"label":"#responsive-design","children":{},"count":1},"/tags/hsl":{"label":"#hsl","children":{},"count":1},"/tags/javascript":{"label":"#javascript","children":{},"count":4},"/tags/css-in-js":{"label":"#css-in-js","children":{},"count":1},"/tags/tip":{"label":"#tip","children":{},"count":1},"/tags/dark-mode":{"label":"#dark-mode","children":{},"count":1},"/tags/multisign-wallet":{"label":"#multisign-wallet","children":{},"count":1},"/tags/virtual-dom":{"label":"#virtual-dom","children":{},"count":1},"/tags/native-modules":{"label":"#native-modules","children":{},"count":1},"/tags/vitejs":{"label":"#vitejs","children":{},"count":1},"/tags/esm":{"label":"#esm","children":{},"count":1},"/tags/tutorial":{"label":"#tutorial","children":{},"count":7},"/tags/modules":{"label":"#modules","children":{},"count":1},"/tags/blockchain-bridge":{"label":"#blockchain-bridge","children":{},"count":1},"/tags/foundational-topics":{"label":"#foundational-topics","children":{},"count":5},"/tags/distributed-systems":{"label":"#distributed-systems","children":{},"count":1},"/tags/pos":{"label":"#pos","children":{},"count":1},"/tags/smart-contract":{"label":"#smart-contract","children":{},"count":1},"/tags/atomic-design":{"label":"#atomic-design","children":{},"count":1},"/tags/a11y":{"label":"#a11y","children":{},"count":1},"/tags/useeffect":{"label":"#useeffect","children":{},"count":1},"/tags/token":{"label":"#token","children":{},"count":2},"/tags/report":{"label":"#report","children":{},"count":8},"/tags/radio":{"label":"#radio","children":{},"count":2},"/tags/wasm":{"label":"#wasm","children":{},"count":2},"/tags/rust":{"label":"#rust","children":{},"count":10},"/tags/concurrency":{"label":"#concurrency","children":{},"count":2},"/tags/parallelism":{"label":"#parallelism","children":{},"count":1},"/tags/engineering/frontend":{"label":"#engineering/frontend","children":{},"count":1},"/tags/tips":{"label":"#tips","children":{},"count":6},"/tags/design":{"label":"#design","children":{},"count":31},"/tags/pm":{"label":"#pm","children":{},"count":2},"/tags/operation":{"label":"#operation","children":{},"count":4},"/tags/operations":{"label":"#operations","children":{},"count":60},"/tags/project":{"label":"#project","children":{},"count":13},"/tags/js":{"label":"#js","children":{},"count":2},"/tags/react.js":{"label":"#react.js","children":{},"count":2},"/tags/scrum":{"label":"#scrum","children":{},"count":2},"/tags/data-structures":{"label":"#data-structures","children":{},"count":2},"/tags/software":{"label":"#software","children":{},"count":5},"/tags/agile":{"label":"#agile","children":{},"count":5},"/tags/vim":{"label":"#vim","children":{},"count":1},"/tags/hiring":{"label":"#hiring","children":{},"count":21},"/tags/handbook":{"label":"#handbook","children":{},"count":47},"/tags/business":{"label":"#business","children":{},"count":5},"/tags/growth":{"label":"#growth","children":{},"count":2},"/tags/monitoring":{"label":"#monitoring","children":{},"count":2},"/tags/upptime":{"label":"#upptime","children":{},"count":1},"/tags/consulting":{"label":"#consulting","children":{},"count":22},"/tags/tech-report":{"label":"#tech-report","children":{},"count":11},"/tags/overleaf":{"label":"#overleaf","children":{},"count":1},"/tags/slide":{"label":"#slide","children":{},"count":1},"/tags/office-hours":{"label":"#office-hours","children":{},"count":31},"/tags/discord":{"label":"#discord","children":{},"count":32},"/tags/fintech":{"label":"#fintech","children":{},"count":16},"/tags/software-development":{"label":"#software-development","children":{},"count":1},"/tags/database-management":{"label":"#database-management","children":{},"count":1},"/tags/ux-ui":{"label":"#ux-ui","children":{},"count":13},"/tags/forward-engineering":{"label":"#forward-engineering","children":{},"count":14},"/tags/career":{"label":"#career","children":{},"count":39},"/tags/fullstack":{"label":"#fullstack","children":{},"count":2},"/tags/real-time":{"label":"#real-time","children":{},"count":1},"/tags/phoenix-live-view":{"label":"#phoenix-live-view","children":{},"count":1},"/tags/timescaledb":{"label":"#timescaledb","children":{},"count":1},"/tags/finance":{"label":"#finance","children":{},"count":1},"/tags/product-design":{"label":"#product-design","children":{},"count":7},"/tags/agents":{"label":"#agents","children":{},"count":4},"/tags/checklist":{"label":"#checklist","children":{},"count":17},"/tags/presentation":{"label":"#presentation","children":{},"count":1},"/tags/labs":{"label":"#labs","children":{},"count":22},"/tags/sql":{"label":"#sql","children":{},"count":4},"/tags/data-modeling":{"label":"#data-modeling","children":{},"count":1},"/tags/knowledge":{"label":"#knowledge","children":{},"count":2},"/tags/updates":{"label":"#updates","children":{},"count":14},"/tags/automata":{"label":"#automata","children":{},"count":1},"/tags/mobile":{"label":"#mobile","children":{},"count":3},"/tags/wala":{"label":"#WALA","children":{},"count":4},"/tags/fnb":{"label":"#fnb","children":{},"count":2},"/tags/film":{"label":"#film","children":{},"count":1},"/tags/error":{"label":"#error","children":{},"count":1},"/tags/community":{"label":"#community","children":{},"count":15},"/tags/startup":{"label":"#startup","children":{},"count":9},"/tags/shares":{"label":"#shares","children":{},"count":1},"/tags/founder":{"label":"#founder","children":{},"count":1},"/tags/entertainment":{"label":"#entertainment","children":{},"count":1},"/tags/log":{"label":"#log","children":{},"count":1},"/tags/metric":{"label":"#metric","children":{},"count":1},"/tags/intent-classification":{"label":"#intent-classification","children":{},"count":1},"/tags/prompting":{"label":"#prompting","children":{},"count":1},"/tags/culture":{"label":"#culture","children":{},"count":12},"/tags/test":{"label":"#test","children":{},"count":1},"/tags/life-at-dwarves, ai-developer, hybrid-work":{"label":"#life-at-dwarves, ai-developer, hybrid-work","children":{},"count":1},"/tags/hybrid-working":{"label":"#hybrid-working","children":{},"count":1},"/tags/guide":{"label":"#guide","children":{},"count":11},"/tags/team":{"label":"#team","children":{},"count":13},"/tags/newsletter":{"label":"#newsletter","children":{},"count":11},"/tags/ai-integration":{"label":"#ai-integration","children":{},"count":1},"/tags/reward":{"label":"#reward","children":{},"count":1},"/tags/ux":{"label":"#UX","children":{},"count":2},"/tags/directory-structure":{"label":"#directory-structure","children":{},"count":2},"/tags/file-management":{"label":"#file-management","children":{},"count":2},"/tags/file-system":{"label":"#file-system","children":{},"count":2},"/tags/permissions":{"label":"#permissions","children":{},"count":1},"/tags/database-modelling":{"label":"#database-modelling","children":{},"count":1},"/tags/nda":{"label":"#NDA","children":{},"count":1},"/tags/compliance":{"label":"#compliance","children":{},"count":2},"/tags/people":{"label":"#people","children":{},"count":27},"/tags/delivery":{"label":"#delivery","children":{},"count":3},"/tags/reporting":{"label":"#reporting","children":{},"count":1},"/tags/engagement":{"label":"#engagement","children":{},"count":2},"/tags/subscription":{"label":"#subscription","children":{},"count":1},"/tags/pricing":{"label":"#pricing","children":{},"count":1},"/tags/product":{"label":"#product","children":{},"count":1},"/tags/erlang":{"label":"#erlang","children":{},"count":1},"/tags/elixir":{"label":"#elixir","children":{},"count":5},"/tags/fsm":{"label":"#fsm","children":{},"count":1},"/tags/gang-of-four":{"label":"#gang-of-four","children":{},"count":9},"/tags/observer-pattern":{"label":"#observer-pattern","children":{},"count":1},"/tags/behavior-pattern":{"label":"#behavior-pattern","children":{},"count":2},"/tags/visitor-design-pattern":{"label":"#visitor-design-pattern","children":{},"count":1},"/tags/ai-powered":{"label":"#ai-powered","children":{},"count":1},"/tags/strategy-design-pattern":{"label":"#strategy-design-pattern","children":{},"count":1},"/tags/local-first":{"label":"#local-first","children":{},"count":1},"/tags/crdt":{"label":"#crdt","children":{},"count":2},"/tags/data-synchronization":{"label":"#data-synchronization","children":{},"count":1},"/tags/data-ownership":{"label":"#data-ownership","children":{},"count":1},"/tags/real-time-collaboration":{"label":"#real-time-collaboration","children":{},"count":1},"/tags/error-handling":{"label":"#error-handling","children":{},"count":1},"/tags/trait":{"label":"#trait","children":{},"count":1},"/tags/data-structure":{"label":"#data-structure","children":{},"count":1},"/tags/bloom-filter":{"label":"#bloom-filter","children":{},"count":1},"/tags/big-o":{"label":"#big-o","children":{},"count":1},"/tags/behavioral-pattern":{"label":"#behavioral-pattern","children":{},"count":1},"/tags/behavior-patterns":{"label":"#behavior-patterns","children":{},"count":2},"/tags/algorithms":{"label":"#algorithms","children":{},"count":1},"/tags/sorting":{"label":"#sorting","children":{},"count":1},"/tags/zettelkasten":{"label":"#zettelkasten","children":{},"count":1},"/tags/amm":{"label":"#amm","children":{},"count":1},"/tags/memo":{"label":"#memo","children":{},"count":3},"/tags/instructions":{"label":"#instructions","children":{},"count":10},"/tags/guideline":{"label":"#guideline","children":{},"count":14},"/tags/ops":{"label":"#ops","children":{},"count":2},"/tags/workflow":{"label":"#workflow","children":{},"count":4},"/tags/recording":{"label":"#recording","children":{},"count":1},"/tags/creational-design-pattern":{"label":"#creational-design-pattern","children":{},"count":1},"/tags/software-design":{"label":"#software-design","children":{},"count":2},"/tags/software-architecture":{"label":"#software-architecture","children":{},"count":3},"/tags/graphical-notation":{"label":"#graphical-notation","children":{},"count":2},"/tags/techecosystem":{"label":"#techecosystem","children":{},"count":1},"/tags/summit":{"label":"#summit","children":{},"count":1},"/tags/energy":{"label":"#energy","children":{},"count":1},"/tags/crypto":{"label":"#crypto","children":{},"count":1},"/tags/content":{"label":"#content","children":{},"count":6},"/tags/investment":{"label":"#investment","children":{},"count":1},"/tags/personal-finance":{"label":"#personal-finance","children":{},"count":1},"/tags/overview":{"label":"#overview","children":{},"count":1},"/tags/dfg":{"label":"#dfg","children":{},"count":6},"/tags/standardization":{"label":"#standardization","children":{},"count":1},"/tags/work-adoption":{"label":"#work-adoption","children":{},"count":1},"/tags/code of conduct":{"label":"#code of conduct","children":{},"count":1},"/tags/communications":{"label":"#communications","children":{},"count":3},"/tags/brain":{"label":"#brain","children":{},"count":1},"/tags/knowledge-base":{"label":"#knowledge-base","children":{},"count":1},"/tags/engineering/data":{"label":"#engineering/data","children":{},"count":5},"/tags/data-pipeline":{"label":"#data-pipeline","children":{},"count":1},"/tags/payment":{"label":"#payment","children":{},"count":2},"/tags/partners":{"label":"#partners","children":{},"count":1},"/tags/cybersecurity":{"label":"#cybersecurity","children":{},"count":2},"/tags/serverless":{"label":"#serverless","children":{},"count":1},"/tags/life-at-dwarves, community-contributor, techie-project":{"label":"#life-at-dwarves, community-contributor, techie-project","children":{},"count":1},"/tags/htmx":{"label":"#htmx","children":{},"count":2},"/tags/brainery":{"label":"#brainery","children":{},"count":2},"/tags/devops":{"label":"#devops","children":{},"count":13},"/tags/google-cloud":{"label":"#google-cloud","children":{},"count":1},"/tags/google-data-studio":{"label":"#google-data-studio","children":{},"count":1},"/tags/google-data-fusion":{"label":"#google-data-fusion","children":{},"count":1},"/tags/reliability":{"label":"#reliability","children":{},"count":3},"/tags/cdap":{"label":"#cdap","children":{},"count":1},"/tags/google-dataproc":{"label":"#google-dataproc","children":{},"count":1},"/tags/hadoop":{"label":"#hadoop","children":{},"count":2},"/tags/streaming":{"label":"#streaming","children":{},"count":1},"/tags/life-at-dwarves, alumni, career-growth":{"label":"#life-at-dwarves, alumni, career-growth","children":{},"count":1},"/tags/bounty":{"label":"#bounty","children":{},"count":2},"/tags/life-at-dwarves, backend-engineer, continuous-learning":{"label":"#life-at-dwarves, backend-engineer, continuous-learning","children":{},"count":1},"/tags/ecommerce":{"label":"#ecommerce","children":{},"count":2},"/tags/dropshipping":{"label":"#dropshipping","children":{},"count":1},"/tags/work":{"label":"#work","children":{},"count":14},"/tags/internal":{"label":"#internal","children":{},"count":11},"/tags/discussion":{"label":"#discussion","children":{},"count":6},"/tags/event":{"label":"#event","children":{},"count":6},"/tags/catchup":{"label":"#catchup","children":{},"count":5},"/tags/home":{"label":"#home","children":{},"count":1},"/tags/tauri":{"label":"#tauri","children":{},"count":1},"/tags/life-at-dwarves, backend-engineer, community-building":{"label":"#life-at-dwarves, backend-engineer, community-building","children":{},"count":1},"/tags/life-at-dwarves, backend-engineer, personal-development":{"label":"#life-at-dwarves, backend-engineer, personal-development","children":{},"count":1},"/tags/engineer":{"label":"#engineer","children":{},"count":1},"/tags/estimation":{"label":"#estimation","children":{},"count":1},"/tags/code-generation":{"label":"#code-generation","children":{},"count":1},"/tags/typesafe":{"label":"#typesafe","children":{},"count":1},"/tags/internship":{"label":"#internship","children":{},"count":2},"/tags/life-at-dwarves, backend-engineer, teamwork":{"label":"#life-at-dwarves, backend-engineer, teamwork","children":{},"count":1},"/tags/workshop":{"label":"#workshop","children":{},"count":1},"/tags/demo":{"label":"#demo","children":{},"count":1},"/tags/webrtc":{"label":"#webrtc","children":{},"count":1},"/tags/video-streaming":{"label":"#video-streaming","children":{},"count":1},"/tags/performance-review":{"label":"#performance-review","children":{},"count":1},"/tags/assessment":{"label":"#assessment","children":{},"count":1},"/tags/tech-radar":{"label":"#tech-radar","children":{},"count":1},"/tags/evaluating-tech":{"label":"#evaluating-tech","children":{},"count":1},"/tags/process":{"label":"#process","children":{},"count":8},"/tags/life-at-dwarves, product-executive, personal-growth":{"label":"#life-at-dwarves, product-executive, personal-growth","children":{},"count":1},"/tags/life-at-dwarves, frontend-engineer, community-member":{"label":"#life-at-dwarves, frontend-engineer, community-member","children":{},"count":1},"/tags/distributed-system":{"label":"#distributed-system","children":{},"count":1},"/tags/data-types":{"label":"#data-types","children":{},"count":1},"/tags/life-at-dwarves, communication-specialist, remote-work":{"label":"#life-at-dwarves, communication-specialist, remote-work","children":{},"count":1},"/tags/life-at-dwarves, qa-engineer, mentorship":{"label":"#life-at-dwarves, qa-engineer, mentorship","children":{},"count":1},"/tags/life-at-dwarves, qa-engineer, quality-standards":{"label":"#life-at-dwarves, qa-engineer, quality-standards","children":{},"count":1},"/tags/guidline":{"label":"#guidline","children":{},"count":1},"/tags/budgeting":{"label":"#budgeting","children":{},"count":3},"/tags/client":{"label":"#client","children":{},"count":1},"/tags/learning":{"label":"#learning","children":{},"count":3},"/tags/system design":{"label":"#system design","children":{},"count":1},"/tags/playbook":{"label":"#playbook","children":{},"count":3},"/tags/life-at-dwarves, backend-engineer, learning-culture":{"label":"#life-at-dwarves, backend-engineer, learning-culture","children":{},"count":1},"/tags/life-at-dwarves, backend-engineer, mentorship":{"label":"#life-at-dwarves, backend-engineer, mentorship","children":{},"count":3},"/tags/life-at-dwarves":{"label":"#life-at-dwarves","children":{},"count":2},"/tags/backend-engineer":{"label":"#backend-engineer","children":{},"count":1},"/tags/remote-work":{"label":"#remote-work","children":{},"count":1},"/tags/life-at-dwarves, frontend-engineer, community-building":{"label":"#life-at-dwarves, frontend-engineer, community-building","children":{},"count":1},"/tags/australia":{"label":"#australia","children":{},"count":1},"/tags/sargable-queries":{"label":"#sargable-queries","children":{},"count":1},"/tags/zookeeper":{"label":"#zookeeper","children":{},"count":1},"/tags/kafka":{"label":"#kafka","children":{},"count":1},"/tags/sequential-reads":{"label":"#sequential-reads","children":{},"count":1},"/tags/sequential-writes":{"label":"#sequential-writes","children":{},"count":1},"/tags/random-reads":{"label":"#random-reads","children":{},"count":1},"/tags/random-writes":{"label":"#random-writes","children":{},"count":1},"/tags/url-redirect":{"label":"#url-redirect","children":{},"count":1},"/tags/url-rewrite":{"label":"#url-rewrite","children":{},"count":1},"/tags/http":{"label":"#http","children":{},"count":1},"/tags/seo":{"label":"#SEO","children":{},"count":1},"/tags/life-at-dwarves, frontend-engineer, community-learning":{"label":"#life-at-dwarves, frontend-engineer, community-learning","children":{},"count":1},"/tags/life-at-dwarves, engineer, work-culture":{"label":"#life-at-dwarves, engineer, work-culture","children":{},"count":1},"/tags/life-at-dwarves, software-engineer, mentorship":{"label":"#life-at-dwarves, software-engineer, mentorship","children":{},"count":1},"/tags/nghenhan":{"label":"#nghenhan","children":{},"count":1},"/tags/hedge-foundation":{"label":"#hedge-foundation","children":{},"count":1},"/tags/remote-caching":{"label":"#remote-caching","children":{},"count":1},"/tags/deployment":{"label":"#deployment","children":{},"count":1},"/tags/target-branch":{"label":"#target-branch","children":{},"count":1},"/tags/vercel":{"label":"#vercel","children":{},"count":1},"/tags/research":{"label":"#research","children":{},"count":2},"/tags/aws":{"label":"#aws","children":{},"count":1},"/tags/aws-s3":{"label":"#aws-s3","children":{},"count":1},"/tags/localstack":{"label":"#localstack","children":{},"count":1},"/tags/vietnam":{"label":"#vietnam","children":{},"count":1},"/tags/write-heavy":{"label":"#write-heavy","children":{},"count":1},"/tags/inventory-platform":{"label":"#inventory-platform","children":{},"count":1},"/tags/scalability":{"label":"#scalability","children":{},"count":1},"/tags/doordash":{"label":"#doordash","children":{},"count":1},"/tags/low-latency":{"label":"#low-latency","children":{},"count":1},"/tags/sharing":{"label":"#sharing","children":{},"count":1},"/tags/management":{"label":"#management","children":{},"count":12},"/tags/teamwork":{"label":"#teamwork","children":{},"count":1},"/tags/multi-column-index":{"label":"#multi-column-index","children":{},"count":1},"/tags/index":{"label":"#index","children":{},"count":1},"/tags/composite-index":{"label":"#composite-index","children":{},"count":1},"/tags/components":{"label":"#components","children":{},"count":1},"/tags/technicaldebt":{"label":"#technicaldebt","children":{},"count":1},"/tags/projectmanagement":{"label":"#projectmanagement","children":{},"count":1},"/tags/email":{"label":"#email","children":{},"count":22},"/tags/decoder":{"label":"#decoder","children":{},"count":1},"/tags/json":{"label":"#json","children":{},"count":1},"/tags/materialized-view":{"label":"#materialized-view","children":{},"count":1},"/tags/data-warehouse":{"label":"#data-warehouse","children":{},"count":1},"/tags/mapreduce":{"label":"#mapreduce","children":{},"count":1},"/tags/distributed":{"label":"#distributed","children":{},"count":3},"/tags/form":{"label":"#form","children":{},"count":1},"/tags/uilibraries":{"label":"#uilibraries","children":{},"count":1},"/tags/migrations":{"label":"#migrations","children":{},"count":1},"/tags/behavior-driven-development":{"label":"#behavior-driven-development","children":{},"count":1},"/tags/ubiquitous-language":{"label":"#ubiquitous-language","children":{},"count":1},"/tags/forward-proxy":{"label":"#forward-proxy","children":{},"count":1},"/tags/secret":{"label":"#secret","children":{},"count":1},"/tags/kubeseal":{"label":"#kubeseal","children":{},"count":1},"/tags/sops":{"label":"#sops","children":{},"count":1},"/tags/feature-flags":{"label":"#feature-flags","children":{},"count":1},"/tags/progressive-delivery":{"label":"#progressive-delivery","children":{},"count":1},"/tags/dora":{"label":"#dora","children":{},"count":1},"/tags/apprenticeship":{"label":"#apprenticeship","children":{},"count":3},"/tags/life-at-dwarves, apprenticeship, backend-engineer":{"label":"#life-at-dwarves, apprenticeship, backend-engineer","children":{},"count":1},"/tags/remote":{"label":"#remote","children":{},"count":7},"/tags/showcase":{"label":"#showcase","children":{},"count":1},"/tags/life-at-dwarves, backend-engineer, golang":{"label":"#life-at-dwarves, backend-engineer, golang","children":{},"count":1},"/tags/life-at-dwarves, operations, techie-story":{"label":"#life-at-dwarves, operations, techie-story","children":{},"count":1},"/tags/life-at-dwarves, devops-engineer, personal-growth":{"label":"#life-at-dwarves, devops-engineer, personal-growth","children":{},"count":1},"/tags/life-at-dwarves, senior-engineer, mentorship":{"label":"#life-at-dwarves, senior-engineer, mentorship","children":{},"count":1},"/tags/quant":{"label":"#quant","children":{},"count":1},"/tags/writing":{"label":"#writing","children":{},"count":1},"/tags/english":{"label":"#english","children":{},"count":1},"/tags/life-at-dwarves, data-engineer, remote-work":{"label":"#life-at-dwarves, data-engineer, remote-work","children":{},"count":1},"/tags/apprentice":{"label":"#apprentice","children":{},"count":1},"/tags/life-at-dwarves, ui-designer, design-communication":{"label":"#life-at-dwarves, ui-designer, design-communication","children":{},"count":1},"/tags/blue-green-deployement":{"label":"#blue-green-deployement","children":{},"count":1},"/tags/deployment-strategy":{"label":"#deployment-strategy","children":{},"count":1},"/tags/production-traffic":{"label":"#production-traffic","children":{},"count":1},"/tags/resiliency":{"label":"#resiliency","children":{},"count":1},"/tags/life-at-dwarves, engineering-manager, mentorship":{"label":"#life-at-dwarves, engineering-manager, mentorship","children":{},"count":1},"/tags/meeting":{"label":"#meeting","children":{},"count":3},"/tags/us":{"label":"#us","children":{},"count":4},"/tags/funding":{"label":"#funding","children":{},"count":2},"/tags/ventures":{"label":"#ventures","children":{},"count":3},"/tags/mbti":{"label":"#mbti","children":{},"count":6},"/tags/intj":{"label":"#intj","children":{},"count":1},"/tags/istp":{"label":"#istp","children":{},"count":1},"/tags/estj":{"label":"#estj","children":{},"count":1},"/tags/istj":{"label":"#istj","children":{},"count":1},"/tags/personalities":{"label":"#personalities","children":{},"count":1},"/tags/early-stage":{"label":"#early-stage","children":{},"count":3},"/tags/design-thinking":{"label":"#design-thinking","children":{},"count":2},"/tags/healthcare":{"label":"#healthcare","children":{},"count":1},"/tags/browser-extension":{"label":"#browser-extension","children":{},"count":2},"/tags/git":{"label":"#git","children":{},"count":2},"/tags/life-at-dwarves, software-engineer, growth-mindset":{"label":"#life-at-dwarves, software-engineer, growth-mindset","children":{},"count":1},"/tags/life-at-dwarves, backend-engineer, career-change":{"label":"#life-at-dwarves, backend-engineer, career-change","children":{},"count":1},"/tags/marketplace":{"label":"#marketplace","children":{},"count":2},"/tags/real-estate":{"label":"#real-estate","children":{},"count":1},"/tags/nocode":{"label":"#nocode","children":{},"count":1},"/tags/hospitality":{"label":"#hospitality","children":{},"count":1},"/tags/ride-hailing":{"label":"#ride-hailing","children":{},"count":1},"/tags/iot":{"label":"#iot","children":{},"count":1},"/tags/macos":{"label":"#macos","children":{},"count":3},"/tags/swift":{"label":"#swift","children":{},"count":7},"/tags/partnership":{"label":"#partnership","children":{},"count":1},"/tags/travel":{"label":"#travel","children":{},"count":1},"/tags/innovation":{"label":"#innovation","children":{},"count":1},"/tags/purpose":{"label":"#purpose","children":{},"count":2},"/tags/delegate":{"label":"#delegate","children":{},"count":2},"/tags/transparency":{"label":"#transparency","children":{},"count":1},"/tags/event-sourcing":{"label":"#event-sourcing","children":{},"count":1},"/tags/sdlc":{"label":"#sdlc","children":{},"count":1},"/tags/life-at-dwarves, frontend-engineer, design-engineering":{"label":"#life-at-dwarves, frontend-engineer, design-engineering","children":{},"count":1},"/tags/modeling":{"label":"#modeling","children":{},"count":1},"/tags/life-at-dwarves, software-engineer, engineering-values":{"label":"#life-at-dwarves, software-engineer, engineering-values","children":{},"count":1},"/tags/burn-out":{"label":"#burn-out","children":{},"count":1},"/tags/goal":{"label":"#goal","children":{},"count":2},"/tags/license":{"label":"#license","children":{},"count":1},"/tags/template":{"label":"#template","children":{},"count":20},"/tags/k8s":{"label":"#k8s","children":{},"count":1},"/tags/clojure":{"label":"#clojure","children":{},"count":1},"/tags/employee":{"label":"#employee","children":{},"count":1},"/tags/onboarding":{"label":"#onboarding","children":{},"count":1},"/tags/assets":{"label":"#assets","children":{},"count":1},"/tags/marketing":{"label":"#marketing","children":{},"count":1},"/tags/human-resource":{"label":"#human-resource","children":{},"count":1},"/tags/dcos":{"label":"#dcos","children":{},"count":5},"/tags/okr":{"label":"#okr","children":{},"count":1},"/tags/oss":{"label":"#oss","children":{},"count":1},"/tags/policy":{"label":"#policy","children":{},"count":1}}}},"content":"<p><strong>Topic Highlights</strong></p>\n<ul>\n<li><strong>Go Weekly #16</strong>: Phat discussed concurrent data structures in Go, focusing on <code>sync.Map</code>. He explored its structure, use cases, and performance trade-offs in high-read, low-write scenarios. He also touched on garbage collection issues reported by the Go team.</li>\n<li><strong>Generative AI UX Design Patterns</strong>: Nam presented on UX design patterns for AI integration, covering System Scope Relationship, Spatial Relationship, and Functional Relationship. He explained how AI can be incorporated at various levels in digital products and discussed different ways to present AI features in user interfaces.</li>\n<li><strong>Yelp Usecase AI</strong>: Dat presented real-world AI use cases from Yelp, explaining how AI is used for recommendation systems, text editing, and image summarization. He explored AI applications in generating datasets, spam detection, and auto-generating short video reviews for restaurants.</li>\n<li><strong>LLM Pattern</strong>: Hoang introduced design patterns for integrating LLMs (Large Language Models) into applications. Key patterns included in-context learning, data preprocessing, and multi-agent collaboration, highlighting their practical use in AI-powered systems.</li>\n<li><strong>Dify Git Analyze</strong>: Cat demonstrated a Git repository analysis tool built using Dify. The tool scrapes content from repositories and supports diagram generation for code structure analysis, with a focus on optimizing the knowledge retrieval process in large datasets</li>\n</ul>\n<hr>\n<p><strong>Vietnamese Transcript</strong></p>\n<p><strong>0:28</strong> Chủ đề hôm nay vẫn có Go Weekly, và Nam đang thử nghiệm phần commentary về thiết kế hàng tuần. Chúng ta sẽ theo dõi trong vài tuần tới xem nội dung như thế nào.</p>\n<p><strong>11:19</strong> Nam sẽ trình bày tiếp cho anh em, và sau đó sẽ có một vài bài của Hoàng, Cát, Đạt. Chúng ta đang nghiên cứu về các trường hợp sử dụng mà các công ty khác đang áp dụng, hoặc các công cụ mà dev đang sử dụng, và có thể sẽ mở một bài chia sẻ trong tuần này hoặc tuần sau. Bài hôm nay sẽ xoay quanh việc tạo một nút thiết kế UX. Trước đây, có rất nhiều câu hỏi về phạm vi mà AI đang áp dụng và vai trò của nó sẽ như thế nào – liệu nó chỉ đóng góp như một thành phần nhỏ riêng lẻ hay là cả một ứng dụng trong các sản phẩm số. Hôm nay, em sẽ giải đáp thắc mắc đó, tức là AI đang đóng vai trò như thế nào và cách thức hoạt động của nó ra sao.</p>\n<p><strong>12:11</strong> Đầu tiên, em sẽ nói về \"System Scope Relationship.\" Hình ảnh này sẽ mô tả AI được tích hợp vào các hệ thống ở nhiều cấp độ khác nhau, từ một thành phần nhỏ lẻ đến một hệ sinh thái toàn diện hơn. AI có thể chỉ là một phần nhỏ trong một thành phần hoặc có thể phát triển thành các tính năng lớn hơn, giúp tự động hóa nhiều chức năng. Điều này sẽ giúp người dùng trải nghiệm ứng dụng dễ dàng hơn. AI có thể đóng vai trò trong bất kỳ phần nào của sản phẩm số – từ thành phần, luồng xử lý, tính năng cho đến toàn bộ ứng dụng, hoặc thậm chí là một nền tảng hoặc hệ sinh thái.</p>\n<p><strong>12:53</strong> Ví dụ, trong một ứng dụng, AI có thể đóng vai trò một tính năng nhỏ, giúp người dùng thao tác nhanh hơn thay vì phải làm thủ công. Hoặc AI có thể là toàn bộ một ứng dụng như ChatGPT, nơi toàn bộ ứng dụng được xây dựng trên nền tảng AI, phục vụ cho một mục đích nhất định. Hoặc AI có thể là một nền tảng như Rewind AI, với nhiều tính năng hỗ trợ AI cho nhiều công việc khác nhau trong cùng một ứng dụng. Đây là phạm vi của AI trong các sản phẩm hiện nay.</p>\n\n<p><strong>13:39</strong> Tiếp theo, về \"Spatial Relationship,\" phần này giúp chúng ta hiểu về cách tính năng AI được bố trí và sắp xếp trong giao diện người dùng (UI). Có nhiều cách để tích hợp AI vào thiết kế, và quan trọng là làm sao để bố trí chúng sao cho hợp lý, tối ưu trải nghiệm người dùng mà không gây rối mắt hay phức tạp giao diện. Spatial Relationship ảnh hưởng trực tiếp đến trải nghiệm người dùng. Ví dụ, AI có thể hoạt động độc lập hoặc song song với các tính năng khác, nhưng vẫn giữ không gian riêng của mình. Khi hiểu được các mối quan hệ này, chúng ta có thể chọn cách sử dụng và sắp xếp tính năng AI một cách tối ưu, không gây phân tâm cho người dùng.</p>\n<p><strong>15:11</strong> Có sáu cách để trình bày tính năng AI, bao gồm:</p>\n<ol>\n<li><strong>Separate</strong>: AI hoạt động độc lập.</li>\n<li><strong>Alongside</strong>: AI được đặt bên cạnh các tính năng khác.</li>\n<li><strong>Layer</strong>: AI hoạt động dưới dạng lớp phủ.</li>\n<li><strong>Integrated Parent</strong>: AI đóng vai trò chính trong điều hướng hoặc quản lý nội dung chính.</li>\n<li><strong>Integrated Child</strong>: AI đóng vai trò nhỏ hơn, bổ trợ cho tính năng chính.</li>\n<li><strong>Point</strong>: AI chỉ xuất hiện như một biểu tượng nhỏ, giúp người dùng hiểu thêm về cách nó hoạt động.</li>\n</ol>\n<p><strong>16:41</strong> Tiếp theo là \"Functional Relationship,\" phần này mô tả các mối quan hệ chức năng giữa AI và các tính năng khác trong hệ thống. AI có thể tồn tại độc lập nhưng vẫn adapt (thích nghi) với các nội dung và tính năng của hệ thống ở mức cao hơn. AI có thể tích hợp với các tính năng hiện có để cải thiện hiệu suất, thay vì người dùng phải thao tác thủ công. Khi hiểu rõ cách hoạt động chức năng của AI, chúng ta sẽ xác định rõ vai trò của nó trong ứng dụng và thiết kế để các hành động chức năng của nó không bị xung đột, cũng như không làm gián đoạn luồng sử dụng của người dùng.</p>\n<p><strong>17:28</strong> Có sáu cách để mô tả mối quan hệ chức năng của AI:</p>\n<ol>\n<li><strong>Separate</strong>: AI hoạt động riêng biệt.</li>\n<li><strong>Aware Of</strong>: AI tách biệt nhưng có khả năng nhận biết các thay đổi trong tính năng chính.</li>\n<li><strong>Acting Up</strong>: AI tương tác qua lại giữa các tính năng.</li>\n<li><strong>Feature Incorporate</strong>: AI được tích hợp như một phần của một tính năng hiện có.</li>\n<li><strong>Usage</strong>: AI được sử dụng theo cách mà nó tương tác với các phần khác trong ứng dụng.</li>\n<li><strong>Usage Conventionally</strong>: AI tương tác hai chiều với các tính năng khác một cách trực tiếp.</li>\n</ol>\n<p><strong>18:14</strong> Nó sẽ không ảnh hưởng trực tiếp đến tính năng chính, nhưng nó sẽ có tác động qua lại với AI và từ đó giúp cải thiện tính năng chính. Đây là một ví dụ cụ thể hơn về cách sử dụng của nó, chẳng hạn như trong code này có thể generate một panel bên phải.</p>\n<p>Tiếp theo là <strong>Acting Up</strong>, nghĩa là hai bên sẽ có tác động qua lại, có thể trao đổi dữ liệu qua lại với nhau. Ví dụ, tính năng A có thể hiểu được dữ liệu từ tính năng B và ngược lại. Các dữ liệu này sẽ được trao đổi qua lại liên tục để cải thiện sự tương tác.</p>\n<p>Tiếp theo là <strong>Feature Incorporate</strong>, nghĩa là AI được tích hợp trực tiếp vào các tính năng hiện có của ứng dụng. Cuối cùng là <strong>Usage Conventionally</strong>, nghĩa là AI sẽ tương tác theo cách thông thường với các tính năng khác, giống như cách các ứng dụng truyền thống hoạt động.</p>\n<p>Ví dụ như khi bạn dùng một ứng dụng và có nhiều tính năng khác nhau, AI sẽ đóng vai trò trong các phần như feature, nhưng không phải lúc nào cũng là phần chính, mà sẽ đóng vai trò bổ trợ.</p>\n<p><strong>19:06</strong> Ví dụ khác là ứng dụng Quora hay các ứng dụng khác, AI sẽ có nhiều tính năng nhỏ được tích hợp vào, như kiểu gợi ý trả lời câu hỏi, giúp người dùng thực hiện các tác vụ dễ dàng hơn. Vậy là nãy giờ em đã đi qua ba phần chính:</p>\n<ol>\n<li><strong>System Scope</strong>: Giới thiệu cách AI tích hợp vào sản phẩm.</li>\n<li><strong>Spatial Relationship</strong>: Giới thiệu cách sắp xếp AI trong giao diện người dùng.</li>\n<li><strong>Functional Relationship</strong>: Giới thiệu các mối quan hệ chức năng giữa AI và các tính năng khác.</li>\n</ol>\n<p>Những phần này giúp tối ưu hóa sản phẩm, cải thiện trải nghiệm người dùng và nâng cao hiệu quả cho ứng dụng AI.</p>\n<p><strong>19:57</strong> Điều này rất quan trọng bởi vì nếu mình hiểu rõ cách áp dụng AI, tính năng mình làm sẽ mang lại nhiều giá trị hơn cho người dùng. Ví dụ mà em quên chưa nhắc đến là phần \"separate.\" Em đã đưa ra một số ví dụ, nhưng để quay lại một chút về \"separate\" – tính năng AI hoạt động độc lập. Mình có thể xem xét trường hợp Microsoft có một cái slider để generate hình ảnh song song với tính năng khác. Hoặc với một ứng dụng như Shopee, AI sẽ đóng vai trò hỗ trợ bên cạnh tính năng chính của ứng dụng.</p>\n<p><strong>20:53</strong> Đó là những ví dụ minh họa cho việc sắp xếp và bố trí AI trong giao diện và sản phẩm. Anh Thành có thấy phần này như thế nào? Em thấy nó giống với các patterns thông thường trong thiết kế.</p>\n<p><strong>22:01</strong> Anh Thành: Đúng rồi, những cái này là các mẫu patterns mình hay dùng trong việc thiết kế ứng dụng AI, hoặc khi tích hợp AI vào một ứng dụng hoặc sản phẩm riêng biệt. Về cơ bản, nó là những cấu trúc quen thuộc để mình hiểu rõ hơn về cách áp dụng AI. Em có thể phân loại, chia nhỏ chúng ra thành những tính năng nhỏ hơn. Phần này rất rõ ràng.</p>\n<p><strong>23:31</strong> Cảm ơn Nam. Ok, tiếp theo là bài của Hoàng và Đạt nhé.</p>\n<p>Hôm nay, em sẽ giới thiệu một bài gọi là \"AI Button trong các ứng dụng LLM.\" Trước khi vào bài, em sẽ nói qua về nội dung và agenda. Đầu tiên là chúng ta sẽ tìm hiểu về các design patterns liên quan đến AI Button. Những cái pattern này được áp dụng trong nhiều ứng dụng khác nhau. Em sẽ lấy ra những cái phổ biến và dễ hiểu nhất để giới thiệu cho mọi người.</p>\n<p><strong>24:35</strong> Bài này sẽ xoay quanh việc sử dụng ứng dụng AI trong các sản phẩm số. Ứng dụng này tận dụng sức mạnh của các mô hình AI để giải quyết các bài toán cụ thể hoặc hỗ trợ người dùng trong các tác vụ. Khi sử dụng LLM, nhiều người có thể gặp vấn đề là mô hình không đưa ra đúng kết quả như mong đợi. Điều này là do bản chất của các mô hình này chỉ dựa trên khả năng phản hồi dựa trên chuỗi dữ liệu. Có nhiều cách để giải quyết vấn đề này. Một trong những cách tốn kém nhất là phải điều chỉnh lại toàn bộ mô hình từ đầu. Điều này có thể mất nhiều thời gian và nguồn lực.</p>\n\n<p><strong>25:15</strong> Mình có một cách gọi là <strong>in-context learning</strong>, có nghĩa là AI có thể học trực tiếp ngay trong ngữ cảnh hiện tại khi bạn đang sử dụng nó. Đây là một kỹ thuật như là few-shot learning hoặc zero-shot learning, giúp AI tự học mà không cần phải được huấn luyện lại từ đầu. Ví dụ, bạn chỉ cần cho AI một vài ví dụ nhỏ trong ngữ cảnh và nó sẽ tự điều chỉnh cách hoạt động của mình dựa trên những gì được cung cấp. Thay vì phải retrain toàn bộ mô hình, cách này giúp tiết kiệm thời gian và tài nguyên rất nhiều, và nó vẫn đảm bảo AI có thể học từ ngữ cảnh cụ thể mà bạn cung cấp.</p>\n<p><strong>25:52</strong> Với trường hợp này, <strong>in-context learning</strong> được sử dụng rất nhiều trong <strong>prompt engineering</strong>. Mọi người sẽ cung cấp các ví dụ có sẵn trực tiếp vào prompt và mô hình sẽ học từ những ví dụ đó để tạo ra các kết quả tiếp theo. Đó là ý tưởng chính của in-context learning. Về cơ bản, thiết kế sẽ hoạt động như thế này: bạn có một truy vấn, sau đó bạn xây dựng prompt với các ví dụ cần thiết và dữ liệu few-shot learning, rồi bạn đưa nó qua mô hình, mô hình sẽ trả về kết quả dựa trên các ví dụ đó. Tuy nhiên, nó không chỉ dừng lại ở các ví dụ, mà còn bao gồm rất nhiều yếu tố khác.</p>\n<p><strong>26:37</strong> Nhìn rộng hơn, in-context learning liên quan đến việc cung cấp ngữ cảnh vào prompt bằng cách truyền vào các thông tin mà mô hình không có sẵn. Vì đây là một mô hình được huấn luyện trước, kiến thức của nó bị giới hạn, vì vậy bạn truyền thêm thông tin vào ngữ cảnh và prompt để mô hình học trong quá trình tạo ra kết quả. Ví dụ, trong chẩn đoán hình ảnh y khoa, mô hình có thể không có đủ kiến thức chuyên môn. Vì vậy, bạn cung cấp kiến thức đó vào ngữ cảnh và prompt để mô hình học trong quá trình tạo ra kết quả. Đó là cốt lõi của in-context learning.</p>\n<p>Tiếp theo là nút thiết kế thứ hai quan trọng, được gọi là <strong>data preprocessing/ editing</strong>.</p>\n<p><strong>27:54</strong> Phần này miêu tả quy trình chuẩn bị dữ liệu cho mô hình ngôn ngữ (LM). Như mọi người biết, LM hoạt động dựa trên các cơ sở dữ liệu vector, sử dụng so sánh vector để tìm các điểm dữ liệu tương tự. Quy trình này thường liên quan đến việc xử lý dữ liệu đa phương tiện và các loại thông tin khác nhau. Để đảm bảo đầu ra là tối ưu, việc áp dụng các bước xử lý trước dữ liệu là rất quan trọng. Ví dụ, bạn có thể xử lý trước văn bản bằng cách lọc ra các chi tiết không cần thiết để làm ngắn lại, hoặc với hình ảnh và âm thanh, bạn có thể loại bỏ nhiễu hoặc nén dữ liệu để giảm kích thước trước khi đưa qua mô hình ngôn ngữ.</p>\n<p><strong>29:19</strong> Việc xử lý trước hoặc chỉnh sửa dữ liệu giúp mô hình hoạt động hiệu quả hơn. Có nhiều cách để xử lý trước, tuỳ thuộc vào loại dữ liệu hoặc ngữ cảnh. Bạn sẽ thực hiện điều này dựa trên các yêu cầu cụ thể. Nút thiết kế tiếp theo mà tôi muốn đề cập đến là một thiết kế thường được sử dụng, mặc dù có nhiều tên gọi khác nhau. Tôi gọi nó là <strong>example agent</strong>. Đây là một thiết kế thường thấy khi bạn muốn truy vấn của mình đi qua nhiều ngữ cảnh khác nhau. Ví dụ, nếu bạn có một ứng dụng đánh giá bài viết, bạn có thể cho bài viết đó đi qua một đường ống nơi mỗi agent đánh giá bài viết từ một góc độ khác nhau.</p>\n<p><strong>30:11</strong> Một agent có thể đánh giá bài viết từ góc nhìn của một nhà văn, một agent khác có thể từ một góc nhìn khác. Sau khi đi qua tất cả các agent này, sẽ có một lớp tổng hợp cuối cùng để kết hợp hoặc xử lý các kết quả đó, và cuối cùng cung cấp cho người dùng một kết quả tổng hợp. Thiết kế này thường thấy trong các hệ thống đánh giá, nơi bạn đánh giá kết quả từ các mô hình khác nhau và chọn ra kết quả tốt nhất dựa trên các điều kiện đã được thiết lập trước.</p>\n<p><strong>30:55</strong> Nút thiết kế tiếp theo, gọi là <strong>agentic button</strong>. Vậy agentic có nghĩa là gì? Trong ngữ cảnh của các mô hình ngôn ngữ (LMs), <strong>agentic LMs</strong> ám chỉ việc nâng cấp khả năng của mô hình. Vì mô hình chỉ biết những gì nằm trong dữ liệu huấn luyện của nó, chúng ta sẽ nâng cấp nó để tăng cường sức mạnh của nó và giảm thiểu sự can thiệp của con người. Thiết kế này giúp hệ thống tự động hoá nhiều hơn, cho phép nó hoạt động với ít sự can thiệp của con người hơn.</p>\n<p><strong>32:24</strong> Thiết kế này có một số thành phần chính giúp bạn đạt được mức độ tự động hóa này. Có bốn thành phần chính: <strong>reflection</strong>, <strong>planning</strong>, <strong>execution</strong>, và <strong>multi-collaboration</strong>. Mỗi thành phần này đều giúp hệ thống của bạn trở nên tự động hóa hơn. Đầu tiên, chúng ta hãy nói về <strong>reflection</strong>. Reflection liên quan đến việc đánh giá kết quả ban đầu của mô hình dựa trên một tiêu chí hoặc một chỉ số cụ thể để xác định xem kết quả đó đã được tối ưu hóa chưa. Nếu chưa, hệ thống sẽ điều chỉnh và lặp lại quá trình này, tiếp tục tạo ra kết quả cho đến khi đạt được kết quả tối ưu.</p>\n<p><strong>33:06</strong> Reflection giúp giảm thiểu sự can thiệp của con người vì thay vì tạo ra một kết quả ban đầu không đáp ứng mong đợi của bạn, hệ thống sẽ tinh chỉnh dựa trên các tiêu chí đã được thiết lập trước, cuối cùng đưa ra một kết quả chính xác hơn mà không cần điều chỉnh thủ công.</p>\n<p>Reflection button này có nghĩa là nó sẽ đánh giá cái output ban đầu của một con AI, rồi nó sẽ đánh giá dựa theo một tiêu chuẩn nào đó hoặc là một cái chỉ số nào đó để xem là cái kết quả này đã tối ưu chưa. Nếu chưa tối ưu nó sẽ thêm thắt một chút và nó sẽ chạy vòng lại con AI đó để nó tạo ra kết quả khác cho tới khi nào đạt được kết quả tối ưu nó sẽ trả cho mình cái kết quả cuối cùng. cái này nó sẽ giúp giảm thiểu việc con người phải can thiệp vào quá trình làm việc, bởi vì nếu mà output đầu tiên không đúng ý mình, mình không cần phải tự chỉnh lại nữa mà nó sẽ tự tối ưu.</p>\n<p><strong>33:42</strong> Button thứ hai là tool. Tool có thể là external, nó có thể là external API hoặc là những cái function mà mọi người code. Những cái tool này được sử dụng để cho model có thể lấy được những knowledge từ thế giới bên ngoài, những real-time knowledge, những external resource mà nó không được train sẵn. Như OpenAI hay là Claude đều có hỗ trợ. Khi đó, con model có thể tự biết khi nào cần gọi tool dựa vào cái description mà mọi người viết trên cái tool đó. Model sẽ tự biết cách lấy và extract thông tin từ tool, rồi trả về cho con LM để nó generate ra output.</p>\n<p><strong>34:30</strong> Kế tiếp là planning. Planning button có nghĩa là mọi người cho con LM có khả năng lập kế hoạch, để tránh việc phải prompt đi prompt lại nhiều lần. Ví dụ, nếu có một task phức tạp, mình sẽ có một cái prompt lớn cho nó plan ra tất cả các step mà nó cần làm theo kiểu step by step. Cách này sẽ cho nó làm những việc nhỏ trước, rồi cuối cùng kết hợp lại thành một cái task lớn. Cái kiểu planning design này có nhiều biến thể, và đây là biến thể đơn giản nhất: lập kế hoạch xong rồi làm từng bước một.</p>\n<p><strong>35:10 C</strong>uối cùng là multi-collaboration. Cái này em đã present cách đây một tháng rồi. Nói chung, nó giống như kiểu là AI giỏi việc nào làm việc đó. Mình có một cái context đúng không? mình chia nó ra, rồi đưa qua từng người. Người nào giỏi việc đó nó sẽ giải quyết việc đó, xong rồi pass qua con agent tiếp theo. Cứ thế, cuối cùng nó sẽ complete được cái requirement. Cái design này sử dụng tính chất divide and conquer khá nhiều. Chia việc lớn thành việc nhỏ, rồi đưa việc nhỏ cho người giỏi chuyên môn. Đây là một cái design button mà em thấy khá nhiều nơi bên ngoài sử dụng.</p>\n<p><strong>36:24</strong> Đó là những design button mà em thấy nhiều nơi sử dụng và hiểu nhất. Em đã trình bày xong. Mọi người có câu hỏi gì không?</p>\n<p><strong>37:10</strong> Hoàng, em nói lại cái phần planning, để confirm lại cái comment của anh Bảo. Nó giống như là kiểu đọc cái prompt đúng không? Nó sẽ hiểu cái prompt của anh trước, xong rồi nó sẽ chia cái prompt ra thành những cái nhỏ hơn, xong rồi nó sẽ có những con worker, có thể là những IDE worker hoặc là những cái prompt nhỏ để nó hoàn thành task đó. Đúng không?</p>\n<p><strong>37:40</strong> Đúng rồi, anh có thể hiểu như vậy. Mình có thể chia prompt ra, ví dụ như là một task phức tạp, nó sẽ chia ra nhiều cái plan nhỏ. Những cái plan nhỏ này sẽ làm step by step. Ví dụ nó làm plan 1 trước, rồi làm plan 2, rồi làm plan 3. Sau khi hoàn thành tất cả các plan, nó sẽ tổng hợp lại ở một cái chỗ nào đó, hoặc là một cái component cuối cùng để nó ra được câu trả lời cuối cùng.</p>\n<p><strong>38:06</strong> Ý là nó giống như cái con Zero mà hôm trước anh Tom present ấy. Con worker sẽ có thể làm một số task như đọc file, xóa file, sửa file, hay là talk với Internet, gửi email các thể loại. basically, agent các thứ như vậy.</p>\n<p><strong>38:52</strong> Đúng rồi, bản chất của nó là thay vì làm một cục rất lớn để giải quyết hết cái task đó, mình phải đi prompt đi prompt lại nhiều lần để nó cho ra kết quả. Mình có một cái prompt trước, để chia nhỏ thành các task nhỏ, rồi sau đó có một cái pipeline để nó đi qua từng con worker, làm những việc nhỏ nhỏ cho mình.</p>\n<p><strong>39:23</strong> Ok, kéo lên slide 14 đi Hoàng, slide 14. Anh cũng thấy là kiểu con này giống giống con Mule Automation mà Tom setup đúng không? Con Mule button mà Tom setup ấy. Em đã code xong rồi nhưng nhìn cái design này với cả cái button giống hệ nhau này.</p>\n<p><strong>39:46</strong> Ừ, cái này là thằng Tpm nó chạy loop rồi, nhìn ra giống giống một tí. Nó giống planning mà anh Tom vừa nói, là nó break task ra từng phần, rồi xử lý từng phần một. Nó có iteration trong đó, giống như là nó có một list các step mà em đã mô tả ở trên. Back lại cái của em, chính là chỗ mà agent đang thấy. Cái của anh thấy nó giống planning hơn, là nó chia plan ra trước, rồi làm step by step từng plan một, đi qua mỗi vòng làm từng cái một. Còn cái này nó giống như là làm song song với nhau, nó parallel với nhau, để ra output xong rồi đánh giá lại output đó, rồi đưa ra kết quả cuối cùng. Chắc anh nhầm cái work rồi, đã correct lại.</p>\n<p><strong>42:28</strong> Đúng rồi, thử đi. Nó là kiểu như vậy đó, nó chia ra thành nhiều việc khác nhau. Nó giống như là classify, nó chạy qua từng cái. Cái này giống multi-collaboration hơn, vì nó giống như question classifier, chỉ chạy một trong mấy cái này thôi. Mỗi agent làm việc đúng chuyên môn của nó, rồi combine lại.</p>\n<p><strong>43:33</strong> Nhưng mà anh thấy mấy phần như reason với input analysis có đúng không? Của Tom, phần expert ấy. Riêng vụ pick domain ấy, nó có classifier ở đó, nhưng mà mấy phần reason với input analyzer là những agent khác nhau. Bên group đó là expert thôi, mình consider nó như là một group expert đúng không? Và nó combine với năm cái agent mình phía dưới.</p>\n<p><strong>45:33</strong> Nếu mà làm tất cả mọi thứ trong cùng một cái prompt, em chắc chắn nó sẽ không ra được kết quả mình mong muốn đâu. Vì context quá nhiều và không có example cụ thể. Đầu tiên là accuracy chắc chắn sẽ giảm vì quá nhiều dữ liệu cùng lúc. Cái chính là phải chia ra nhiều layer, từng bước một. Thực tế mình cần output từ con LM, chứ không thể hardcode từ trước được. Mình chỉ muốn một cái prompt đơn giản nhất, để nó làm ra các câu trả lời nhỏ, rồi từ đó có một câu trả lời lớn.</p>\n<p><strong>46:59</strong> Đúng rồi, khi làm nhỏ ra, mình sẽ biết vấn đề nằm ở đâu để debug. Như anh đã nói, specify kỹ, chia ra từng layer, nếu thấy sai ở đâu mình sửa ở đó. Còn nếu quăng một cục, mình sẽ không biết nó sai chỗ nào, rồi phải sửa rất nhiều lần.</p>\n<p><strong>48:43</strong> Đúng rồi anh. Ví dụ như tạo một cái event trong calendar vào ngày mai, nếu không có sự kiện trong giờ đó tạo event, còn nếu có rồi thông báo. Nếu mình quăng một cục request đảm bảo nó sẽ rối ngay, vì nó phải thực hiện theo step by step. Nếu chia thành từng layer, test từng bước sẽ ổn hơn.</p>\n<p><strong>49:23</strong> Nó sẽ em chắc là 99% là nó sẽ mù luôn á. Nếu mà còn nếu mình chia cái thành layer cơ, thành nhiều lớp layer á, làm test bài test nó sẽ ok hơn. Rồi, hô nào nên nữ, nên văn phòng là có Tôm ở đấy người chửi nhau. Anh không có hỏi nào chắc là cảm ơn Hoàng trước. À, đến Đạt nhé. Đạt nhờ. À, em không thị xem màn hình. Ok rồi, mọi người thấy màn hình của em chưa? Ừ, thấy rồi.</p>\n<p><strong>50:38</strong> Hôm nay em nói về Yelp use cases. Từ từ Đạt, để anh giới thiệu context một chút. đợt này team mấy bạn sẽ focus vô đâu đó và đi search thử mấy cái phần use case ấy. Use case ở đây có nhiều dạng. Cái dạng mà Đạt đang sharing nó sẽ là mình xem thử các bên startup hay enterprise nó đang apply vào để giải quyết vấn đề gì. Là có thể là những cái green field, tức là những cái hoàn toàn mới. Hoặc là những cái mà nó optimize cho cái phần current workflow của chúng đó, kiểu vậy. Nó sẽ viết những use case và report lại hàng tháng, những cái phần update. Ngoài ra có một cái phần dạng use case khác nữa đó là những cái phần tuning mà để boost phần development của bên phía bên phía là tech các thứ. nó sẽ có những cái technique hay là có những cái phần editor mới, hay là mấy cái tool mới các thứ. đ cũng sẽ report cái phần đấy đâu đó trong tech. Đang testing thử trong khoảng hai tuần một đấy. đây là một cái bài đầu tiên chắc con Yelp này, nó đang dạng là con start-up phải không, chắc là. tiếp tục giới thiệu cho anh em một tí về cách mà bọn này đang apply AI là như thế nào?</p>\n\n<p><strong>52:01</strong> Yelp là cái đơn vị nó đưa ra cái software, nó cung cấp cái software cho các store, các bên mà doanh nghiệp muốn làm các đơn vị nhỏ lẻ như kiểu là giao hàng nhanh, hay là nhà hàng, rồi các bánh dụng cụ cơ bản, kiểu như vậy. Yelp này nó bán cái software cho mọi người làm việc đó. em sẽ chia sẻ chút về thằng này, nó sử dụng AI vào trong cái tooling của nó như thế nào.</p>\n<p><strong>53:00</strong> trước đó chúng nó có một cái machine learning system rồi, bây giờ nó app thêm AI vào để giúp cho cái việc recommendation nó đúng hơn. bọn Yelp này nó có trên hệ thống của chúng nó, nó có nhiều cái thể loại đánh giá như kiểu đánh giá nhà hàng nó không bị tốt chẳng hạn. dựa trên những cái review đó, chúng nó có làm cái trò là text editing để so sánh được những cái kết quả mà spam hay không á. nó sẽ sử dụng AI vào trong cái việc gì. Thứ nhất là chúng nó sẽ tạo, chúng nó sử dụng AI để làm cái việc làm dataset, để train được cái model đánh giá là nó đang spam hay nó đang review tốt hay xấu như thế nào á. nó sẽ sử dụng AI để tạo ra cái dataset dựa trên LinkedIn. ở trong đây, em đọc có thấy bảo là chúng có sử dụng số tính như Zero-shot và Few-shot để làm dataset. chúng nó chỉ sử dụng một số cái model ở trên Hugging Face, rồi xong chúng nó làm classify để đánh giá được là review tốt hay xấu. đây là một cái use case cho cái việc AI dùng để làm text editing.</p>\n<p><strong>54:18</strong> À, sang cái use case thứ hai của chúng nó, là chúng nó có sử dụng Clip Model. Clip Model bản chất của nó là xử lý hình ảnh. Xử lý hình ảnh có nghĩa là sao? Có nghĩa là dựa trên review, dựa trên review... đợi em chút để em kiếm nè. À, Clip á, nó sẽ xử lý hai thứ. Một là cái caption của cái ảnh, và cái ảnh nó như thế nào. qua Clip này á, nó sẽ hiểu được cái context của cái ảnh là cái gì. chúng nó sử dụng Clip vào trong những cái công việc như là những cái người ta đi vào trong một quán ăn hay một cái quán nhậu á, chúng nó sẽ review, chụp ảnh để capture lại những cái thứ này. Và ví dụ như hình ảnh của một cái món sản phẩm đi, trước khi apply Clip nó không đánh giá được, nó không đánh giá được là nó có bánh quế không, nó chỉ đánh giá được mỗi gà rán thôi chẳng hạn. Sau khi apply Clip vào á, nó sẽ biết được là có gà rán và có bánh quế. bản chất, nó sử dụng cái Clip này là một phần của AI, là nó xử lý ảnh, xử lý ảnh và caption của ảnh, và hình ảnh thành vector để nó so sánh với nhau. đây là hai use case của nó. những cái use case này được áp dụng cho cái gì?</p>\n<p><strong>55:38</strong> Hai cái use case trên nó sẽ áp dụng trong cái tình huống là khi mà mình có nhiều review á, mình có thể summarize nó lại thành một cái highlight review ở trên đây. dựa trên những cái thứ mà nó chuyển thành vector được á, nó có thể annotation được cái việc là những cái hình ảnh đang nói cái gì, nó support cho mình được cái gì ở trong đây. Đợi một chút, nó sẽ highlight cho mình luôn. nó sẽ biết được cho mình cái context của cái ảnh là gì, nó có thể annotation được cái việc này. đó là cái use case của cái việc mà AI dùng để làm image summarization.</p>\n<p><strong>56:15</strong> Đầu năm nay nó có release thêm cái là Yelp Assistant. Dựa trên những cái nền tảng cũ của chúng nó, chúng nó có thể tạo ra chatbot rồi, xong nó có thể review lại cái highlight như thế này, mình cứ hỏi nó xong nó recommendation cho mình cái gì thôi. Đơn giản là như vậy. Ngoài ra em có thấy một cái use case cũng khá đặc biệt, có nghĩa là trong cái giai đoạn từ 2020 á, nó nổ ra cái câu chuyện là làm clip ngắn review các thứ á. chúng nó có một cái nguồn dataset nhất định cho cái việc đó. em thấy chúng nó bảo chúng nó sắp release một cái như anh Tom có đề cập, cái bọn đó có thể chuyển văn bản thành giọng nói á. dựa trên cái nguồn dataset review này á, có lẽ chúng nó support review thêm cái việc mà làm video clip ngắn để mô tả cái nhà hàng.</p>\n<p><strong>57:45</strong> Dựa trên những cái review, những cái video mà người ta tới người ta review á, mình có thể tạo ra được một cái đoạn script, xong cho nó chạy qua AI, nó tự động làm ra một cái video về một cái nhà hàng như mình. đây là use case của bọn này, đơn giản nó có thế thôi. Ok, quay lại cái câu hỏi đầu tiên, cái này nó sẽ dạng là dùng AI để label data, đúng không?</p>\n<p><strong>58:35</strong> Ok, vậy là check xem là cái comment là negative hay positive, đúng không? Kể kiểu đấy là một ví dụ. Cái thứ hai nữa là nó sử dụng cái clip model, đúng không? Chắc là sẽ dạng giống như Vision, nhưng mà live hơn, cũng để dán nhãn, đúng không? Để dán nhãn giống như cái của bên phía Plot, dán nhãn cho ảnh. hai cái use case đó, nó sẽ được ứng dụng trong cái việc gì?</p>\n<p><strong>59:18</strong> Em nghĩ có một cái ý khá hay mà nó chưa nói tới, là câu chuyện là nó có nguồn dataset sẵn. Như là ai tới review, ai tới đánh giá các thứ, dựa trên những cái clip ngắn như thế này, nó có thể tạo ra được một cái video intro về cái nhà hàng đó. Nó sử dụng AI. Em nghĩ là nó sử dụng AI để viết kịch bản, rồi sau đó đưa kịch bản đó cho một con AI voice để nói. Nhưng mà hình ảnh nó lấy ở đâu? Như kiểu là video nó sẽ lấy từ đâu ra?</p>\n<p><strong>59:57</strong> Từ trong cái review, ai tới review họ sẽ có một cái video để review. Ok, tự động tạo advertisement, đúng không? Dạ vâng, cho TikTok hay những nền tảng như TikTok các thứ, kiểu summarize từ review của user. Nghe cũng có vẻ sáng tạo đấy. Ừ, chắc anh em confirm mấy cái của anh bảo làm rồi đúng không?</p>\n<p><strong>01:00:07</strong> Đang vậy, cái này ok là cái caption. Ok, đúng hầu như là đúng anh. Bạn nói đúng, là chúng nó sẽ, em nghĩ em nghĩ cái use case này bọn này ban đầu á, cái mục đích ban đầu của bọn này là làm recommendation. trước đó, trước khi có AI chúng nó đã có một cái hybrid recommendation model trước. Căn bản là nó sẽ... Em nghĩ là khi mà có cái này á, nó dẹp gần hết cái model cũ này luôn. Em nghĩ có một cái khá hay là cái business messaging mà chúng nó không có đề cập nhiều. Có nghĩa là em nghĩ là nó sẽ dựa trên là có review top 50 review chẳng hạn. Xong top 50 cái interaction, kiểu như rating như thế nào. Thứ nhất là review tốt, n rating tốt, cái business messaging của nó sẽ tốt. Mà Yelp không đề cập vấn đề này, mình không trách nó được.</p>\n<p><strong>01:00:51</strong> Ok, anh em có câu hỏi cho Đạt không? Bài đầu tiên đấy. Đạt bảo đang thêm mấy cái, mình phải enterprise nữa, nhưng mà thầy thấy đang Viettel với cả FPT, với cả VNG các thứ, đang chưa biết thấy chúng nó thế nào. Đạt kêu mấy cái tool, cái tool gì coding của bên phía FPT hả, đang kêu cùi.</p>\n<p><strong>01:01:41</strong> Hì, một bản for, một bản for của của continue à? Nó thế, nó thế không tốt. Nó hơi cùi, thô. Hai, chị hết rồi à? Chắc vậy. Đạt nhé. Hôm nay mấy bài về Yelp và Tech Linh chắc tuần sau, tuần sau, tuần sau nữa, nếu kịp.</p>\n<p><strong>01:02:01</strong> Tí demo luôn đi, Đạt luôn. Để Đạt demo một tí cái gì nhỉ? Cá đang là một con bot, để có thể question với cả question một cái short code dưới dạng kiểu developer mà hiểu rõ hơn về code, hay là test kiểu như là một vai trò auditor đi kiểm tra chất lượng của code. Đạt đang demo dev cái workflow hay con bot dựa trên diff đó cho anh em xem thử nào. Mình bật hình rồi Đạt ơi.</p>\n<p><strong>01:03:01</strong> đây là một cái project để em xin vào club ai nha. Trình em gọi là hơi 'newb' nên project này mà có lem quá mọi người thông cảm. Workflow cơ bản là em sẽ lấy query, rồi trích xuất ra được cái URL của repo. Ở đây em có dùng lại cái scrapper của anh Tom, nhưng mà nó chưa đúng ý em, nên em có tạo một con scrapper ở local nó sẽ lấy được tất cả content của repo luôn. Nhưng mà cái đó nó quá lâu với quá lớn. Ờ, default hiện tại em chưa thấy làm cách nào mà bỏ vào con context được, trừ khi dùng cái knowledge retrieval, mà dùng knowledge retrieval em không có gọi là trực tiếp được mà phải bỏ vào trước. Mình không có chọn, không có chọn repo được.</p>\n<p><strong>01:05:45</strong> Cái scraper này của anh Tom nó không có lấy content của file, cho nên em chưa vẽ diagram được. Vẽ diagram có thể em dùng, tí nữa em test thử. Cái này là em lấy được content của những file nè, ở root, ở những file doc. Những file đó không chắc câu hỏi của Huy vừa đưa ra chắc là cũng không trả lời được. Để em thử, em có sẵn cái full của em vô đây rồi, offline nhỉ. Bên phía in sẵn content rồi, chứ không online. Cái này em generate bằng luôn, cũng không có.</p>\n\n<p><strong>01:07:07</strong> Cái này nó sẽ scrap full content, nó sẽ đầy đủ hơn. Để em thử đặt câu hỏi của bên Huy hay của Hoàng các em thử nào. Mình thử BC chat lên rồi đặt câu hỏi xem. Anh có không? À không. Maybe là cái context này quá lớn, cái phần knowledge retrieval này em chưa tìm được cách mà cho nó vào context tốt được.</p>\n<p><strong>01:09:19</strong> Retrieve tối ưu lắm. Cái file text này cũng mấy chục ngàn dòng, mấy chục ngàn dòng á. Mở lên xem thử nà, đ đang dùng mini hả, đổi sang máy đ xịn hơn xem có ok hơn không. Đồ mini hơi cùi. 2 triệu từ như thế, từ làm sao mà nó còn xong được ta? Em nghĩ là phải có một cái server, cái dedicated server luôn nó mới ok. Anh đang tò mò tại sao nó chạy được ấy, bởi vì 29U word à, như vừa thấy à. Nhân với cả 4 này là số to. Kích cỡ đấy, Follow up xem thử. Ok, tức là em vẫn là từ cái context thôi đúng không, là mình cũng chỉ dạng là query kiểu query vb đúng không, chứ không phải mình nhập hết tất cả cái đấy vào context.</p>\n<p><strong>01:10:57</strong> Ok, đúng rồi anh. em chưa nắm được là cái retrieval của thằng dify nó sẽ chạy như thế nào. Không biết nó chạy có đúng không, nó retrieve có đúng không. Em chưa tracing được nó mà em có cái tool tracing ở phía trước nữa, có thể test lại thử xem như thế nào. Nhưng mà ý là nếu mà kiểu retrieval như này chắc là kết quả nó sẽ không đúng được đâu anh. Anh cũng đang chưa biết là nó sẽ run bao nhiêu data ấy. Kiểu nó chỉ prefer 2-300 thôi, kiểu data không thể nào đủ mà để làm mấy cái task kiểu này. Cái này ít nhất cũng phải vài trăm tương đối data ấy. Dạ cái này còn work in progress.</p>\n<p><strong>01:11:35</strong> Đùa đấy, cứ lên công ty là có AI Club rồi. À, là của full version hay là fix được cái vụ này demo với bọn anh ở trên office nhé, mà try em để lại cho anh. OK, để em xem nó vẫn không build ra chắc mọi người coi đỡ. Cái chắc build bị gì đó, mọi người thấy màn hình không ạ?</p>\n<p><strong>01:13:08</strong> Dạ tuần này như em nói tuần trước em sẽ up cái bài sync.Map này. Em thấy nó hay với chi tiết để mọi người mà xài Go có cái nhìn tổng quan hơn về map nói chung. Và cái thằng sync map này đi qua trước là phần context. khi mọi người viết map đúng không, mà mình nếu mà mình viết concurrent map hay operation đó, mình làm concurrent á, về bản 1.16 trước nó sẽ không báo đâu, nhưng mà nó vẫn không safe nha. Còn bản từ 1.16 trở đi á nó sẽ error như thế này đó. Cho nên là để mà solve được problem này bình thường mọi người có thể viết map kèm với tại package sync, viết manual đó được.</p>\n\n<p><strong>01:13:56</strong> Bên cạnh đó nó có một cái option khác đó là thằng sync.Map này. chút nữa đến cuối mình sẽ sẽ nói tại sao nó lại được đề ra xài và cái usecase của nó như thế nào. thằng này nó được đề ra để mà mình không cần quan tâm lắm về cái việc mà mình phải xài mutex để lock lại cho việc synchronize. Tức là mình chỉ có việc xài thôi. Xài nó trông đơn giản như thế này nha, nó friendly như là mình viết map kiểm tra value vậy. Ví dụ như mình load một cái key lên có value ok nó sẽ giống như là việc map value bình thường thôi. Trong như này, nếu có là ok true, còn nếu không có false của y chang.</p>\n<p><strong>01:14:38</strong> Còn có một số cái function mà mình có thể xài rất handy. Đây là bảng 12.23 sẽ có clear, clear hết. Ví dụ như load là để lấy value, store là để update hoặc store cái key. Update vậy. Delete các thứ. ngoài cái việc mà mình viết concurrent đó đi đó, bên cạnh đó khi mà mình range, tức là mình loop một cái map nó cũng bị race condition nữa. thằng sync map này nó có cái hàm range này, mình xài mình sẽ không quan tâm nó là ấy, nó sẽ không bị nhưng mà như hàm range bình thường thôi. nó sẽ không cho mình cái cái snapshot mà gọi là consistent nhất, là khi mà mình vừa mới vô cái snapshot nó không được update là.</p>\n<p><strong>01:15:28</strong> Mà mình range, tức là mình loop một cái map, nó cũng bị race condition nữa. thằng <code>sync.Map</code> này nó có cái hàm <code>Range</code>, mình xài, mình sẽ không quan tâm nó là cái gì, nó sẽ không bị như bình thường đâu. Nhưng mà như hàm <code>Range</code> bình thường thôi, nó sẽ không cho mình cái snapshot mà gọi là consistent nhất, là khi mà mình vừa mới vào cái snapshot nó không được update. trong lúc đó mình sẽ phải thay đổi cách viết, nhưng ít nhất là nó sẽ không bị phải error như thế này.</p>\n<p><strong>01:16:06</strong> Đến cái phần bên dưới nó work như thế nào á. mọi người, nếu mà mọi người viết khi mà xem <code>CH</code> và <code>definition</code> cái <code>map</code> nó được cấu trúc như thế này: nó sẽ bao gồm hai cái <code>map</code>. Đó, nghe đến đây là mọi người sẽ thấy hơi kinh, nghe hơi thốn <code>RAM</code> với <code>memory</code>. Nó có một cái <code>Read Only map</code> và một cái <code>Dirty map</code>. nghe như thế mọi người có thể đoán được là nó sẽ làm việc theo kiểu là những cái value mà nếu mà được <code>write</code> nó sẽ được viết vào cái thằng <code>Dirty map</code> này hết. Cứ viết <code>update</code> vào đây, <code>update</code> vào đây, con này nó sẽ giống như là.</p>\n<p><strong>01:16:46</strong> Cái <code>Read Only map</code> này nó sẽ là những cái khi mà mình đọc vào á, mình sẽ luôn đọc ở đây. Còn <code>write</code> sẽ luôn <code>write</code> mới vào thằng <code>Dirty map</code>. Còn cái flow bên dưới nó làm việc như thế nào chút xíu nữa mình sẽ nhìn cái chart flow mình sẽ thấy. À, cả hai cái <code>map</code> này có một điểm chung: nó đều có một cái con trỏ <code>entry</code> nha mọi người, để ý để dễ hiểu cái flow. Ví dụ, ở đây mình thêm một cái <code>entry</code> mới, đúng không? nó sẽ thêm vào <code>Dirty map</code> và nó đều trỏ đến <code>entry</code> này. Cái này nó sẽ giống như là một cái <code>flag</code> để đánh dấu rằng là cái <code>map</code> này đã được thay đổi rồi. Tức là cái thằng <code>Read Only map</code> này nó không phải là mới nhất nữa. Khi này bên dưới nó sẽ nhìn và hiểu rằng là thằng <code>Dirty map</code> mới là cái nên đọc vào.</p>\n<p><strong>01:17:27</strong> Hình này thể hiện rằng là ví dụ như mình <code>update</code> một cái value nào đó, do bên dưới nó là con trỏ đúng không, mình chỉ việc <code>update</code> cái con trỏ đó thôi, không cần phải <code>update</code> từng cái value như là mình làm với <code>map</code> truyền thống. để làm được điều này á, bên dưới nó để ra một cơ chế là ba cái trạng thái (<code>state</code>) cho cái con trỏ <code>entry</code> này. <code>State</code> thứ nhất là <code>normal state</code>, đúng không? <code>Normal state</code> tức là những cái value cũ của <code>map</code>, nó đang có đủ và có thể xài được, không có bị gì hết. Còn trạng thái <code>amended</code> là khi mà <code>entry</code> đã bị sửa lại. Còn <code>delete state</code> là khi một <code>entry</code> nào đó đã được <code>delete</code> khỏi <code>map</code>, nhưng nó chưa được remove hoàn toàn nha. Tức là nó sẽ được...</p>\n<p><strong>01:18:59</strong> ...assign cái con trỏ <code>entry</code> vào <code>new entry</code>, chứ chưa remove ra. Còn cái <code>expired state</code> là xóa hoàn toàn, giống như là <code>hard delete</code> là mất khỏi <code>map</code> luôn. Để hình dung rõ hơn, mọi người có thể nhìn cái flow như thế này nha: ví dụ ban đầu cái <code>map</code> của mình đang có một cái <code>key1</code> và <code>value1</code> đúng không? bên <code>Dirty map</code> chưa có gì cả, tức là chưa được thêm bớt gì. Sau đó, mình thêm một cái <code>key2</code> nào đó, đúng không? nó sẽ được thêm vào <code>Dirty map</code>, và khúc này là thằng <code>map</code> đã <code>amended</code> rồi, nó đã có một cái <code>flag</code> <code>amended</code> ở đây.</p>\n<p><strong>01:19:40</strong> Sau đó, khi mình xóa (<code>delete</code>) một cái <code>key</code>, <code>map</code> này sẽ bị gán <code>new entry</code>, đúng không? Bên này cũng sẽ được tương tự gán <code>new entry</code>, giống như cái hình trước. Tức là mình chỉ cần cập nhật con trỏ thôi, không cần phải cập nhật value. Rồi, sau khi <code>delete</code> xong, đúng không, để <code>promote</code> được cái <code>Dirty map</code> này, mình phải cập nhật lại qua bên <code>Read Only map</code>, để <code>Dirty map</code> trở về <code>new state</code>, giống như đưa về trạng thái ban đầu.</p>\n<p><strong>01:20:18</strong> Tương tự, thêm một <code>key3</code> nữa, khi thêm cái <code>key3</code> này á, cái <code>state</code> này nè, sau khi nó đã trở về <code>new state</code> rồi đúng không, mình thêm <code>key3</code> vào á, nó xác định rằng thằng này đã được <code>delete</code> rồi, nó sẽ là <code>delete</code> hoàn toàn. Điều này có nghĩa là lần sau, khi nó so sánh với <code>Dirty map</code>, nó biết rằng bên này cái <code>value1</code> đã bị xóa rồi, không còn nữa. cái <code>Read Only map</code> lúc này chỉ còn lại <code>key2</code> và <code>key3</code>.</p>\n<p><strong>01:20:51</strong> Cho nên chính vì lý do này, <code>sync.Map</code> không có hàm <code>len</code> cho mọi người xài. Tại vì nếu như mọi người dùng hàm <code>len</code> ở đây, sẽ không biết được <code>value</code> của nó, tại vì lúc đó nó sẽ đếm cả những cái <code>value</code> đã <code>expired</code> hay <code>deleted</code>. Mọi người có thể thấy, chính vì cái cấu trúc của <code>sync.Map</code> được build như thế này, use case của nó được recommended là nên dùng cho những use case mà đọc (<code>read</code>) nhiều hơn ghi (<code>write</code>). Tức là nếu mà <code>write</code> hoặc <code>delete</code> nhiều, mọi người tưởng tượng chỗ này nó xài con trỏ liên tục, và có một cái issue bên Go team đã report là thằng này không bao giờ được garbage collected.</p>\n<p><strong>01:21:36</strong> Sau đó Go team họ confirm rằng cái <code>sync.Map</code> này được sinh ra chủ yếu để support mấy cái bên trong Go Library thôi. Nếu mọi người thấy nó <code>handy</code> vì có những function dễ xài có thể xài, nhưng nếu use case của mọi người mà cần lưu trữ (<code>store</code>), hoặc là <code>update</code>, <code>delete</code> nhiều không nên xài, vì nó sẽ làm chậm hệ thống.</p>\n<p><strong>01:22:24</strong> Dạ chắc chỉ vậy thôi ạ. Em có code lại cái bài bên này là cái bác này hay share mấy bài cũng khá chi tiết, mọi người có thể follow theo dõi. Ủa, cái này là topic gì Phát? Cho anh coi lại cái bài kịch bản đúp đầu r. À, cái sync map à? Ừ, sync map á. Ủa, nó có khác gì với lại cái anh vừa pass vô không vậy? Khác ở cái gì? Hình như là khác á anh. Ý là cái này em nhớ không nhầm là kiểu như cộng đồng tùy. Anh ví dụ use case họ muốn viết một cái gì đó mà họ thấy. Đó, anh nhìn thấy, họ ghi cái trong cái bên đấy, link mà nhìn thấy cách nó chạy mà lý do tụi nó làm thêm cái gì ấy nhỉ?</p>\n<p><strong>01:23:30</strong> Anh nhìn thấy nè, họ thêm một cái lớp nữa để họ xài. Ví dụ như là họ sẽ có những cái use case đúng không? Ví dụ như họ muốn implement generic trên <code>sync.Map</code> đó. Cái này cũng có ảnh hưởng do cái vụ link nãy em nói, do thằng này nó không được garbage collected nè. Đó, kiểu vậy. ví dụ như bên này Go team ở dưới, họ đã confirm chốt xong cái này là cái <code>sync.Map</code> này họ kêu là cái này là <code>intended</code>, intentional choice rồi, cho nên họ sẽ không sửa. Họ sẽ không đổi đúng không? Bây giờ cộng đồng làm gì mình chỉ biết là họ tự xài thôi. Ý là họ thích cái việc <code>sync.Map</code> này được để ra dễ xài, có mấy cái function ngon lành, họ ráng thêm một tầng nữa, rồi chế những cái mà họ cảm thấy là ok, mình có thể xài được. Kiểu vậy.</p>\n<p><strong>01:24:07</strong> Ủa mà sao cái clip này cũng lâu mà bữa nay lại chọn à? Ờ, thế kiểu insight thôi, insight cho mọi người xài. Ý là cái use case này cũng có thể được apply cho bên mình. Ví dụ như bên enterprise đúng không? ví dụ mình xài <code>map</code>, mà mình xài concurrency đúng không? mọi người sẽ tự viết một cái <code>struct</code>, xong rồi mọi người sẽ nhét một cái <code>mutex</code> vào, rồi tùy người sẽ ngồi bắt đầu viết lại. Đủ các kiểu. Trong khi đó thằng <code>sync.Map</code> rất handy, như nãy em show anh, là mấy cái function này là nó luôn follow cái chuẩn, là anh muốn <code>load</code> anh phải gọi hàm này. Kiểu vậy, nó chuẩn hơn.</p>\n<p><strong>01:24:50 M</strong>ọi người sẽ tự viết một cái <code>struct</code> như thế, xong rồi mọi người sẽ nhét một cái mutex vào, tùy người sẽ ngồi bắt đầu viết rồi đú các kiểu. Trong khi đó <code>sync.Map</code> rất là handy. <code>Sync.Map</code> này như em show anh nãy đó, những cái function của nó, nó luôn follow cái chuẩn này hết. Anh muốn load anh phải gọi hàm này, kiểu vậy nó sẽ chuẩn hơn. Nhưng mà như cái bài này là mình phải để ý những cái trade-off của nó, xài cho đúng quy. Ok, hiểu rồi, tức là quy chuẩn cái cách mà sử dụng <code>map</code> hả? Với lại workflow hả?</p>\n<p><strong>01:25:26 C</strong>ảm ơn Phát. Rồi để tranh thủ, mấy cái Thành ơi, nhất là xin anh em thêm 10 phút nữa nhé. Nó sẽ hơi tốn thời gian thêm xíu. Nhất là anh nhận được tổng cộng 11 cái submission cho cái bài test của mình. Có ít bài hình ở trên, mấy anh em nhìn ở trên tí. Deadline của mình là đến ngày 20, tức là tuần sau nhé. Bữa trước anh thông báo như là 27 ha, phải không? 26, 27 gì đó là deadline, mấy anh em coi tranh thủ còn một tuần nhìn bài đó rồi làm ha. Cái bài đó nó sẽ quan trọng, có một số cái mà chi tiết của từng bài đó anh chưa có nhìn kỹ. Chỉ có bài của Tôm bữa trước, Tôm nó quăng nhanh lên trên lobby quá, thành ra là có nhìn sơ qua xíu. Nhưng mà còn của mấy anh em chưa nhìn rồi. Nhưng mà cái ý chính là mọi người xem thử nha, cái chất lượng bài của mình á, tập trung ở chuyện là đợt này khi mà market nó thay đổi nhiều vậy, cái demand của thị trường cho cái nghề làm software nó có sự thay đổi lớn á.</p>\n<p><strong>01:26:15</strong> Tất nhiên những cái nhu cầu nó vẫn sẽ còn ở đó thôi, nhưng mà cái số lượng đó nó giảm xuống. Thành ra đó anh gọi là cái sự thay đổi về cái nhu cầu thị trường gần như với góc nhìn của anh trải qua nó là giống như 2014, nhưng mà on-over-again, vậy là sự thay đổi công nghệ mới ra, mọi thứ mới ra, thị trường mới rồi những cái tiềm năng mới nó sẽ xuất hiện trên đó. cái bài test nó sẽ quan trọng với việc là giúp cho mình, nhất là test về văn hóa, nhìn lại trong cái lúc mà tụi anh muốn check lại cái team á, muốn là hai cái đội: đội làm research study với cả đội làm consulting nó có một cái sự phân hóa rõ ràng.</p>\n<p><strong>01:27:36</strong> Nó có một cái sự phân hóa rõ ràng. Như trong cái bài viết anh post lên notion cách đây khoảng hai tuần hả, sẽ có sự phân hóa rõ ràng. Tương lai nó sẽ có thêm một số những cái policy mới cho chính sách về lợi ích khác nhau giữa hai đội nữa. Nhưng mà hiện nay là, như mình thấy đó, mọi người thấy OGIF dần dần nó được chuyển qua gần như thành cái buổi là report lại tất cả những cái study. Cái phần mà anh em đang coi mới và report lại trên này. Có thể những bài đó do được add, có thể những bài đó là do mọi người bắt đầu anh nhìn thấy, có một vài thành viên trong team mình thật sự là thấy cái kiến thức mới đó, xong rồi pick up những kiến thức mới đó để mà coi.</p>\n<p>Từ từ thấy rõ ràng là tụi anh muốn cái sự phân hóa đó nó diễn ra càng ngày càng rõ hơn. Và cũng có chính sách rõ ràng cho cái chuyện đó. Tức là ai mà thích coi mấy cái phần topic nhiều hơn, xong rồi ra ứng dụng ở tới mức là MVP, hay là ứng dụng vô những cái dự án nếu có, hoặc là đi deep dive thêm về kiến thức á, sẽ có một cái benefit khác. Những anh em nào mà không nhất thiết để phải ngồi coi những cái phần liên quan tới phần study như vậy, cứ ngồi làm dự án bình thường thôi. Nhưng mà nó sẽ có một số vấn đề khác đi kèm mà anh cũng có list ra trong cái link notion cách đây hai tuần. mọi người xem nhìn lại cái link đó một tí, để biết là vì cái định hướng như vậy nên là cái bài test này nó mang ý nghĩa là xem thử coi là cái mức độ của mọi người trong chuyện bắt kịp kiến thức mới, hoặc là cái độ tương thích với lại văn hóa trong cái giai đoạn mà tất cả mọi thứ nó thay đổi như vậy tới mức nào ha.</p>\n<p><strong>01:29:20</strong> Để hiểu vì cái mục tiêu là như vậy, nên là cái lúc mà chấm cái bài á, anh sẽ là người duy nhất chấm cái bài đó. Team mấy anh chị khác không có chấm đâu. Tất cả mọi người sẽ phải làm mà, nên là anh nghĩ rằng anh set cái standard cho chuyện đó. Nên là mấy bạn chịu khó làm bài đó tự làm là một chuyện. Thứ hai nữa là bài nào mà chất lượng thấp thật ra cũng không có vấn đề gì hết, chấm điểm thấp một xíu thôi, nhưng mà vừa làm hết vẫn sẽ được đủ điểm để mà coi như là pass cái đó. Chỉ là sau đó cái kết quả trước mắt thể hiện được á, là anh sẽ phân cụm thành hai cụm khác nhau.</p>\n<p>Đội Foundation hay là đội Lab á, vẫn là đội core của mình từ năm nay, ha. Đó là cái thông báo chính. Nên là trên 11 cái bài này, nếu bạn nào làm xong rồi mà cảm thấy là mình có thể làm tốt hơn được cho cái chuyện mà anh vừa mới nói đó, đội mình thật ra là cái team Foundation và cái team Lab á vẫn sẽ được ưu tiên nhiều hơn trong những vấn đề khác nhau. Được ha. Nên là nếu mà anh em cái bài đó mà đang kiểu làm qua loa á, tập trung ngồi làm kỹ lại tí. Check hai thứ ha: văn hóa trên đó là một, thứ hai nữa là kiến thức.</p>\n<p><strong>01:29:56</strong> Sau đó cái kết quả trước mắt thể thấy được á, là anh sẽ ân cụm thành hai cụm khác nhau, cái đội Foundation hay là đội Lab á vẫn là sẽ đội core của mình từ từ từ 8-9 năm nay ha. đó là vậy, đó là cái thông báo chính. Nên là trên 11 cái bài này, nếu bạn nào làm xong rồi mà cảm thấy là mình có thể làm tốt hơn được cho cái chuyện là anh vừa mới stay ra, là đội mình thiệt ra là cái team Foundation, cái team Lab á vẫn sẽ được ưu tiên nhiều hơn trong những vấn đề khác nhau. Được ha. Nên là nếu mà anh em cái bài đó mà đang kiểu làm qua loa á, tập trung ngồi làm kỹ lại tí, check hai thứ ha: văn hóa trên đó là một, thứ hai nữa là kiến thức cho cái cụm thông tin cái cụm gần nhất mà nó đang có vẻ hot nhất là LLM thôi.</p>\n<p>Nhưng thực ra team mình vẫn cover rất là nhiều mảng khác nhau, vẫn đang có xem về design, mấy bạn cũng đang xem đúng không. Vẫn có đội đang xem đúng không. Go vẫn đang xem. Blockchain có vẻ nó qua trend tí rồi, thị trường nó đang sideways thôi, nhưng mà về demand của consulting nó vẫn yêu cầu những cái đó rất là nhiều.</p>\n<p><strong>01:31:46</strong> Mấy cái mini app cho telegram, họ mua về rồi clone nhanh lên, thấy góc nhìn của mấy bạn làm business logic (BL) và tech (TCH) bây giờ nó khác một xíu rồi, không còn như ngày đầu nữa. Nhưng mà với consulting mình vẫn có thể sử dụng thôi, bình thường. Hoặc là mình có thể nhìn theo một góc nhìn khác, theo dạng là nó như một cái asset class mới xuất hiện. Với vai trò là developer, mình phải nhìn nó theo góc nhìn làm sao để nó ảnh hưởng đến cái workflow của mình như thế nào, quản lý tài sản ra sao.</p>\n<p><strong>01:32:29</strong> Đó là vấn đề về bài test nhé. Mấy anh em chú ý cái đó. Thứ hai, nãy có nhắc tới cái định hướng về team và số lượng nhân sự. Trong đó có nhắc lại cái link notion hôm trước anh có gửi nhé. Đội Foundation, đội chính khi start lại lần nữa như vậy. Lúc trước team tụi anh bắt đầu chỉ có ba người thôi, sau đó dần dần tăng lên bốn người, rồi lên năm người. Có thêm Quan, có thêm Hiếu, có thêm mấy bạn khác. Nhưng mà ban đầu start với ba người, giờ đội hình xịn hơn rồi. Bây giờ 40 người toàn là thứ dữ, chắc chắn sẽ đi nhanh hơn. Câu chuyện chung là vậy, đánh giá chung cũng là như thế, nên mấy anh em nắm tình hình nha.</p>\n<p><strong>01:33:12</strong> Cái thứ ba nữa có liên quan là Huy Nguyễn, nếu mà xong rồi, chắc tuần sau xem lại thống kê con số về ICY giùm anh nha. Hôm trước em cũng báo là số lượng bắt đầu chạy hơi nhiều, nên mình phải xem lại, cân lại con số cho nó hợp lý. Riêng phần này nhờ Huy và Thành chủ động làm giùm, xử lý giùm anh, xem lại cân số cho nó hợp lý. Thành có một công việc phụ là phần benefit cho thành viên team Lab, xem thử đề xuất như thế nào. Nó có thể được coi là một cái payon, nhưng mình sẽ không trả qua kênh bình thường, mà sẽ có cái cơ chế khác.</p>\n<p><strong>01:33:52</strong> Nhưng mà mấy thành viên team Lab sẽ có cái đó, mọi người quen với cái đó rồi. Cuối cùng là, riêng phần về LLM hiện tại, trong cái list câu hỏi có một câu hỏi quan trọng là làm sao để sử dụng, tìm hiểu bên ngoài sử dụng LLM như thế nào và adapt ra sao. Nhấn mạnh lại câu đó, vì nó là một câu mang ý nghĩa trong việc làm knowledge discovery. Câu hỏi này liên quan đến việc test là không chỉ đơn thuần là dùng, mà là tất cả các công cụ mà mấy anh em thấy được trong team hiện tại. Khi có người sử dụng hiệu quả, có người sử dụng kém hiệu quả hơn, RT (retrieval technology) nó thành một spectrum rất rõ ràng, những người thấp là thấp, những người cao rất cao.</p>\n<p><strong>01:34:38</strong> Tụi anh muốn nâng cái standard đó lên. Spectrum đó tụi anh muốn rút ngắn lại, càng cô động lại càng tốt. Bây giờ nó đang rất dài. Câu này ngoài việc dùng tool để làm discovery, nó còn mang ý nghĩa xem ngành nghề của mình sẽ như thế nào trong việc ứng dụng đó để nâng cao competency của mình, làm việc có năng suất hơn. Đó là toàn bộ vấn đề, và mọi người xác nhận lại xem cái mình làm có đúng chưa, nó có tầng ý nghĩa sâu xa hơn vậy.</p>\n<p><strong>01:35:20</strong> Cuối cùng để kết thúc buổi này, Thành ơi, mấy buổi OGIF sau, những phần mà Tom đã làm liên quan đến việc xây dựng structure của một cái LLM app, có thể lấy cái đó ra phân tích thử nhé. Phân tích lấy cái đó để làm sâu hơn luôn nhé.</p>\n<p><strong>01:35:56</strong>Toàn bộ mọi người hy vọng là tất cả anh em đều pass hết để đi chơi cho nó vui vẻ. Tuần sau sẽ có một cái bài khác. Tuần sau request là bên chỗ của Minh L. Minh ơi, chắc là lên làm một cái demo nha, tiếp tục về cái finite state machine, FSM á. Vì trong định hướng những công nghệ nền tảng như blockchain, AI, nhưng phần chính vẫn sẽ là các anh em làm engineer sẽ có một ngách khác để đi, đó là hiểu rõ các hệ thống lớn vận hành thế nào. Tương lai, nếu mình không phải là người sinh ra để làm data manipulation AI sẽ làm giùm mình, mình không cần tự thiết kế hay làm mấy việc của junior nữa.</p>\n<p><strong>01:37:35</strong> Cách duy nhất để lên senior là hiểu rõ vấn đề và làm kiến trúc thôi. Phần finite state machine đóng vai trò tương đối quan trọng, liên quan đến chuyện scale mà trước giờ tụi mình đã nói nhiều. Trước đó Minh có đọc và hiểu đúng góc nhìn mà anh đang muốn hướng tới. Nên là xem thử làm bài phân biệt các loại general server của nó nhé. Server state machine và event-based server. Rồi làm một cái sample để biểu diễn và implement nó luôn bằng Erlang nha. Erlang có sẵn hết các framework rồi.</p>\n<p><strong>01:39:01</strong> Bài này chắc là khi nào Minh Lưu. ready, nếu tuần sau không kịp có thể là hai tuần. Đề nghị mấy bạn backend và mấy bạn sen team mình gom lại, có gì confirm trước nhé. Vì bài này rất quan trọng trong chuyện phân tích thiết kế phần mềm. Bài này rất quan trọng. Trước giờ mọi người chỉ nói tới modeling và làm C4 thôi, nhưng Erlang là ngôn ngữ đi sát cái này nhất rồi, thường mọi người sẽ không biết hết. Chúng ta không nhất thiết phải học Erlang nhưng có thể nhìn cách thiết kế và build của họ để làm phần đó rất chuẩn, giống như là họ có framework sẵn, mình chỉ cần gắn vào để sử dụng thôi.</p>\n<p><strong>01:39:37 T</strong>ranh thủ, ngày 20 tháng 10 là chủ nhật, Mỹ với Ngọc và Giang có post rồi. Hôm đó là các chị em đi chơi, còn không ở Sài Gòn đại diện team sẽ chúc mọi người phát tài. Chúc mọi người phát tài chắc hợp lý nhất trong trường hợp này. Một chút chúc khác có vẻ không liên quan lắm. Rồi vậy nha, anh em tham gia được đăng ký với Mỹ để book bàn và đi cho hợp lý.</p>\n<p><strong>01:41:19 N</strong>hờ Thành những buổi sau cấu trúc lại thành mấy cái talk nhé. Rồi làm goal đó, team mình có thêm Builder-club nữa, đội đó chắc để xem mấy anh em lúc trước làm Super Bit ổn định lại hoặc làm console ổn định lại anh sẽ cấu trúc lại sau nhé. Đợt này chắc là nghỉ ngơi đầy đủ rồi. Rồi ok, anh em có câu hỏi gì cho bài test không kết thúc ở đây nhé. Rồi tạm biệt mấy anh em, hẹn gặp lại tuần sau. Cảm ơn Thành, cảm ơn tất cả mọi người.</p>\n<hr>\n<p><strong>English Transcript</strong></p>\n<p><strong>0:28</strong> The topic still includes Go Weekly, and Nam is currently testing the weekly design commentary. Let's see how it goes over the next few weeks.</p>\n<p><strong>11:19</strong> Nam will continue to present to the team, and there are a few topics from Hoang, Cat, and Dat. We’re currently researching various use cases that other companies are applying and some of the tools being used by developers. There will likely be a presentation this week or next about these findings. The focus will be on generating a UX design button. In the past, there have been questions about where AI is applied and how it plays a role, whether it serves as a small, standalone component or as part of a broader application for digital products. Today, I will address how AI contributes and how it functions.</p>\n<p><strong>12:11</strong> First, I will talk about system scope relationships. This diagram illustrates how AI is integrated into systems at different levels, from a small component to a comprehensive ecosystem. AI can be a small part of a component or evolve into a larger function, automating features to improve user experience (UX). Here, AI plays a crucial role in digital products, and when integrated, it can fit into various parts, from components to flows, to features, or even as an entire application. It can be part of a platform or ecosystem.</p>\n<p><strong>12:53</strong> For example, as a feature within an app, AI can help users interact with the app more easily, saving time by automating tasks that would otherwise be done manually. As a standalone application, there are many examples like ChatGPT, which serves a specific purpose, or as a platform like Rewind AI, which offers multiple features supporting AI in different tasks within the same app. These are examples of the scope of AI's current operations.</p>\n<p><strong>13:39</strong> Next, regarding the spatial relationship, this helps us understand how AI features are placed and organized within the user interface (UI). There are several ways to integrate AI into design, and it's important to know how to position them in the app so that they optimize user experience without causing confusion or making the interface too complex. Spatial relationships directly affect user experience. For example, AI can operate independently or alongside other features while still maintaining its own space. When you understand these relationships, you can choose how to place and use AI features in a way that enhances usability without overwhelming the user.</p>\n<p><strong>15:11</strong> There are six different methods for presenting AI: it can be entirely separate, alongside other features, layered, integrated with the parent feature, or in small points such as icons. These methods include:</p>\n<ul>\n<li>Separate: AI operates as a separate feature.</li>\n<li>Alongside: AI is placed next to other features.</li>\n<li>Layer: AI overlays with another feature.</li>\n<li>Integrated Parent: AI serves a major role in navigating and managing core content.</li>\n<li>Integrated Child: AI operates as a secondary, smaller feature.</li>\n<li>Point: AI is a small icon or widget that helps the user understand its function.</li>\n</ul>\n<p><strong>16:41</strong> Moving on to the functional relationship, this describes the functional interactions between AI and other features in the system. AI can exist separately but still adapt to the overall content and functionality of the app at a higher level. AI can integrate with existing features to improve performance, replacing manual tasks. Understanding how AI works functionally allows us to define its role clearly in the app and design in a way that ensures the functional actions don’t conflict with one another and don't disrupt the user flow.</p>\n<p><strong>17:28</strong> There are six methods to describe this functional relationship, which are similar to the spatial relationships I mentioned earlier:</p>\n<ol>\n<li>Separate: AI operates independently.</li>\n<li>Aware Of: AI exists separately but is aware of how it affects the main feature.</li>\n<li>Acting Up: AI interacts back and forth with other features, adapting data between them.</li>\n<li>Feature Incorporate: AI is incorporated as a part of an existing feature.</li>\n<li>Usage: AI adapts based on how it's used within the app.</li>\n<li>Usage Conventionally: AI communicates directly with other features in a two-way interaction.</li>\n</ol>\n<p>I will provide an example of this functional relationship in the code I am about to show, where AI generates a panel on the right side of the screen.</p>\n<p><strong>19:06</strong> For example, the acting-up relationship means AI can be aware of and react to changes made by other features, like data syncing between two systems. In contrast, feature incorporation would mean AI is integrated as part of the overall functionality of a specific feature.</p>\n<p><strong>19:57</strong> That covers the main aspects I’ve discussed so far, with three key elements for integrating AI into product design: optimizing product features, improving user functionality, and enhancing the overall effectiveness of the AI-powered system. It’s important to understand how to apply AI properly to provide clear value to the user. If we understand how to apply AI effectively, it becomes easier to design a system that brings value to the user by integrating AI in a meaningful way.</p>\n<p><strong>20:53</strong> I realized I missed an example earlier, so let me go back and explain. I’ll share a few examples that I think will clarify the functional relationships we discussed. For instance, in Microsoft, there’s a tool that generates images, this operates alongside other features in a parallel fashion. There’s also a feature that sits beside the main functions of the app but doesn’t serve as a core part of the experience.</p>\n<p><strong>22:01</strong> Yes, that's a good example. The functional actions and spatial relationships you presented seem to be similar to common patterns. These are just standard patterns for AI design, how to integrate an AI feature into an app or design an AI-driven app, depending on how it’s categorized.</p>\n<p><strong>22:31</strong> Yes, these are patterns we often use when designing AI applications or integrating AI into a separate application or product. Essentially, they are familiar structures to help us better understand how to apply AI. You can categorize and break them down into smaller features. This part is very clear.</p>\n<p><strong>23:31</strong> Thank you, Nam. Ok, next will be Hoàng and Đạt’s presentation.</p>\n<p>Today, I will introduce a topic called \"AI Button in LLM Applications.\" Before diving in, let me briefly cover the content and agenda. First, we will explore design patterns related to the AI Button. These patterns are applied in various applications. I’ll pick out the most common and understandable ones to introduce to everyone.</p>\n<p><strong>24:35</strong> This presentation will revolve around using AI in digital products. These applications leverage the power of AI models to solve specific problems or assist users in tasks. When using LLMs, many may encounter the issue where the model does not provide the expected result. This happens because the model operates based on its ability to respond using the data it has been trained on. There are multiple ways to address this issue. One of the most expensive ways is to retrain the entire model from scratch, which can take a lot of time and resources.</p>\n<p><strong>25:15</strong> We have a technique called <strong>in-context learning</strong>, which means AI can learn directly within the current context while you are using it. This technique includes few-shot learning or zero-shot learning, allowing the AI to learn without needing to be retrained from scratch. For example, you only need to provide the AI with a few small examples in the context, and it will adjust its behavior based on what is provided. Instead of retraining the entire model, this method saves a lot of time and resources while still ensuring the AI can learn from the specific context you give it.</p>\n<p><strong>25:52</strong> In this case, <strong>in-context learning</strong> is widely used in <strong>prompt engineering</strong>. People provide available examples directly into the prompt, and the model learns from those examples to generate subsequent results. That's the main idea of in-context learning. Essentially, the design works like this: you have a query, then you build a prompt with the necessary examples and few-shot learning data, and you pass it through the model, which returns a result based on those examples. However, it doesn’t stop at just examples; many other factors are involved as well.</p>\n<p><strong>26:37</strong> Broadly speaking, in-context learning involves feeding the context into the prompt by providing information that the model doesn’t inherently have. Since this is a pre-trained model, its knowledge is limited, so you provide additional information in the context and prompt for the model to learn during the result generation process. For instance, in medical image diagnosis, the model may not have enough specialized knowledge. Therefore, you provide that expertise into the context and prompt so the model can learn during the result generation process. That’s the core of in-context learning.</p>\n<p>Next, we have another important design button, which is <strong>data preprocessing/editing</strong>.</p>\n<p><strong>27:54</strong> This section describes the process of preparing data for the language model (LM). As you know, LMs operate based on vector databases, using vector comparisons to find similar data points. This process often involves handling multimedia data and various types of information. To ensure optimal output, applying data preprocessing steps is crucial. For example, you can preprocess text by filtering out unnecessary details to shorten it, or with images and audio, you can remove noise or compress the data to reduce size before passing it through the language model.</p>\n<p><strong>29:19</strong> Data preprocessing or editing helps the model operate more efficiently. There are many ways to preprocess, depending on the type of data or context. You perform this based on specific requirements. The next design button I want to mention is a commonly used one, though it goes by different names. I call it the <strong>example agent</strong>. This design is commonly seen when you want your query to pass through multiple contexts. For example, if you have a content review application, you can let that content pass through a pipeline where each agent evaluates the content from a different perspective.</p>\n<p><strong>30:11</strong> One agent might evaluate the content from a writer's perspective, and another agent might do so from a different angle. After going through all these agents, there will be a final synthesis layer to combine or process those results, ultimately providing the user with a comprehensive output. This design is often seen in evaluation systems where results from different models are evaluated, and the best outcome is chosen based on predefined conditions.</p>\n<p><strong>30:55</strong> The next design button is called <strong>agentic button</strong>. So, what does agentic mean? In the context of language models (LMs), <strong>agentic LMs</strong> refer to enhancing the model's capabilities. Since the model only knows what’s in its training data, we upgrade it to increase its power and minimize human intervention. This design helps the system become more automated, allowing it to operate with less human interference.</p>\n<p><strong>32:24</strong> This design has several key components that help you achieve this level of automation. There are four main components: <strong>reflection</strong>, <strong>planning</strong>, <strong>execution</strong>, and <strong>multi-collaboration</strong>. Each of these components helps make your system more automated. First, let’s talk about <strong>reflection</strong>. Reflection involves evaluating the initial results of the model based on a specific criterion or metric to determine if the result has been optimized. If it hasn’t, the system adjusts and repeats the process, continuing to generate results until it reaches an optimal outcome.</p>\n<p><strong>33:06</strong> Reflection helps reduce human intervention because, instead of producing an initial result that doesn’t meet your expectations, the system refines itself based on pre-established criteria, eventually delivering a more accurate result without manual adjustment.</p>\n<p>The Reflection button means that it will evaluate the initial output of an AI, then assess it according to a certain standard or metric to see if the result has been optimized. If not, it will adjust slightly and run the AI again to generate another result until the optimal result is achieved. This helps reduce the need for human intervention, as if the first output is not what you expected, you don’t need to manually adjust it, the system will optimize itself.</p>\n<p><strong>33:42</strong> The second button is the tool. Tools can be external, such as external APIs or functions that people code. These tools are used to allow the model to access knowledge from the outside world, real-time knowledge, or external resources that it hasn’t been pre-trained on. For example, OpenAI or Claude both support this. The model can know when to call the tool based on the description you write for the tool. The model will know how to retrieve and extract information from the tool and then return it to the LM to generate an output.</p>\n<p><strong>34:30</strong> Next is planning. The planning button means that you give the LM the ability to plan, preventing the need to prompt multiple times. For example, if you have a complex task, you provide a large prompt for the LM to plan out all the steps it needs to take in a step-by-step manner. This allows it to perform smaller tasks first, which are eventually combined into a larger task. This planning design has many variations, and this is the simplest version: planning and then executing step by step.</p>\n<p><strong>35:10</strong> Finally, multi-collaboration. I presented this about a month ago. Essentially, it's like having the AI excel at a particular task. You have a context, right? You divide it and pass it through to different agents. Each agent is good at its specific task, and after they complete their tasks, it passes on to the next agent. In this way, it can complete the requirement. This design heavily utilizes the divide-and-conquer principle, breaking a large task into smaller tasks and assigning each to a specialized agent. This is a design button I’ve seen being used in many places.</p>\n<p><strong>36:24</strong> Those are the design buttons that I’ve seen used in many places and understand the most. I’ve finished my presentation. Does anyone have any questions?</p>\n<p><strong>37:10</strong> Hoàng, can you repeat the part about planning to confirm Bảo’s comment? It’s like it reads the prompt, right? It understands your prompt first, then breaks it down into smaller tasks, and then there are workers, perhaps IDE workers or smaller prompts, to complete the task. Is that correct?</p>\n<p><strong>37:40</strong> Yes, you can think of it that way. You can split the prompt, for example, in a complex task, into several smaller plans. These smaller plans will be done step by step. For instance, it executes plan 1 first, then plan 2, then plan 3. Once all the plans are completed, they are compiled somewhere or in a final component to produce the final answer.</p>\n<p><strong>38:06</strong> It’s like the Zero you presented last time, right? The worker can do tasks like reading files, deleting files, modifying files, or interacting with the Internet, sending emails, and so on. So basically, agents work in this way.</p>\n<p><strong>38:52</strong> Exactly. Instead of handling a massive task all at once, which requires repeated prompting, you start with a prompt that breaks the task into smaller tasks, and then a pipeline runs through each worker, handling small tasks for you.</p>\n<p><strong>39:23</strong> Ok, pull up slide 14, Hoàng. Slide 14. I also see this is kind of like the Mule Automation setup that Tom created, right? The Mule button that Tom set up. I’ve finished the code, but this design and the button look exactly the same.</p>\n<p><strong>39:46</strong> Yes, this is a looping process with Tom, which looks somewhat similar. It’s like planning, as Tom mentioned, where it breaks down the task into parts and handles each part. It has iterations within it, like a list of steps you described earlier. Referring back to yours, the agents can see that. What I’m seeing looks more like planning: it splits the plan upfront and then works step by step on each plan, moving through each round one by one. This one, though, works more in parallel, where they run simultaneously, produce the output, evaluate it, and then return the final result. I think I got the workflow mixed up; it’s now corrected.</p>\n<p><strong>42:28</strong> Exactly, give it a try. It works like that, breaking down into different tasks. It’s more like a classification, running through each one. This is closer to multi-collaboration because it’s like a question classifier, where only one agent runs for each task. Each agent works on its specific expertise, then combines everything.</p>\n<p><strong>43:33</strong> But do you think the parts like reasoning and input analysis are correct? Tom’s expert part. Specifically, for picking domains, there’s a classifier, but reasoning and input analyzers are separate agents. In that group, they’re experts, right? We consider them a group of experts, and they combine with the five agents underneath.</p>\n<p><strong>45:33</strong> If we try to do everything within a single prompt, I’m certain it won’t give us the desired result. The context is too large and lacks specific examples. The main issue is that accuracy will definitely decrease because there’s too much data at once. The key is to split it into multiple layers, step by step. In reality, we need the output from the LM; we can’t hardcode it all in advance. We just want the simplest prompt so it can generate small answers that ultimately lead to a large answer.</p>\n<p><strong>46:59</strong> Exactly, by breaking it down, we can identify where the problem lies and debug it. Like you mentioned, specify clearly and break it down into layers. If something goes wrong, we can fix that part. If you throw everything in at once, you won’t know where the error is, and you’ll have to fix it repeatedly.</p>\n<p><strong>48:43</strong> Exactly. For example, creating an event in the calendar for tomorrow, if there’s no event at that time, it creates the event, but if there is already one, it sends a notification. If we throw in a large request at once, it will get confusing because it has to execute step by step. Breaking it into layers and testing each step will make it work better.</p>\n<p><strong>49:23</strong> I'm almost certain that 99% of the time, it will get lost if it’s done in one go. However, if we split it into layers, into multiple layers, and do the tests, it will work much better. Ok, let's go. If anyone's at the office, Tom’s probably there to argue with. If no one has any more questions, thanks to Hoàng first. Now, Đạt, you’re up. Đạt, are you sharing your screen? Ok, can everyone see my screen? Yes, we can.</p>\n<p><strong>50:38</strong> Today, I’m going to talk about Yelp use cases. Wait a second, Đạt, let me introduce some context first. So this time, the team will focus somewhere and search for some use cases. There are different types of use cases. The type Đạt is sharing is where we look at how startups or enterprises are applying AI to solve specific problems. It could be something completely new, like a greenfield, or it could be optimizing the current workflow of their system. They will write use cases and report updates monthly. In addition, there’s another type of use case, which involves tuning to boost the development on the tech side. They will also report that part somewhere in tech. We’re testing this for about two weeks. This is the first report, and it’s about Yelp. Yelp is a startup, right? Now, Đạt, introduce how they are applying AI.</p>\n<p><strong>52:01</strong> Yelp is a company that provides software to stores and businesses that want to offer services like fast delivery, restaurants, or basic utilities. Yelp sells the software for those tasks. I’ll share a bit about how they use AI in their tools.</p>\n<p><strong>53:00</strong> Before this, they had a machine learning system, but now they’ve added AI to improve the accuracy of their recommendations. Yelp has many types of reviews on its system, like restaurant reviews, which may not always be good. Based on those reviews, they do some text editing to compare whether the results are spam or legitimate. AI is used here in several ways. First, they use AI to create datasets to train a model to assess whether a review is spam or a good/bad review. They use AI to generate datasets based on LinkedIn. From what I’ve read, they use techniques like Zero-shot and Few-shot learning to create these datasets. They use some models from Hugging Face and then classify the reviews as good or bad. This is one use case where AI is applied in text editing.</p>\n<p><strong>54:18</strong> Now onto the second use case, they use the Clip Model. The Clip Model primarily processes images. What does that mean? It means that based on reviews... wait a minute, let me find the reference... Ah, Clip processes two things: one is the caption of the image, and the other is the image itself. Through Clip, it can understand the context of the image. Yelp uses Clip for tasks such as when someone goes into a restaurant or pub and posts reviews or captures images of the place. For example, before applying Clip, it couldn’t identify if there were waffles in a dish; it could only identify fried chicken. After applying Clip, it can now recognize both fried chicken and waffles. Essentially, it uses Clip as part of AI to process images, captions, and convert images into vectors to compare them. So, these are the two use cases for Yelp.</p>\n<p><strong>55:38</strong> These two use cases are applied in situations where you have many reviews, and you can summarize them into a highlight review. Based on the information converted into vectors, it can annotate what the images are conveying, and what they are supporting. Just give it a moment, it will highlight it for you. It understands the context of the image and can annotate it accordingly. This is the use case for how AI is used in image summarization.</p>\n<p><strong>56:15</strong> Earlier this year, Yelp released the Yelp Assistant. Based on their existing platform, they were able to create a chatbot that reviews highlights like this. You simply ask, and it recommends something for you. It's as simple as that. Additionally, I noticed a use case from 2020 when the trend of short review clips started becoming popular. Yelp had a dataset specifically for that purpose. They mentioned that they are about to release something, as Tom referred to, that can convert text to speech. Based on the review dataset, they might support creating short video clips to describe a restaurant.</p>\n<p><strong>57:45</strong> Based on reviews or videos posted by people, Yelp could generate a script and run it through AI to automatically create a video about a restaurant. That’s the use case. It’s simple as that. Ok, going back to the first question, this use case is essentially using AI to label data, right?</p>\n<p><strong>58:35</strong> Ok, so it checks whether the comment is negative or positive, right? That’s one example. The second one is using the Clip Model, correct? It’s similar to Vision but more live, also for labeling, right? Like with Plot, labeling for images. So, these two use cases are applied for what?</p>\n<p><strong>59:18</strong> I think there's an interesting point that hasn't been mentioned yet, which is the story about having a ready-made dataset. For instance, when someone leaves a review or gives a rating, based on these short clips, Yelp could generate an intro video for the restaurant. It uses AI for that. I think they use AI to write the script and then pass that script to an AI voice to narrate. But where do they get the images from? How do they get the video content?</p>\n<p><strong>59:57</strong> From the review, when someone comes to review, they will have a video to review. Ok, so it's automatically generating an advertisement, right? Yes, for TikTok or similar platforms, summarizing user reviews. Sounds pretty creative. Yeah, I guess you guys have confirmed what Bảo mentioned, right?</p>\n<p><strong>01:00:07</strong> Yeah, this one is about the caption, and it's mostly correct. You're right, I think the initial purpose of this use case was for recommendation. Before they had AI, they already had a hybrid recommendation model in place. Basically... I think with this new AI, they will likely replace the old model. One interesting point that wasn't mentioned much is business messaging. I think it’s based on, say, the top 50 reviews or top 50 interactions, how are the ratings, and if the reviews are good and the ratings are good, then the business messaging will also be good. But Yelp didn’t bring up this topic, and we can’t blame them for that.</p>\n<p><strong>01:00:51</strong> Does anyone have any questions for Đạt? This is his first presentation. Đạt mentioned he’s working on adding more, probably for enterprise too. But I’ve seen Viettel, FPT, and VNG, and I’m still not sure how they are doing things. Đạt said some of FPT's coding tools are kind of lame.</p>\n<p><strong>01:01:41</strong> Haha, is it just a continuation of a previous version? Yeah, it’s not great. It’s a bit rough and underdeveloped. Are we done with that? I guess so. Ok, Đạt. Today we’ve covered Yelp and Tech Linh, so maybe next week or the week after that, if time permits.</p>\n<p><strong>01:02:01</strong> Let's do a demo real quick, Đạt. Could you demo something for us? What about a bot that can handle questions or understand short code from a developer’s perspective? Or something like an auditor checking the code quality? Could you demo the workflow or the bot you’re working on with that diff you mentioned? Please turn on the screen, Đạt.</p>\n<p><strong>01:03:01</strong> So this is a project I’m working on for joining the AI Club. I’m pretty new at this, so if the project looks rough, please bear with me. The basic workflow is that I take a query and extract the URL of a repository. Here, I reused Tom’s scraper, but it didn’t fully meet my needs, so I created my own local scraper to fetch all the content from the repo. However, that takes too long and generates too much data. As of now, I haven't found a way to add it to the context unless I use knowledge retrieval. But to use knowledge retrieval, I have to prepare it in advance; I can’t select the repo directly.</p>\n<p><strong>01:05:45</strong> Tom’s scraper doesn’t capture the content of the files, so I haven’t been able to draw a diagram yet. I might use it for the diagram later, I’ll test it out. This scraper only fetches the content from the root directory and some doc files. Those files might not answer Huy’s question accurately. Let me try it; I have my full setup ready offline. The content is already prepared, not online. This was generated directly, so it doesn’t have it either.</p>\n<p><strong>01:07:07</strong> This scraper fetches the full content, so it’s more complete. Let me try asking questions like Huy’s or Hoàng’s. Let’s try BC chat and ask a question there. Do you have it? Ah no. Maybe the context is too large, and I haven’t figured out how to integrate it properly into the knowledge retrieval part.</p>\n<p><strong>01:09:19</strong> The retrieval process is very optimized. This text file has tens of thousands of lines, tens of thousands! Let’s open it and see. Are you using a mini machine? Try switching to a more powerful machine to see if it runs better. The mini machine is a bit weak. Two million words... how is it even handling that? I think you’d need a dedicated server to run it efficiently. I’m curious how it's even running; we’re talking about 29U words, as we saw. Multiply that by 4, and the number is huge. The size... Let's follow up and see. Ok, so you’re working directly from the context, right? You’re querying like a typical query vb, rather than feeding all the data into the context.</p>\n<p><strong>01:10:57</strong> Right, exactly. I’m not sure how the retrieval in this diffy system works. I don’t know if it’s retrieving the correct data or if it’s retrieving at all. I haven’t been able to trace it, but I have a tracing tool that I can test later to see how it works. But the idea is that if the retrieval works like this, it probably won’t give accurate results. You’re unsure about how much data it's running, right? It seems to only prefer 2-300 items, and that’s not enough data for these kinds of tasks. This requires at least several hundred data points. So yeah, this is still a work in progress.</p>\n<p><strong>01:11:35</strong> Just joking, there’s always the AI Club at the company! Oh, so is this the full version, or is it the fixed one? If it’s fixed, demo it for us in the office, and try to leave it for me. OK, let me see. It still hasn’t built, so people are just watching for now. The build seems to have some issues, can everyone see the screen?</p>\n<p><strong>01:13:08</strong> So, this week, as I mentioned last week, I will upload the sync.Map article. I think it's really useful, with details that give people using Go a general overview of maps. Regarding sync.Map, let's first go over the context. When writing maps, especially concurrent maps or concurrent operations, before version 1.16, it wouldn’t show any errors, but it wasn’t safe either. From version 1.16 onward, it throws an error like this. So to solve this issue, people usually write maps with a sync package, like using manual sync.RWMutex.</p>\n<p><strong>01:13:56</strong> Besides that, there’s another option called sync.Map. Later, I’ll explain why this option exists and what its use case is. This sync.Map was created so that you don’t have to worry much about using mutexes to lock data for synchronization. You just use it. It’s as simple as this, and it’s friendly, just like using a map to check values. For example, when you load a key with a value, if it's available, it returns true; otherwise, it returns false, just like a regular map.</p>\n<p><strong>01:14:38</strong> Additionally, it has several handy functions. For example, version 12.23 has <code>clear</code> to clear everything, <code>load</code> to get a value, <code>store</code> to update or store a key, and so on. Besides writing concurrently, when you range (loop) over a map, race conditions can also occur. However, with sync.Map’s range function, it handles that, so you don’t have to worry about it. It doesn’t behave like a typical range function. However, it doesn’t give you a fully consistent snapshot. When you first enter, the snapshot may not be updated. So, during this, you have to change your writing method, but at least it won’t error like this.</p>\n<p><strong>01:16:06</strong> Now, let’s go over how it works. When you write and define the map, it’s structured with two maps. At this point, you might be thinking, “Wow, this sounds like it’s heavy on RAM and memory!” There’s a Read-Only map and a Dirty map. From this, you can infer that values, when written, will be updated in the Dirty map. It just keeps updating there, while the Read-Only map.</p>\n<p><strong>01:16:46</strong> The Read-Only map will always be used when you're reading. Meanwhile, the writes will always be made to the Dirty map. As for the underlying flow, we’ll look at the chart in a moment to better understand it. Both of these maps have a common point: they both use a pointer called an entry. Pay attention to this part to make the flow easier to follow. For example, when you add a new entry, it will be added to the Dirty map, and both will point to this entry. This works as a flag that indicates the map has been changed. So, at this point, the Read-Only map is no longer the most up-to-date version. The system will know that the Dirty map is the one to read from.</p>\n<p><strong>01:17:27</strong> This diagram shows that, for example, when you update a value, since it’s using a pointer underneath, you only need to update the pointer itself, not each value as you would in a traditional map. To achieve this, the system implements a mechanism that defines three states for the entry pointer. The first state is the <strong>normal state</strong>, meaning that the old values in the map are still intact and can be used, without any issues. The second state is <strong>amended</strong>, meaning that the entry has been modified. And the third state is the <strong>delete state</strong>, where an entry has been deleted from the map, but it hasn’t been completely removed. It’s still held in a transitional state, and the entry pointer is moved to a new position, but it hasn’t been fully removed yet.</p>\n<p><strong>01:18:59</strong> The pointer <code>entry</code> is assigned to the <code>new entry</code>, but it hasn’t been removed yet. The <code>expired state</code> refers to complete deletion, like a hard delete, meaning the entry is completely removed from the map. To help visualize this, you can refer to this flow: for example, at the beginning, the map has a <code>key1</code> and <code>value1</code>, and at this point, the <code>Dirty map</code> has nothing, meaning nothing has been added or changed yet. Then, if you add a <code>key2</code>, it will be added to the <code>Dirty map</code>, and at this point, the map is marked as <code>amended</code> because a <code>flag</code> indicating <code>amended</code> is set here.</p>\n<p><strong>01:19:40</strong> Afterward, when you delete a <code>key</code>, the map will be assigned a <code>new entry</code>, right? The same thing happens on the other side, as it is also assigned a <code>new entry</code>, similar to the previous diagram. In essence, you’re only updating the pointer without having to update the values themselves. Then, after completing the deletion, to promote the <code>Dirty map</code>, you must update it through the <code>Read Only map</code> so that the <code>Dirty map</code> returns to a <code>new state</code>, like resetting it to the original state.</p>\n<p><strong>01:20:18</strong> Similarly, when adding a new <code>key3</code>, after the state has returned to the <code>new state</code>, and you add <code>key3</code>, the system identifies that the previous entry has been deleted entirely. This means that next time when it compares with the <code>Dirty map</code>, it knows that the <code>value1</code> has been deleted and no longer exists. At this point, the <code>Read Only map</code> will only contain <code>key2</code> and <code>key3</code>.</p>\n<p><strong>01:20:51</strong> Due to this, <code>sync.Map</code> does not have a <code>len</code> function for users to utilize. This is because, if you used the <code>len</code> function here, it would not account for the actual values, as it would count even those that have been expired or deleted. As you can see, because <code>sync.Map</code> is structured this way, its use case is recommended for scenarios that require more reading (<code>read</code>) than writing (<code>write</code>). If you perform a lot of <code>write</code> or <code>delete</code> operations, just imagine the pointer being used continuously, and there’s even an issue reported by the Go team that this map is never garbage collected.</p>\n<p><strong>01:21:36</strong> Later, the Go team confirmed that this <code>sync.Map</code> was designed primarily to support some of the internal Go Library processes. If you find it handy because of its user-friendly functions, you can use it, but for use cases that involve storing (<code>store</code>), updating, or deleting often, it’s not recommended, as it may slow down the system.</p>\n<p><strong>01:22:24</strong> That’s about it. I’ve written some code based on this topic, and there’s a blogger who shares detailed posts on this subject, so you might want to follow them. Oh, what’s the topic, Phát? Show me the post again. Ah, <code>sync.Map</code>, right? <code>Sync.Map</code>. Does it differ from what you just passed in? What’s different? I think it does. The point is that I remember, depending on the community, people might have different use cases. For instance, if someone wants to implement something specific, they can adapt it as needed.</p>\n<p><strong>01:23:30</strong> You can see that some people add an extra layer on top for their own use cases. For example, some want to implement generics on <code>sync.Map</code>. This is partly because of the linking issue I mentioned earlier, where the map isn’t garbage collected. That’s the problem. The Go team has already confirmed that this behavior is intentional, and they won’t fix it. They’re not going to change it, right? So now, what the community does is figure out how to work around it. They like how easy <code>sync.Map</code> is to use, with those nice functions, so they just add another layer to customize it further, making it usable for their specific needs.</p>\n<p><strong>01:24:07</strong> Why are we discussing this old clip now? Oh, it’s just an insight for people to use. This use case can be applied to enterprise environments too. For example, in enterprise projects, if we use <code>map</code> and need concurrency, typically, people would write a custom <code>struct</code>, add a <code>mutex</code>, and then write everything themselves. But <code>sync.Map</code> is handy, as I showed earlier, with functions that follow certain standards. If you want to <code>load</code>, you have to call a specific function, and everything is structured that way, making it more reliable.</p>\n<p><strong>01:24:50</strong> People usually write a custom <code>struct</code>, then add a <code>mutex</code>, and start writing all the necessary logic themselves. Meanwhile, <code>sync.Map</code> is really handy. As I showed you earlier, it has several functions that adhere to a specific standard. If you want to <code>load</code>, you must call a specific function. This structure ensures consistency. However, you still need to be aware of the trade-offs when using <code>sync.Map</code>, making sure to apply it correctly in the right context. Right, so you have to understand the proper workflow and <code>map</code> usage.</p>\n<p><strong>01:25:26</strong> Phát: Yes, about <code>Map</code>. Ok, thanks, Phát. Now, let’s quickly get through a few things. Thành, I need about 10 more minutes from the team. It’ll take a bit more time because I’ve received a total of 11 submissions for the test. Not many have attached images, so some of you can review them. Our deadline is set for the 20th, which is next week. I think earlier, I mentioned the 27th, or was it 26th or 27th? Anyway, that's the deadline. So, please review everything this week and get the submissions ready. This test is important because the market is shifting significantly, and there’s a big change in the demand for software roles.</p>\n<p><strong>01:26:15</strong> Of course, the demand is still there, but the volume has decreased. That's why I refer to it as a shift in the market demand, similar to what happened around 2014, where it’s like things are changing all over again. New technology is coming out, new opportunities, new markets, and emerging potentials. So, this test will be essential in helping us assess, especially when it comes to team culture. We’re taking this opportunity to evaluate the team, particularly to see how the research study team and the consulting team are becoming more distinct.</p>\n<p><strong>01:27:36</strong> There’s a clear distinction between the two teams now. Like I mentioned in the post on Notion about two weeks ago, this distinction is becoming more pronounced. In the future, there will be more specific policies related to different benefits between these two teams. But for now, as you can see, OGIF is gradually becoming a session where we report on all the studies that the team has been reviewing and reporting back on. Some of those reports might be added later, and you can see that some team members have been picking up new knowledge and sharing it.</p>\n<p><strong>01:27:36</strong> Gradually, it's becoming clearer that we want this differentiation to become more distinct over time. And there will be clear policies around this. So, those who enjoy diving deep into topics and taking them to the level of MVP, or applying them in actual projects, or going deeper into knowledge, they will get different benefits. Those who don't necessarily want to focus on study-related topics can continue working on projects as usual, but there will be other issues involved, which I've listed in the Notion link from two weeks ago. Everyone should review that link to understand the direction we're going in. This test is designed to assess how well you can keep up with new knowledge and how aligned you are with the culture during this time of significant changes.</p>\n<p><strong>01:29:20</strong> Because of these goals, I’ll be the only one grading this test. None of the other team members will be grading. Everyone has to do it, and I’ve set the standard for this. So, the important thing is that everyone does the test themselves. Even if the quality isn’t the best, it’s fine. I’ll just give it a lower score, but as long as it’s completed, you’ll pass. The immediate outcome I see from this is that I’ll group the results into two clusters.</p>\n<p>The Foundation team and the Lab team, they’re still the core teams we’ve had for the past eight or nine years. This is the main announcement. If you’ve finished your test and feel like you can improve based on what I’ve just said, the Foundation team and the Lab team will still be prioritized in various aspects. So, if you feel like you did the test carelessly, please take some time to do it thoroughly. Focus on two things: the culture aspect and the knowledge.</p>\n<p><strong>01:29:56</strong> The immediate result you’ll see is that I’ll group the results into two clusters. The Foundation team and the Lab team will remain the core of our team from now until the next eight or nine years. That’s the main announcement. Out of these 11 submissions, if anyone feels they can improve after hearing what I’ve said, please focus on making it better, especially since the Foundation and Lab teams will be prioritized more in different areas. So, if you feel like you’ve done it hastily, take the time to refine it. Check two things: the culture aspect and the latest, hottest topic cluster, which right now is LLM.</p>\n<p>But in reality, our team still covers many different areas. We still have people focusing on design, and others still working on Go, right? Blockchain might have moved a bit out of the spotlight, and the market is going sideways, but consulting still demands a lot of expertise in those areas.</p>\n<p><strong>01:31:46</strong> Regarding mini apps for Telegram, they quickly clone them, and now the business logic (BL) and tech (TCH) approaches have shifted a bit from the early days. But for consulting, we can still use them as usual, or we can view them from a different angle, where they become a new asset class. As developers, we should look at how these affect our workflow and how we manage assets.</p>\n<p><strong>01:32:29</strong> That’s the matter concerning the test. Pay attention to that. Second, as mentioned earlier, regarding team direction and numbers, I mentioned the Notion link I sent earlier. The Foundation team, which started over again, initially had just three people, and then gradually it grew to four, then five. We added Quan, Hiếu, and others. Initially, it was just three of us, but now the team is much stronger. With 40 people, all highly skilled, we’ll certainly move faster. That’s the general overview, so everyone should be aware of the current situation.</p>\n<p><strong>01:33:12</strong> Third, Huy Nguyễn, once you’re done, next week please take a look at the ICY numbers. Earlier, you mentioned the numbers were starting to grow, so we’ll need to review and balance those out. For this task, Huy and Thành, please take charge and ensure it’s handled properly. Thành also has an additional task, which is to review benefits for the Lab team members and propose something. It could be considered as a payon, but it won’t go through the normal channels, as there will be a different mechanism for this.</p>\n<p><strong>01:33:52</strong> But the Lab team members will have that, and everyone’s familiar with it. Lastly, regarding the LLM, in the current question list, there’s an important question about how to use LLM externally and how to adapt it. Emphasize that question, as it’s about knowledge discovery. The test question is not only about using it but about all the tools our team currently uses. When some people use them effectively and others less so, it creates a very clear spectrum, those who are weaker remain weaker, and those who are stronger stand out much more.</p>\n<p><strong>01:34:38</strong> We want to raise the standard. We want to shorten that spectrum, to make it as compact as possible. Right now, the gap is too wide. Beyond using tools for discovery, this question also asks us to look at how our field of work can apply these tools to elevate our competencies and make us more productive. That’s the whole issue, so everyone should confirm whether what they’ve done is correct or not. It has a deeper meaning than it seems.</p>\n<p><strong>01:35:20</strong> Lastly, to wrap up today’s session, Thành, for the next OGIF meetings, apart from diving deeper into use cases, there are things Tom has done related to building the structure of an LLM app. We could take that and analyze it. Let’s break it down and dive deeper into it.</p>\n<p><strong>01:35:56</strong> Hopefully, everyone passes the test so we can all have a good time. Next week, there will be another test. Next week, Minh L., can you do a demo? Continue with the finite state machine, FSM. As part of our focus on foundational technologies like blockchain and AI, the key point is that engineers will have a different path forward. The goal is to understand how large systems operate. In the future, if you’re not the one handling data manipulation, AI will do that for us, we won’t need to design things ourselves or do junior-level tasks anymore.</p>\n<p><strong>01:37:35</strong> The only way to become senior is to understand the issues and work on architecture. The finite state machine plays an important role, especially in scaling, something we’ve talked about a lot. Minh has read through it and understood the direction we’re aiming for. So, we need to do a comparison between the types of general servers it covers. State machine-based servers versus event-based servers. Then create a sample to show how it’s modeled, implemented using Erlang. Erlang already has the frameworks for it.</p>\n<p><strong>01:39:01</strong> This topic will proceed when Minh Lưu is ready. If it’s not next week, it could be in two weeks. I suggest that the backend team and the senior team gather together, and if there’s anything, confirm it beforehand. This topic is critical for software analysis and design. It’s a very important session. Up until now, we’ve only talked about modeling and doing C4 diagrams, but Erlang is the language that goes deepest into this area. Most people don’t know it entirely. We don’t necessarily need to learn Erlang, but we can look at how they design and build systems to handle this area properly, as they already have frameworks available. We just need to plug them in and use them.</p>\n<p><strong>01:39:37</strong> Speaking of which, October 20th is a Sunday, and Mỹ, Ngọc, and Giang have already posted about it. The ladies are going out on that day, and for those not in Saigon, the team representatives will wish everyone prosperity. It seems like wishing prosperity is the most appropriate thing to say in this situation. Any other wishes might not fit as well. Alright, so if anyone wants to join, register with Mỹ to book a table and plan accordingly.</p>\n<p><strong>01:41:19</strong> Thành, in the upcoming meetings, structure things into talks. Then set the goal for that. Our team now has a Builder Club as well. I’ll look into how the team members who used to work on Super Bit and console are stabilizing things, and I’ll restructure afterward. This time, it seems like we’ve had a good rest. Alright, does anyone have any questions about the test? If not, we’ll wrap up here. Alright, goodbye everyone, see you next week. Thanks, Thành, and thanks to everyone.</p>\n<hr>","frontmatter":{"tags":["office-hours","ogif","discord"],"title":"OGIF Office Hours #28 - Golang sync.Map, Generative AI UX design patterns, Yelp's AI use cases, Design patterns in LLM application, and Dify github analyzer","short_title":"#28 Go sync.Map, AI UX, Yelp AI, LLM Patterns, Git Analysis","date":"2024-10-21T00:00:00.000Z","description":"OGIF Office Hours #28 covered Go Weekly #16 by Phat on sync.Map concurrency, Nam's Product Commentary #4 on Generative AI UX design patterns, Dat Nguyen's presentation on Yelp's AI use cases including recommendation systems, Hoang's discussion on LLM application design patterns, and Cat's demonstration of a Dify-based Git repository analysis tool.","authors":["innno_"]},"slug":["updates","ogif","28-20241018"],"backlinks":[],"tocItems":[],"metadata":{"created":"Mon Oct 21 2024 00:00:00 GMT+0000 (Coordinated Universal Time)","updated":null,"author":"innno_","coAuthors":[],"tags":["office-hours","ogif","discord"],"folder":"updates/ogif","wordCount":19073,"readingTime":"96m","characterCount":104722,"blocksCount":217,"tokenId":"","permaStorageId":"","title":"OGIF Office Hours #28 - Golang sync.Map, Generative AI UX design patterns, Yelp's AI use cases, Design patterns in LLM application, and Dify github analyzer","authorRole":"","image":"","firstImage":null},"isListPage":false},"__N_SSG":true}