{"pageProps":{"directoryTree":{"/pinned":{"label":"Pinned Notes","children":{"/culture/readme":{"label":"Notes on our culture","children":{}},"/culture/ogif-intro":{"label":"OGIF - Oh God It's Friday","children":{}}}},"/":{"label":"Home","children":{"/earn":{"label":"Earn","children":{"/earn/000-productivity":{"label":"Productivity","children":{}},"/earn/001-quality":{"label":"Software Quality","children":{}},"/earn/002-open-source":{"label":"Open Source","children":{}},"/earn/003-liquidity":{"label":"Liquidity","children":{}},"/earn/readme":{"label":"👾 Open bounties","children":{}}}},"/playground":{"label":"Playground","children":{"/playground/rfc":{"label":"RFC","children":{"/playground/rfc/readme":{"label":"RFCs","children":{}},"/playground/rfc/000-template":{"label":"000 RFC template","children":{}}}},"/playground/topics":{"label":"Topics","children":{"/playground/topics/blockchain":{"label":"Blockchain","children":{"/playground/topics/blockchain/build-custom-ai-agent-with-elizaos":{"label":"Build custom AI Agent with ElizaOS","children":{}},"/playground/topics/blockchain/web3-development-with-foundry":{"label":"Web3 Development with Foundry","children":{}},"/playground/topics/blockchain/cross-chain-transfers-implementing-a-token-swap-from-base-chain-to-bitcoin":{"label":"Implement a Token Swap from the Base chain to Bitcoin for cross-chain transactions","children":{}},"/playground/topics/blockchain/ton_core_concept":{"label":"Ton's base concepts","children":{}},"/playground/topics/blockchain/ton_blockchain_of_blockchains":{"label":"Ton: Blockchain of blockchains","children":{}},"/playground/topics/blockchain/introduce-to-solana-token-2022-new-standard-to-create-a-token-in-solana":{"label":"Introduce to Solana Token 2022 - new standard to create a token in solana","children":{}},"/playground/topics/blockchain/solana-core-concept":{"label":"Solana core concepts","children":{}},"/playground/topics/blockchain/metaplex-nft-compression":{"label":"Metaplex NFT Compression","children":{}},"/playground/topics/blockchain/plonky2":{"label":"Plonky2","children":{}},"/playground/topics/blockchain/polygon-zkevm-architecture":{"label":"Polygon zkEVM architecture","children":{}},"/playground/topics/blockchain/starknet-architecture":{"label":"StarkNet architecture","children":{}},"/playground/topics/blockchain/zk-snarks":{"label":"zk-SNARKs","children":{}},"/playground/topics/blockchain/layer-2":{"label":"Layer 2: Scaling Solutions for Ethereum","children":{}},"/playground/topics/blockchain/solana-account":{"label":"Solana Account","children":{}},"/playground/topics/blockchain/foundational-topics":{"label":"Foundational Topics","children":{"/playground/topics/blockchain/foundational-topics/zero-knowledge-proofs":{"label":"Zero-knowledge Proofs","children":{}},"/playground/topics/blockchain/foundational-topics/blocks":{"label":"Blocks","children":{}},"/playground/topics/blockchain/foundational-topics/distributed-systems":{"label":"Distributed systems","children":{}},"/playground/topics/blockchain/foundational-topics/pos":{"label":"PoS","children":{}},"/playground/topics/blockchain/foundational-topics/smart-contract":{"label":"Smart Contract","children":{}},"/playground/topics/blockchain/foundational-topics/topics":{"label":"Topics","children":{}}}},"/playground/topics/blockchain/multisign-wallet":{"label":"Multisign wallet","children":{}},"/playground/topics/blockchain/anchor-framework":{"label":"Anchor framework","children":{}},"/playground/topics/blockchain/blockchain-bridge":{"label":"Blockchain Bridge","children":{}},"/playground/topics/blockchain/nft-fractionalization":{"label":"NFT Fractionalization","children":{}},"/playground/topics/blockchain/how-tokens-work-on-solana":{"label":"How Tokens Work on Solana","children":{}},"/playground/topics/blockchain/liquidity-pool":{"label":"Liquidity pool","children":{}}}},"/playground/topics/frontend":{"label":"Frontend","children":{"/playground/topics/frontend/report":{"label":"Report","children":{"/playground/topics/frontend/report/frontend-report-march-2025":{"label":"March 2025","children":{}},"/playground/topics/frontend/report/frontend-report-february-2025":{"label":"February 2025","children":{}},"/playground/topics/frontend/report/frontend-report-january-2025":{"label":"January 2025","children":{}},"/playground/topics/frontend/report/frontend-report-second-half-of-november-2024":{"label":"Nov 2024 (Second Half)","children":{}},"/playground/topics/frontend/report/frontend-report-first-half-of-november-2024":{"label":"Nov 2024 (First Half)","children":{}},"/playground/topics/frontend/report/frontend-report-october-2024":{"label":"October 2024","children":{}},"/playground/topics/frontend/report/frontend-report-september-2024":{"label":"September 2024","children":{}},"/playground/topics/frontend/report/frontend-report-august-2024":{"label":"August 2024","children":{}},"/playground/topics/frontend/report/frontend-report-july-2024":{"label":"July 2024","children":{}}}},"/playground/topics/frontend/react":{"label":"React","children":{"/playground/topics/frontend/react/code-splitting":{"label":"Code splitting","children":{}},"/playground/topics/frontend/react/component-composition-patterns":{"label":"Component composition patterns","children":{}},"/playground/topics/frontend/react/design-system-integration":{"label":"Design system integration","children":{}},"/playground/topics/frontend/react/hook-architecture":{"label":"Hook architecture","children":{}},"/playground/topics/frontend/react/rendering-strategies":{"label":"Rendering strategies","children":{}},"/playground/topics/frontend/react/state-management-strategy":{"label":"State management strategy","children":{}},"/playground/topics/frontend/react/testing-strategies":{"label":"Testing strategies","children":{}}}},"/playground/topics/frontend/websockets":{"label":"WebSockets","children":{}},"/playground/topics/frontend/from-markup-to-pixels-a-look-inside-the-dom-cssom-and-render-tree":{"label":"From Markup to Pixels - A look inside the DOM, CSSOM, and Render Tree","children":{}},"/playground/topics/frontend/window-and-iframe-communication":{"label":"Window and iframe communication","children":{}},"/playground/topics/frontend/applying-mock-service-worker-msw-for-seamless-web-development":{"label":"Applying Mock Service Worker (MSW) for Seamless Web Development","children":{}},"/playground/topics/frontend/render-optimization-in-data-fetching-libraries":{"label":"Render optimization in data-fetching libraries","children":{}},"/playground/topics/frontend/a-fragment-colocation-pattern-with-react-apollo-graphql":{"label":"A Fragment Colocation Pattern with React & Apollo GraphQL","children":{}},"/playground/topics/frontend/scroll-driven-animations":{"label":"Scroll-driven animations","children":{}},"/playground/topics/frontend/react-server-component":{"label":"React Server Components, NextJs Route and Data Fetching","children":{}},"/playground/topics/frontend/url-formats-for-sharing-via-social-networks":{"label":"URL formats for sharing via social networks","children":{}},"/playground/topics/frontend/shadow-dom":{"label":"Shadow DOM","children":{}},"/playground/topics/frontend/retain-scroll-position-in-infinite-scroll":{"label":"Retain scroll position in infinite scroll","children":{}},"/playground/topics/frontend/continuous-translation":{"label":"Continuous Translation","children":{}},"/playground/topics/frontend/what-is-pnpm-compare-to-npmyarn":{"label":"What is PNPM Compare To NPM/Yarn","children":{}},"/playground/topics/frontend/why-micro-frontend":{"label":"Why Micro Frontend","children":{}},"/playground/topics/frontend/why-we-chose-our-tech-stack-accelerating-development-with-a-robust-frontend-solution":{"label":"Why We Chose Our Tech Stack Accelerating Development With A Robust Frontend Solution","children":{}},"/playground/topics/frontend/tackling-server-state-complexity-in-frontend-development":{"label":"Tackling Server State complexity in Frontend Development","children":{}},"/playground/topics/frontend/variable-fonts":{"label":"Variable Fonts","children":{}},"/playground/topics/frontend/when-should-we-use-usereducer-instead-of-usestate":{"label":"When should we use useReducer instead of useState?","children":{}},"/playground/topics/frontend/preserving-and-resetting-state-in-react":{"label":"Preserving and Resetting state in React","children":{}},"/playground/topics/frontend/mixpanel":{"label":"Mixpanel","children":{}},"/playground/topics/frontend/validation-with-zod":{"label":"Validation with Zod","children":{}},"/playground/topics/frontend/parse-dont-validate-in-typescript":{"label":"Parse, don't validate in TypeScript","children":{}},"/playground/topics/frontend/webassembly":{"label":"Webassembly","children":{}},"/playground/topics/frontend/singleton-design-pattern-in-javascript":{"label":"Singleton Design Pattern in Javascript","children":{}},"/playground/topics/frontend/an-introduction-to-atomic-css":{"label":"An Introduction to Atomic CSS","children":{}},"/playground/topics/frontend/intro-to-indexeddb":{"label":"Intro to IndexedDB","children":{}},"/playground/topics/frontend/the-fundamental-of-web-performance":{"label":"The fundamental of web performance","children":{}},"/playground/topics/frontend/wai-aria":{"label":"WAI-ARIA","children":{}},"/playground/topics/frontend/build-polymorphic-react-components-with-typescript":{"label":"Build polymorphic React components with Typescript","children":{}},"/playground/topics/frontend/threejs":{"label":"Threejs","children":{"/playground/topics/frontend/threejs/cameras-in-threejs":{"label":"Cameras in ThreeJS","children":{}}}},"/playground/topics/frontend/prevent-layout-thrashing":{"label":"Prevent Layout Thrashing","children":{}},"/playground/topics/frontend/pure-css-parallax":{"label":"Pure CSS Parallax","children":{}},"/playground/topics/frontend/css-container-queries":{"label":"CSS Container Queries","children":{}},"/playground/topics/frontend/hsl-color":{"label":"HSL Color","children":{}},"/playground/topics/frontend/mitigate-blocking-the-main-thread":{"label":"Mitigate blocking the main thread","children":{}},"/playground/topics/frontend/css-in-js":{"label":"CSS in JS","children":{}},"/playground/topics/frontend/dark-mode-flickers-a-white-background-for-a-fraction-of-a-second":{"label":"Dark mode flickers a white background for a fraction of a second","children":{}},"/playground/topics/frontend/why-dom-manipulation-is-slow":{"label":"Why DOM manipulation is slow?","children":{}},"/playground/topics/frontend/why-virtual-dom-is-fast":{"label":"Why Virtual DOM is fast?","children":{}},"/playground/topics/frontend/vitejs-native-modules":{"label":"ViteJS native modules","children":{}},"/playground/topics/frontend/javascript-modules":{"label":"JavaScript modules","children":{}},"/playground/topics/frontend/atomic-design-pattern":{"label":"Atomic Design Pattern","children":{}},"/playground/topics/frontend/focus-trap":{"label":"Focus trap","children":{}},"/playground/topics/frontend/html-inert":{"label":"HTML inert","children":{}},"/playground/topics/frontend/useeffect-double-calls-in-react-18":{"label":"useEffect double calls in React 18","children":{}},"/playground/topics/frontend/react-18":{"label":"React 18","children":{}},"/playground/topics/frontend/remix-versus-nextjs":{"label":"Remix Versus Nextjs","children":{}},"/playground/topics/frontend/zaplib-post-mortem":{"label":"Zaplib post-mortem","children":{}},"/playground/topics/frontend/parallelism-in-javascript":{"label":"Parallelism in JavaScript","children":{}},"/playground/topics/frontend/mpa-spa-and-partial-hydration":{"label":"MPA, SPA and Partial Hydration","children":{}},"/playground/topics/frontend/micro-frontends-microservices-for-frontend-development":{"label":"Micro Frontends Microservices For Frontend Development","children":{}},"/playground/topics/frontend/using-correct-html-element-to-increase-website-accessibility":{"label":"Using Correct Html Element To Increase Website Accessibility","children":{}},"/playground/topics/frontend/remove-unused-css-styles-from-bootstrap-using-purgecss":{"label":"Remove Unused CSS Styles From Bootstrap Using Purgecss","children":{}}}},"/playground/topics/ai":{"label":"AI","children":{"/playground/topics/ai/securing-your-remote-mcp-servers":{"label":"Securing your remote MCP servers","children":{}},"/playground/topics/ai/tool-level-security-for-remote-mcp-servers":{"label":"Tool-Level Security for Remote MCP Servers","children":{}},"/playground/topics/ai/model-context-protocol":{"label":"Intro to Model Context Protocol","children":{}},"/playground/topics/ai/building-llm-system":{"label":"Building LLM System","children":{"/playground/topics/ai/building-llm-system/quantization-in-llm":{"label":"Quantization for large language models","children":{}},"/playground/topics/ai/building-llm-system/graphrag":{"label":"GraphRAG - Building a knowledge graph for RAG system","children":{}},"/playground/topics/ai/building-llm-system/guardrails-in-llm":{"label":"Guardrails in LLM","children":{}},"/playground/topics/ai/building-llm-system/react-in-llm":{"label":"ReAct(Reason + Act) in LLM","children":{}},"/playground/topics/ai/building-llm-system/rewoo-in-llm":{"label":"ReWOO: Reasoning without observation - A deeper look","children":{}},"/playground/topics/ai/building-llm-system/model-selection":{"label":"Model selection","children":{}},"/playground/topics/ai/building-llm-system/logs-pillar":{"label":"Logging","children":{}},"/playground/topics/ai/building-llm-system/metric-pillar":{"label":"Metrics","children":{}},"/playground/topics/ai/building-llm-system/observability-in-ai-platforms":{"label":"Observability in AI platforms","children":{}},"/playground/topics/ai/building-llm-system/trace-pillar":{"label":"Tracing","children":{}},"/playground/topics/ai/building-llm-system/intent-classification-by-llm":{"label":"Intent classification by LLM","children":{}},"/playground/topics/ai/building-llm-system/llm-as-a-judge":{"label":"LLM as a judge","children":{}},"/playground/topics/ai/building-llm-system/use-cases-for-llm-applications":{"label":"Use cases for LLM applications","children":{}},"/playground/topics/ai/building-llm-system/the-rise-of-ai-applications-with-llm":{"label":"The rise of AI applications with LLM","children":{}},"/playground/topics/ai/building-llm-system/evaluation-guideline-for-llm-application":{"label":"Evaluation guidelines for LLM applications","children":{}},"/playground/topics/ai/building-llm-system/prevent-prompt-injection":{"label":"Prevent prompt injection","children":{}},"/playground/topics/ai/building-llm-system/building-llm-system":{"label":"§ Building LLM system","children":{}},"/playground/topics/ai/building-llm-system/multi-agent-collaboration-for-task-completion":{"label":"Multi-agent collaboration for task completion","children":{}},"/playground/topics/ai/building-llm-system/multimodal-in-rag":{"label":"Multimodal in RAG","children":{}}}},"/playground/topics/ai/digest":{"label":"Digest","children":{"/playground/topics/ai/digest/ai-digest-02":{"label":"AI digest #2 New command Aider, OpenHands, Qwen2.5 Coder 32B, Predicted Output","children":{}},"/playground/topics/ai/digest/ai-digest-01":{"label":"AI digest #1 Aider reasoning, OpenAI Realtime API, Cline - pre Claude-dev ","children":{}}}},"/playground/topics/ai/copilots":{"label":"Copilots","children":{"/playground/topics/ai/copilots/projects-operations":{"label":"Project Operations Copilots","children":{}},"/playground/topics/ai/copilots/team-copilots":{"label":"Team Copilots","children":{}}}},"/playground/topics/ai/text-to-mongodb":{"label":"Natural Language to Database Queries: Text-to-MongoDB","children":{}},"/playground/topics/ai/use-cases":{"label":"Use Cases","children":{"/playground/topics/ai/use-cases/salesforce":{"label":"Salesforce use cases","children":{}},"/playground/topics/ai/use-cases/yelp":{"label":"Yelp use cases","children":{}}}},"/playground/topics/ai/evaluate-chatbot-agent-by-simulated-user":{"label":"Evaluate Chatbot Agent by User Simulation","children":{}},"/playground/topics/ai/journey-of-thought-prompting":{"label":"Journey of Thought Prompting: Harnessing AI to Craft Better Prompts","children":{}},"/playground/topics/ai/llm-tracing-in-ai-system":{"label":"LLM tracing in AI system","children":{}},"/playground/topics/ai/caching-with-rag-system":{"label":"Evaluating caching in RAG systems","children":{}},"/playground/topics/ai/generative-ui":{"label":"What is Generative UI?","children":{}},"/playground/topics/ai/re-ranking-in-rag":{"label":"Re-ranking in RAG","children":{}},"/playground/topics/ai/function-calling":{"label":"Function calling in AI agents","children":{}},"/playground/topics/ai/building-llm-powered-tools-with-dify":{"label":"Streamlining Internal Tool Development with Managed LLMOps: A Dify Case Study","children":{}},"/playground/topics/ai/thumbs-up-and-thumbs-down-pattern":{"label":"Thumbs up and Thumbs down pattern","children":{}},"/playground/topics/ai/supervisor-ai-agents":{"label":"Building Agent Supervisors to Generate Insights","children":{}},"/playground/topics/ai/raptor-llm-retrieval":{"label":"RAPTOR: Tree-based Retrieval for Language Models","children":{}},"/playground/topics/ai/proximal-policy-optimization":{"label":"Proximal Policy Optimization","children":{}},"/playground/topics/ai/a-grand-unified-theory-of-the-ai-hype-cycle":{"label":"A Grand Unified Theory of the AI Hype Cycle","children":{}},"/playground/topics/ai/developing-rapidly-with-generative-ai":{"label":"Developing rapidly with Generative AI","children":{}},"/playground/topics/ai/rlhf-with-open-assistant":{"label":"RLHF with Open Assistant","children":{}},"/playground/topics/ai/story-map-for-llms":{"label":"Story map for LLMs","children":{}},"/playground/topics/ai/adversarial-prompting":{"label":"Adversarial Prompting in Prompt Engineering","children":{}},"/playground/topics/ai/chunking-strategies-to-overcome-context-limitation-in-llm":{"label":"Chunking strategies to overcome context limitation in LLM","children":{}},"/playground/topics/ai/llms-accuracy-self-refinement":{"label":"LLM's Accuracy - Self Refinement","children":{}},"/playground/topics/ai/llm-query-caching":{"label":"Query Caching for Large Language Models","children":{}},"/playground/topics/ai/reinforcement-learning":{"label":"Introduction to Reinforcement Learning and Its Application with LLMs","children":{}},"/playground/topics/ai/foundation-model":{"label":"Foundation Models: The Latest Advancement in AI","children":{}},"/playground/topics/ai/select-vector-database-for-llm":{"label":"Select Vector Database for LLM","children":{}},"/playground/topics/ai/build-your-chatbot-with-open-source-large-language-models":{"label":"Build your chatbot with open source Large Language Models","children":{}},"/playground/topics/ai/workaround-with-openais-token-limit-with-langchain":{"label":"Workaround with OpenAI's token limit with Langchain","children":{}},"/playground/topics/ai/working-with-langchain-document-loaders":{"label":"Working with langchain document loaders","children":{}}}},"/playground/topics/golang":{"label":"Golang","children":{"/playground/topics/golang/weekly":{"label":"Weekly","children":{"/playground/topics/golang/weekly/dec-13":{"label":"#24 Go 1.24 testing/synctest experiment for time and concurrency testing","children":{}},"/playground/topics/golang/weekly/dec-06":{"label":"#23 Draft Release Notes for Go 1.24 and weak pointers in Go","children":{}},"/playground/topics/golang/weekly/nov-29":{"label":"#22 GoMLX: ML in Go without Python","children":{}},"/playground/topics/golang/weekly/nov-22":{"label":"#21 Go sync.Once is Simple","children":{}},"/playground/topics/golang/weekly/nov-15":{"label":"#20 Go Turns 15","children":{}},"/playground/topics/golang/weekly/nov-08":{"label":"#19 Writing secure Go code","children":{}},"/playground/topics/golang/weekly/nov-01":{"label":"#18 Fuzz Testing Go HTTP Services","children":{}},"/playground/topics/golang/weekly/oct-25":{"label":"#17 Leveraging benchstat Projects in Go benchmark and Go Plan9 memo on 450% speeding up calculations","children":{}},"/playground/topics/golang/weekly/oct-18":{"label":"#16 Understand sync.Map","children":{}},"/playground/topics/golang/weekly/oct-11":{"label":"#15 Go embed and Reflect","children":{}},"/playground/topics/golang/weekly/oct-04":{"label":"#14 Compile-time eval & SQLite with wazero","children":{}},"/playground/topics/golang/weekly/sep-27":{"label":"#13 Compiler Quests and Vector Vexations","children":{}},"/playground/topics/golang/weekly/sep-20":{"label":"#12 CLI Tools for K8s, REST, and Terminals","children":{}},"/playground/topics/golang/weekly/sep-13":{"label":"#11 Actors, Frameworks, and the Future of Go","children":{}},"/playground/topics/golang/weekly/sep-06":{"label":"#10 Script, Telemetry","children":{}},"/playground/topics/golang/weekly/aug-30":{"label":"#9 TinyGo, SQLite vector search, and Permify","children":{}},"/playground/topics/golang/weekly/aug-23":{"label":"#8 GoNB, kubetrim, and GopherCon UK 2024","children":{}},"/playground/topics/golang/weekly/aug-16":{"label":"#7 Go 1.23, Websockets, and Structs","children":{}},"/playground/topics/golang/weekly/aug-09":{"label":"#6 Cogent Core, Russ Cox stepping down","children":{}},"/playground/topics/golang/weekly/aug-02":{"label":"#5 Go 1.23 features, Memory, Minecraft, and More","children":{}},"/playground/topics/golang/weekly/jul-26":{"label":"#4 Ethical Hacking, HTTP Requests, Mac App Development","children":{}},"/playground/topics/golang/weekly/jul-12":{"label":"#3 Generic Collections, Generics Constraints, AI Bot","children":{}},"/playground/topics/golang/weekly/jul-05":{"label":"#2 Go 1.23 Iterators","children":{}},"/playground/topics/golang/weekly/june-27":{"label":"#1 eBPF and PGO Optimization Techniques","children":{}}}},"/playground/topics/golang/extension-interface-pattern":{"label":"Go extension interface pattern","children":{}},"/playground/topics/golang/go-import":{"label":"Go import design: using git repo path","children":{}},"/playground/topics/golang/go-package":{"label":"Package first design","children":{}},"/playground/topics/golang/go-generics-type-safety":{"label":"How does Go achieve type safety when it enables generics?","children":{}},"/playground/topics/golang/go-for-enterprise":{"label":"Go For Enterprise","children":{"/playground/topics/golang/go-for-enterprise/who-using-golang-in-enterprise":{"label":"Who is using Go in enterprise?","children":{}},"/playground/topics/golang/go-for-enterprise/enterprise-standard-language":{"label":"Go as an Enterprise Standard Language","children":{}},"/playground/topics/golang/go-for-enterprise/how-to-use-go-in-enterprise":{"label":"How to use Go in the Enterprise","children":{}},"/playground/topics/golang/go-for-enterprise/when-to-use-golang-in-enterprise":{"label":"When to use Go in the Enterprise","children":{}},"/playground/topics/golang/go-for-enterprise/why-enterprise-chose-java":{"label":"Why Enterprise Chose Java","children":{}},"/playground/topics/golang/go-for-enterprise/why-go":{"label":"Why Go?","children":{}}}},"/playground/topics/golang/compute-union-2-finite-automata":{"label":"Efficient Union of Finite Automata in Golang: A Practical Approach","children":{}},"/playground/topics/golang/approaches-to-manage-concurrent-workloads-like-worker-pools-and-pipelines":{"label":"Approaches To Manage Concurrent Workloads Like Worker Pools And Pipelines","children":{}},"/playground/topics/golang/message-queues-and-streaming-platforms-eg-kafka-nats-rabbitmq":{"label":"Message Queues And Streaming Platforms Eg Kafka Nats Rabbitmq","children":{}},"/playground/topics/golang/unit-testing-best-practices-in-golang":{"label":"Unit Testing Best Practices In Golang","children":{}},"/playground/topics/golang/profiling-in-go":{"label":"Profiling in Go","children":{}},"/playground/topics/golang/go-in-software-engineering":{"label":"Go In Software Engineering","children":{}},"/playground/topics/golang/bunk-license-check":{"label":"Bunk license check","children":{}},"/playground/topics/golang/go-concurrency":{"label":"Go Concurrency","children":{}},"/playground/topics/golang/slice-and-array-in-golang":{"label":"Slice And Array In Golang","children":{}},"/playground/topics/golang/use-go-selenium-to-crawl-data":{"label":"Use Go Selenium To Crawl Data","children":{}},"/playground/topics/golang/connecting-vim-with-golang":{"label":"Connecting Vim With Golang","children":{}}}},"/playground/topics/devbox":{"label":"Devbox","children":{"/playground/topics/devbox/devbox":{"label":"§ Devbox","children":{}},"/playground/topics/devbox/story":{"label":"Story","children":{"/playground/topics/devbox/story/devbox-production-success-story":{"label":"Devbox in Production: Our Success Story","children":{}},"/playground/topics/devbox/story/devbox-local-development-env":{"label":"Using Devbox to setup local development environment","children":{}},"/playground/topics/devbox/story/devbox-nix-and-our-devbox-adoption":{"label":"The overview into Nix & how we use Devbox @ Dwarves","children":{}},"/playground/topics/devbox/story/devbox-docker-adoption-and-challenges":{"label":"Our Docker adoption and its challenges","children":{}},"/playground/topics/devbox/story/devbox-a-world-before-docker":{"label":"The world before Docker","children":{}}}},"/playground/topics/devbox/guide":{"label":"Guide","children":{"/playground/topics/devbox/guide/containerless":{"label":"Ditch the Containers: Go Containerless with Devbox","children":{}},"/playground/topics/devbox/guide/devboxjson":{"label":"Devbox.json: Your Project's DNA","children":{}},"/playground/topics/devbox/guide/run-your-own-shell":{"label":"Devbox Shell: Your Dev Environment, Your Rules","children":{}}}},"/playground/topics/devbox/introduction":{"label":"Introduction","children":{"/playground/topics/devbox/introduction/the-reason-for-being":{"label":"The reason for being","children":{}},"/playground/topics/devbox/introduction/why-devbox-but-not-nix":{"label":"Devbox vs Nix: Why We Chose Simplicity","children":{}}}},"/playground/topics/devbox/research":{"label":"Research","children":{"/playground/topics/devbox/research/content-addressable-storage-in-docker":{"label":"Devbox vs Nix: Why We Chose Simplicity","children":{}},"/playground/topics/devbox/research/fixed-output-derivation":{"label":"Fixed-output Derivation in Nix","children":{}},"/playground/topics/devbox/research/nix-is-faster-than-docker-build":{"label":"Nix is Faster Than Docker Build","children":{}},"/playground/topics/devbox/research/pinning-nixpkgs":{"label":"Pinning nixpkgs in Nix","children":{}},"/playground/topics/devbox/research/shadow-copies":{"label":"Shadow Copies in Docker Builds","children":{}},"/playground/topics/devbox/research/unstable-package-installation":{"label":"Unstable Package Installation in Docker","children":{}}}}}}}},"/playground/use-cases":{"label":"Use Cases","children":{"/playground/use-cases/ai-ruby-travel-assistant-chatbot":{"label":"AI-powered Ruby travel assistant","children":{}}}},"/playground/notes":{"label":"Notes","children":{"/playground/notes/why-hollywood-and-gaming-struggle-with-ai":{"label":"Why Hollywood and gaming struggle with AI","children":{}},"/playground/notes/using-foundry-for-evm-smart-contract-developement":{"label":"Using Foundry for EVM smart contract development","children":{}},"/playground/notes/visitor-design-pattern":{"label":"Visitor design pattern, the concept, problem solution and use cases","children":{}},"/playground/notes/vietnam-tech-ecosystem-report":{"label":"Vietnam Tech Ecosystem 2024 Report","children":{}},"/playground/notes/understanding-saving-investing-and-speculating-key-differences-and-strategies":{"label":"Understanding Saving, Investing, and Speculating: Key Differences and Strategies","children":{}},"/playground/notes/writing-content-for-multimedia-guidelines":{"label":"Writing Content for Multimedia Guidelines","children":{}},"/playground/notes/working-on-a-project-interview-assessment-at-dwarves":{"label":"Working On A Project Interview Assessment At Dwarves","children":{}},"/playground/notes/writing":{"label":"Writing","children":{"/playground/notes/writing/state-explain-link":{"label":"State, Explain, Link - An all-purpose writing technique","children":{}}}},"/playground/notes/understanding-an-application-design":{"label":"Understanding An Application Design","children":{}},"/playground/notes/what-i-learned-on-design-thinking-and-software-development":{"label":"What I Learned On Design Thinking And Software Development","children":{}},"/playground/notes/xpc-services-on-macos-app-using-swift":{"label":"Xpc Services On Macos App Using Swift","children":{}},"/playground/notes/well-crafted-software":{"label":"Well Crafted Software","children":{}},"/playground/notes/what-is-kubernetes":{"label":"What Is Kubernetes","children":{}},"/playground/notes/ux-model":{"label":"UX Model","children":{}},"/playground/notes/evolutionary-database-design":{"label":"Evolutionary Database Design: Managing Change and Scaling with the System","children":{}},"/playground/notes/giving-a-talk-checklist":{"label":"Giving a talk","children":{}},"/playground/notes/database-design-circular":{"label":"Database design Circular","children":{}},"/playground/notes/a-lens-to-modern-data-engineering":{"label":"A Lens to Modern Data Engineering","children":{}},"/playground/notes/automata":{"label":"Automata","children":{}},"/playground/notes/error-handling-patterns":{"label":"Error handling patterns","children":{}},"/playground/notes/founder-liquidity":{"label":"Founder Liquidity","children":{}},"/playground/notes/security":{"label":"Security","children":{"/playground/notes/security/a-holistic-guide-to-security":{"label":"A Holistic Guide to Security","children":{}},"/playground/notes/security/how-i-came-up-with-our-security-standard":{"label":"How I came up with our Security Standard","children":{}}}},"/playground/notes/record-reward-sharing-culture":{"label":"Record and reward sharing at Dwarves","children":{}},"/playground/notes/designing-for-forgiveness":{"label":"Designing for Forgiveness: Creating Error-Tolerant Interfaces","children":{}},"/playground/notes/design-file-sharing-system-part-2-permission-and-password":{"label":"Design file-sharing system - Part 2: Permission & Password","children":{}},"/playground/notes/designing-a-model-with-dynamic-properties":{"label":"Designing a model with dynamic properties","children":{}},"/playground/notes/hybrid-search":{"label":"Evaluating search engine in RAG systems","children":{}},"/playground/notes/design-file-sharing-system-part-1-directory-structure":{"label":"Design file-sharing system - Part 1: Directory Structure","children":{}},"/playground/notes/subscription-pricing-models":{"label":"Subscription Pricing Models","children":{}},"/playground/notes/creating-a-fully-local-search-engine-on-memo":{"label":"Building a Local Search Engine for Our Memo Website","children":{}},"/playground/notes/erlang-fsm":{"label":"Erlang Finite State Machine","children":{}},"/playground/notes/observer-pattern":{"label":"Introduce the Observer pattern and its use cases","children":{}},"/playground/notes/strategy-design-pattern":{"label":"Strategy design pattern, the concept, use cases and difference with the state design pattern","children":{}},"/playground/notes/how-we-crafted-the-ogif-summarizer-bot-to-streamline-weekly-knowledge-sharing":{"label":"How we crafted the OGIF summarizer bot to streamline weekly knowledge-sharing","children":{}},"/playground/notes/feedback-mechanism":{"label":"Design feedback mechanism for LLM applications","children":{}},"/playground/notes/local-first-software":{"label":"Local-first Software","children":{}},"/playground/notes/error-handling-in-rust":{"label":"Error handling on Rust","children":{}},"/playground/notes/rust-trait":{"label":"Rust Trait","children":{}},"/playground/notes/engineering":{"label":"Engineering","children":{"/playground/notes/engineering/backend":{"label":"Backend","children":{"/playground/notes/engineering/backend/bloom-filter":{"label":"Bloom Filter","children":{}},"/playground/notes/engineering/backend/introduction-to-crdt":{"label":"Introduction to CRDT","children":{}},"/playground/notes/engineering/backend/sql-sargable-queries-and-their-impact-on-database-performance":{"label":"SQL Saragable Queries and Their Impact on Database Performance","children":{}},"/playground/notes/engineering/backend/the-removal-of-apache-kafkas-dependency-on-zookeeper":{"label":"The removal of Apache Kafka's dependency on Zookeeper","children":{}},"/playground/notes/engineering/backend/sql-and-how-it-relates-to-disk-reads-and-writes":{"label":"SQL and how it relates to Disk Reads and Writes","children":{}}}},"/playground/notes/engineering/data":{"label":"Data","children":{"/playground/notes/engineering/data/data-pipeline-design-framework":{"label":"Data Pipeline Design Framework","children":{}},"/playground/notes/engineering/data/quick-learning-vector-database":{"label":"Quick Learning Vector Database","children":{}},"/playground/notes/engineering/data/mapreduce":{"label":"MapReduce","children":{}}}},"/playground/notes/engineering/google-data-fusion":{"label":"Google Data Fusion","children":{}},"/playground/notes/engineering/google-dataproc":{"label":"Google Dataproc","children":{}},"/playground/notes/engineering/introducing-htmx-navigating-the-advantages-and-concerns":{"label":"Introducing HTMX - Navigating the Advantages and Concerns","children":{}},"/playground/notes/engineering/typesafe-client-server":{"label":"Typesafe Client Server","children":{}},"/playground/notes/engineering/golang-for-high-performance-video-streaming":{"label":"Leveraging Golang and WebRTC for High-Performance Video Streaming","children":{}},"/playground/notes/engineering/url-redirect-vs-rewrite":{"label":"URL Redirect vs. Rewrite; What’s the difference?","children":{}}}},"/playground/notes/template-method-design-pattern":{"label":"A Tour of Template method pattern with Golang","children":{}},"/playground/notes/command-pattern":{"label":"Command Pattern","children":{}},"/playground/notes/radix-sort":{"label":"Radix Sort","children":{}},"/playground/notes/state-pattern":{"label":"State Pattern","children":{}},"/playground/notes/explaining-gradient-descent-in-machine-learning-with-a-simple-analogy":{"label":"Explaining Gradient Descent in Machine Learning with a simple analogy","children":{}},"/playground/notes/organize-team-know-how-with-zettelkasten-method":{"label":"Organize team know-how with Zettelkasten Method","children":{}},"/playground/notes/dynamic-liquidity-market-a-new-form-of-concentrated-liquidity-amm-on-solana":{"label":"Dynamic Liquidity Market Maker - a new form of concentrated liquidity AMM on Solana","children":{}},"/playground/notes/how-to-talk-to-chatgpt-effectively":{"label":"How to talk to ChatGPT effectively","children":{}},"/playground/notes/memo-knowledge-base-meeting":{"label":"Memo Knowledge Base Meeting","children":{}},"/playground/notes/peep-nft":{"label":"Claim your Peeps NFT","children":{}},"/playground/notes/recording-flow":{"label":"How We Set Up a Recording Workflow for Dwarves Office Hours","children":{}},"/playground/notes/memo-publication-workflow":{"label":"Memo Publication Workflow","children":{}},"/playground/notes/history-of-structured-output-for-llms":{"label":"History of Structured Outputs for LLMs","children":{}},"/playground/notes/builder-design-pattern":{"label":"Introduce the Builder pattern and its use cases","children":{}},"/playground/notes/how-to-make-a-moc":{"label":"How to make a MOC","children":{}},"/playground/notes/prototype-design-pattern":{"label":"Going Through use cases of the prototype design pattern and it place among the creational patterns","children":{}},"/playground/notes/singleton-design-pattern":{"label":"A tour of Singleton design pattern with Golang","children":{}},"/playground/notes/echelon-x-singapore-2024-where-innovations-meet-inspiration":{"label":"Echelon X Singapore 2024: Where Innovations Meet Inspiration","children":{}},"/playground/notes/c4-modelling":{"label":"Breaking Down Complexity: The Role of Abstractions and UML in C4 Modelling","children":{}},"/playground/notes/dollar-cost-averaging":{"label":"Dollar Cost Averaging (DCA)","children":{}},"/playground/notes/how-i-create-content-for-multiple-platforms-at-dwarves":{"label":"How I Create Content for Multiple Platforms at Dwarves","children":{}},"/playground/notes/how-to-earn-reward-from-staking-dfg":{"label":"How to earn reward from staking DFG","children":{}},"/playground/notes/how-to-transfer-dfg-from-eth-to-base-for-staking":{"label":"How to bridge $DFG from Ethereum Mainnet to Base Network for staking","children":{}},"/playground/notes/design-less-present-more-with-deckset":{"label":"Design less, present more with Deckset","children":{}},"/playground/notes/level-up-your-markdown-memos":{"label":"Level Up Your Markdown Memos: Avoiding Common Pitfalls","children":{}},"/playground/notes/tech-canvas":{"label":"Tech Canvas","children":{}},"/playground/notes/how-to-recap-a-publication":{"label":"Recapping A publication","children":{}},"/playground/notes/lifecycle-of-a-publication":{"label":"Life cycle of a publication","children":{}},"/playground/notes/how-to-set-up-environment-for-editing-memo":{"label":"How to set up environment to edit memo","children":{}},"/playground/notes/_how-to-setup-crypto-wallet-to-withdraw-icy":{"label":"How to set up crypto wallet to withdraw ICY","children":{}},"/playground/notes/_how-to-withdraw-icy":{"label":"How to withdraw ICY","children":{}},"/playground/notes/how-to-take-better-screenshots-on-mac":{"label":"How To Take Better Screenshots On Mac","children":{}},"/playground/notes/how-to-push-content-on-note-d":{"label":"How to push content on memo.d.foundation","children":{}},"/playground/notes/labs-weekly-catchup-5":{"label":"Labs Weekly Catchup #5","children":{}},"/playground/notes/labs-weekly-catchup-4":{"label":"Labs Weekly Catchup #4","children":{}},"/playground/notes/labs-weekly-catchup-3":{"label":"Labs Weekly Catchup #3","children":{}},"/playground/notes/labs-weekly-catchup-2":{"label":"Labs Weekly Catchup #2","children":{}},"/playground/notes/labs-weekly-catchup-1":{"label":"Labs Weekly Catchup #1","children":{}},"/playground/notes/duckdb-demo-and-showcase":{"label":"DuckDB demo and showcase","children":{}},"/playground/notes/icy-in-2024":{"label":"$icy in 2024","children":{}},"/playground/notes/salary-advance":{"label":"$icy Salary Advance","children":{}},"/playground/notes/icy-dfg":{"label":"💠 df protocol, $icy and $dfg","children":{}},"/playground/notes/how-rd-contributes-to-performance-review":{"label":"How R&D contributes to Performance Review","children":{}},"/playground/notes/knowledge-journey":{"label":"Knowledge Journey","children":{}},"/playground/notes/labs-roadmap-nov-23-update":{"label":"Labs Roadmap (Nov 23 update)","children":{}},"/playground/notes/reward-model-nomination":{"label":"Reward Model & Nomination","children":{}},"/playground/notes/our-view-on-fullstack-engineering":{"label":"Our View On Fullstack Engineering","children":{}},"/playground/notes/adoption-of-pnpm":{"label":"Adoption Of Pnpm","children":{}},"/playground/notes/how-we-created-an-ai-powered-interview-system-using-openais-chatgpt":{"label":"How We Created An AI Powered Interview System Using Openais Chatgpt","children":{}},"/playground/notes/easy-prompt-engineering-for-business-use-and-mitigating-risks-in-llms":{"label":"Easy Prompt Engineering For Business Use And Mitigating Risks In Llms","children":{}},"/playground/notes/exploring-machine-learning-approaches-for-fine-tuning-llama-models":{"label":"Exploring Machine Learning Approaches For Fine Tuning Llama Models","children":{}},"/playground/notes/managing-dataflow-and-sql-database-with-concurrency-control":{"label":"Managing Dataflow And Sql Database With Concurrency Control","children":{}},"/playground/notes/choosing-the-right-javascript-framework-a-deep-dive-into-react-vs-angular-vs-vue":{"label":"Choosing The Right Javascript Framework A Deep Dive Into React Vs Angular Vs Vue","children":{}},"/playground/notes/design-system-for-layer-2-using-zk-rollup":{"label":"Design System For Layer 2 Using Zk Rollup","children":{}},"/playground/notes/lessons-learned-from-being-a-part-of-corporate-micro-frontend-implementation":{"label":"Lessons Learned From Being A Part Of Corporate Micro Frontend Implementation","children":{}},"/playground/notes/cost-of-react-native":{"label":"Cost Of React Native","children":{}},"/playground/notes/lessons-learned-from-concurrency-practices-in-blockchain-projects":{"label":"Lessons Learned From Concurrency Practices In Blockchain Projects","children":{}},"/playground/notes/database-designs-for-multilingual-apps":{"label":"Database Designs For Multilingual Apps","children":{}},"/playground/notes/accelerate-project-initiation-with-advanced-nextjs-boilerplate-react-toolkit":{"label":"Accelerate Project Initiation With Advanced Nextjs Boilerplate React Toolkit","children":{}},"/playground/notes/how-blue-green-deployment-helped-mochi":{"label":"How Blue Green Deployment Helped Mochi","children":{}},"/playground/notes/i18n-frontend-guideline":{"label":"I18n Frontend Guideline","children":{}},"/playground/notes/radio-talk-61-monorepo":{"label":"Radio Talk 61 Monorepo","children":{}},"/playground/notes/from-multi-repo-to-monorepo-a-case-study-with-nghenhan-turbo-monorepo":{"label":"From Multi Repo To Monorepo A Case Study With Nghenhan Turbo Monorepo","children":{}},"/playground/notes/radio-talk-60-blue-green-deployment":{"label":"Radio Talk 60 Blue Green Deployment","children":{}},"/playground/notes/202302281019-case-study-write-heavy-scalable-and-reliable-inventory-platform":{"label":"Case study: Write-heavy scalable and reliable inventory platform","children":{}},"/playground/notes/growth-is-our-universal-language":{"label":"Growth Is Our Universal Language","children":{}},"/playground/notes/202301191192-multi-column-index-in-db":{"label":"Multi-column index in DB","children":{}},"/playground/notes/202301091379-invoking-component-functions-in-react":{"label":"Invoking component functions in React","children":{}},"/playground/notes/the-key-of-security-mechanisms-in-tackling-cyber-threats":{"label":"The Key Of Security Mechanisms In Tackling Cyber Threats","children":{}},"/playground/notes/202212131609-how-to-deal-with-technical-debt-in-scrum":{"label":"How to deal with technical debt in Scrum","children":{}},"/playground/notes/responsibility":{"label":"Responsibility","children":{}},"/playground/notes/configure-the-company-email":{"label":"Configure The Company Email","children":{}},"/playground/notes/tech-event-in-the-latest-transforming-healthcare-with-technology":{"label":"Tech Event In The Latest Transforming Healthcare With Technology","children":{}},"/playground/notes/202211141287-go-json-parsing":{"label":"Go JSON parser: number <-> interface","children":{}},"/playground/notes/202211141513-materialized-view-pattern":{"label":"Materialized View Pattern","children":{}},"/playground/notes/202211081111-error-messaging":{"label":"Error Messaging","children":{}},"/playground/notes/202210172128-sign-in-form-best-practices":{"label":"Sign-in Form Best Practices","children":{}},"/playground/notes/202210162154-the-best-of-css-tldr":{"label":"The Best of CSS TLDR","children":{}},"/playground/notes/202210150019-migration-planning":{"label":"Migration Planning","children":{}},"/playground/notes/202210131000-behavior-driven-development":{"label":"Behavior Driven Development","children":{}},"/playground/notes/202210131516-react-fiber":{"label":"React Fiber","children":{}},"/playground/notes/202210122014-forward-proxy":{"label":"Forward Proxy","children":{}},"/playground/notes/data-analyst-in-retail-trading":{"label":"Data Analyst In Retail Trading","children":{}},"/playground/notes/passing-the-probation-get-3-upvotes":{"label":"Passing The Probation Get 3 Upvotes","children":{}},"/playground/notes/react-native-new-architecture":{"label":"React Native New Architecture","children":{}},"/playground/notes/dwarves-radio-talk-17-conduct-a-1-1-session":{"label":"Dwarves Radio Talk 17 Conduct A 1 1 Session","children":{}},"/playground/notes/dwarves-radio-talk-16-run-an-effective-performance-review":{"label":"Dwarves Radio Talk 16 Run An Effective Performance Review","children":{}},"/playground/notes/sql-practices-orm-vs-plain-sql":{"label":"Sql Practices Orm Vs Plain Sql","children":{}},"/playground/notes/six-things-i-extracted-from-design-thinking":{"label":"Six Things I Extracted From Design Thinking","children":{}},"/playground/notes/gitflow-pull-request":{"label":"Gitflow Pull Request","children":{}},"/playground/notes/git-commit-message-convention":{"label":"Git Commit Message Convention","children":{}},"/playground/notes/are-we-really-engineers":{"label":"Are We Really Engineers","children":{}},"/playground/notes/how-we-setup-cicd":{"label":"How We Setup Cicd","children":{}},"/playground/notes/getting-started-with-webflow":{"label":"Getting Started With Webflow","children":{}},"/playground/notes/ui-design-best-practices-dwarves":{"label":"UI Design Best Practices Dwarves","children":{}},"/playground/notes/the-correct-way-to-build-kpi":{"label":"The Correct Way To Build Kpi","children":{}},"/playground/notes/domain-insight-research-framework":{"label":"Domain Insight Research Framework","children":{}},"/playground/notes/asking-as-a-junior":{"label":"Asking As A Junior","children":{}},"/playground/notes/infinite-image-gallery-with-r3f-an-approach":{"label":"Infinite Image Gallery With R3f An Approach","children":{}},"/playground/notes/market":{"label":"Market","children":{"/playground/notes/market/an-overview-of-micro-investment-in-real-estate":{"label":"An Overview Of Micro Investment In Real Estate","children":{}}}},"/playground/notes/grid-and-layout":{"label":"Grid And Layout","children":{}},"/playground/notes/startups-vs-junior-designers":{"label":"Startups Vs Junior Designers","children":{}},"/playground/notes/gestalt-principles-in-ui-design":{"label":"Gestalt Principles In UI Design","children":{}},"/playground/notes/aarrr-framework-in-a-nutshell":{"label":"AARRR Framework In A Nutshell","children":{}},"/playground/notes/a-quick-intro-to-webassembly":{"label":"A Quick Intro To Webassembly","children":{}},"/playground/notes/sdk-event-sourcing":{"label":"Sdk Event Sourcing","children":{}},"/playground/notes/software-development-life-cycle-101":{"label":"Software Development Life Cycle 101","children":{}},"/playground/notes/introduce-to-dwarves-memo":{"label":"Introduce To Dwarves Memo","children":{}},"/playground/notes/daemons-and-services-programming-guide":{"label":"Daemons And Services Programming Guide","children":{}},"/playground/notes/remote-moderated-usability-testing":{"label":"Remote Moderated Usability Testing","children":{}},"/playground/notes/an-alternative-to-tm":{"label":"An Alternative To Tm","children":{}},"/playground/notes/how-a-design-system-work":{"label":"How A Design System Work","children":{}},"/playground/notes/software-modeling":{"label":"Software Modeling","children":{}},"/playground/notes/reusability-in-software-development":{"label":"Reusability In Software Development","children":{}},"/playground/notes/blockchain-for-designers":{"label":"Blockchain For Designers","children":{}},"/playground/notes/design-better-mobile-application":{"label":"Design Better Mobile Application","children":{}},"/playground/notes/introduction-to-software-craftsmanship":{"label":"Introduction To Software Craftsmanship","children":{}},"/playground/notes/domain-glossary":{"label":"Domain Glossary","children":{}},"/playground/notes/architecture-decision-record":{"label":"Architecture Decision Record","children":{}},"/playground/notes/build-an-assistant-on-the-terminal":{"label":"Build An Assistant On The Terminal","children":{}},"/playground/notes/create-circular-text-using-swiftui":{"label":"Create Circular Text Using Swiftui","children":{}},"/playground/notes/draw-watch-face-using-swiftui":{"label":"Draw Watch Face Using Swiftui","children":{}},"/playground/notes/applied-security-basis":{"label":"Applied Security Basis","children":{}},"/playground/notes/swiftui":{"label":"Swiftui","children":{}},"/playground/notes/bunk-license-check":{"label":"Bunk License Check","children":{}},"/playground/notes/objective":{"label":"Objective","children":{}},"/playground/notes/project-management":{"label":"Project Management","children":{}},"/playground/notes/kubernetes-helm-101":{"label":"Kubernetes Helm 101","children":{}},"/playground/notes/traits-to-assess-during-an-interview":{"label":"Traits To Assess During An Interview","children":{}},"/playground/notes/recursively-export-file-pattern-in-javascript-es6-application":{"label":"Recursively Export File Pattern In Javascript Es6 Application","children":{}},"/playground/notes/playaround-with-clojure":{"label":"Playaround With Clojure","children":{}},"/playground/notes/playaround-with-rust":{"label":"Playaround With Rust","children":{}},"/playground/notes/overview-on-broker-pattern-in-distributed-system":{"label":"Overview On Broker Pattern In Distributed System","children":{}},"/playground/notes/fundamental-end-to-end-frontend-testing-with-cypress":{"label":"Fundamental End To End Frontend Testing With Cypress","children":{}},"/playground/notes/uidynamicanimator":{"label":"Uidynamicanimator","children":{}},"/playground/notes/reproduce-apple-find-me-bottom-menu-view":{"label":"Reproduce Apple Find Me Bottom Menu View","children":{}},"/playground/notes/build-a-passcode-view-with-swift":{"label":"Build A Passcode View With Swift","children":{}},"/playground/notes/istio":{"label":"Istio","children":{}},"/playground/notes/different-ways-to-test-react-application":{"label":"Different Ways To Test React Application","children":{}},"/playground/notes/federated-byzantine":{"label":"Federated Byzantine","children":{}},"/playground/notes/fabric-hyperledger-architecture-explanation":{"label":"Fabric Hyperledger Architecture Explanation","children":{}},"/playground/notes/setup-react-project-with-webpack-and-babel":{"label":"Setup React Project With Webpack And Babel","children":{}},"/playground/notes/split-and-reuse-code-in-react-application":{"label":"Split And Reuse Code In React Application","children":{}},"/playground/notes/hoc-renderprops-and-hook-in-reactjs":{"label":"Hoc Renderprops And Hook In Reactjs","children":{}},"/playground/notes/resource-assignment":{"label":"Resource Assignment","children":{}},"/playground/notes/the-principle-of-spacing-in-ui-design-part-2":{"label":"The Principle Of Spacing In UI Design Part 2","children":{}},"/playground/notes/finite-state-machine":{"label":"Finite State Machine","children":{}},"/playground/notes/card-sorting-and-a-glimpse-at-experimental-sorting-session":{"label":"Card Sorting And A Glimpse At Experimental Sorting Session","children":{}},"/playground/notes/about-devops":{"label":"About Devops","children":{}},"/playground/notes/our-daily-standup-format":{"label":"Our Daily Standup Format","children":{}},"/playground/notes/good-design-understanding":{"label":"Good Design Understanding","children":{}},"/playground/notes/competency-mapping":{"label":"Competency Mapping","children":{}},"/playground/notes/design-resourcestools":{"label":"Design Resourcestools","children":{}},"/playground/notes/design-tips-tricks":{"label":"Design Tips Tricks","children":{}},"/playground/notes/design-system":{"label":"Design System","children":{}},"/playground/notes/design-workflow":{"label":"Design Workflow","children":{}},"/playground/notes/three-levels-of-design":{"label":"Three Levels Of Design","children":{}},"/playground/notes/ui-design-fundamental":{"label":"UI Design Fundamental","children":{}},"/playground/notes/the-principle-of-spacing-in-ui-design-part-1":{"label":"The Principle Of Spacing In UI Design Part 1","children":{}},"/playground/notes/be-careful-with-your-code-splitting-setup":{"label":"Be Careful With Your Code Splitting Setup","children":{}},"/playground/notes/qc-onboarding":{"label":"Qc Onboarding","children":{}},"/playground/notes/dcos-series-part-5-gitlab":{"label":"Dcos Series Part 5 Gitlab","children":{}},"/playground/notes/dcos-series-part-4-deploy-simple-application-with-backend-database":{"label":"Dcos Series Part 4 Deploy Simple Application With Backend Database","children":{}},"/playground/notes/dcos-series-part-3-service-discovery-and-load-balancing":{"label":"Dcos Series Part 3 Service Discovery And Load Balancing","children":{}},"/playground/notes/dcos-series-part-2-deploy-simple-applications":{"label":"Dcos Series Part 2 Deploy Simple Applications","children":{}},"/playground/notes/dcos-series-part-1-quick-look-installation":{"label":"Dcos Series Part 1 Quick Look Installation","children":{}},"/playground/notes/skill-of-software-engineer":{"label":"Skill Of Software Engineer","children":{}},"/playground/notes/docker-registry":{"label":"Docker Registry","children":{}},"/playground/notes/agile-using-clickup-as-agile-management-tool":{"label":"Agile Using Clickup As Agile Management Tool","children":{}},"/playground/notes/agile-how-to-create-clickup-tickets":{"label":"Agile How To Create Clickup Tickets","children":{}},"/playground/notes/considering-factors-for-performance-evaluating":{"label":"Considering Factors For Performance Evaluating","children":{}},"/playground/notes/how-we-contribute-to-homebrew":{"label":"How We Contribute To Homebrew","children":{}},"/playground/notes/the-10x-engineer":{"label":"The 10x Engineer","children":{}},"/playground/notes/definition-of-done":{"label":"Definition Of Done","children":{}},"/playground/notes/estimation-in-agile":{"label":"Estimation In Agile","children":{}},"/playground/notes/sprint-lifecycle":{"label":"Sprint Lifecycle","children":{}},"/playground/notes/docker-microcontainers":{"label":"Docker Microcontainers","children":{}},"/playground/notes/remote-prepare-and-get-going":{"label":"Remote Prepare And Get Going","children":{}}}},"/playground/onboarding":{"label":"Labs - New Member Onboarding","children":{}},"/playground/schedule":{"label":"Labs x Consulting Workflow","children":{}},"/playground/intro":{"label":"Labs - Who we are","children":{}}}},"/consulting":{"label":"Consulting","children":{"/consulting/case-study":{"label":"Case Study","children":{"/consulting/case-study/screenz-ai":{"label":"Screenz.ai","children":{}},"/consulting/case-study/kafi":{"label":"Kafi","children":{}},"/consulting/case-study/droppii":{"label":"Droppii","children":{}},"/consulting/case-study/konvoy":{"label":"Konvoy","children":{}},"/consulting/case-study/cimb":{"label":"CIMB","children":{}},"/consulting/case-study/swift":{"label":"Swift","children":{}},"/consulting/case-study/startupvn":{"label":"StartupVN","children":{}},"/consulting/case-study/open-fabric":{"label":"Open Fabric","children":{}},"/consulting/case-study/icrosschain":{"label":"iCrosschain","children":{}},"/consulting/case-study/hedge-foundation":{"label":"Hedge Foundation","children":{}},"/consulting/case-study/searchio":{"label":"Search.io","children":{}},"/consulting/case-study/tokenomy":{"label":"Tokenomy","children":{}},"/consulting/case-study/basehq":{"label":"BaseHQ","children":{}},"/consulting/case-study/momos":{"label":"Momos","children":{}},"/consulting/case-study/attrace":{"label":"Attrace","children":{}},"/consulting/case-study/setel":{"label":"Setel","children":{}},"/consulting/case-study/joinpara":{"label":"JoinPara","children":{}},"/consulting/case-study/relay":{"label":"Relay","children":{}},"/consulting/case-study/naru":{"label":"Naru","children":{}},"/consulting/case-study/mudah":{"label":"Mudah","children":{}},"/consulting/case-study/reapit":{"label":"Reapit","children":{}},"/consulting/case-study/aharooms":{"label":"Aharooms","children":{}},"/consulting/case-study/begroup":{"label":"beGroup","children":{}},"/consulting/case-study/airwatt":{"label":"AirWatt","children":{}},"/consulting/case-study/voconic":{"label":"Voconic","children":{}},"/consulting/case-study/sol":{"label":"Sol","children":{}},"/consulting/case-study/dental-marketplace":{"label":"Dental Marketplace","children":{}},"/consulting/case-study/bhd":{"label":"BHD Cinema","children":{}}}},"/consulting/bill-by-hours":{"label":"Pricing model: Bill by hours","children":{}},"/consulting/partners-network":{"label":"Partners Network","children":{}},"/consulting/readme":{"label":"💼 Consulting team","children":{}},"/consulting/collaboration-guideline":{"label":"Collaboration Guideline","children":{}},"/consulting/fbsc":{"label":"FBSC","children":{}},"/consulting/how-to-work-with-clients":{"label":"How to work with clients","children":{}},"/consulting/service-feedbacks":{"label":"Service feedbacks","children":{}},"/consulting/setting-the-budget":{"label":"Setting The Budget","children":{}},"/consulting/fixed-budget-scope-controlled":{"label":"Fixed Budget Scope Controlled","children":{}},"/consulting/the-adjacent-possible":{"label":"The Adjacent Possible","children":{}}}},"/handbook":{"label":"Handbook","children":{"/handbook/navigate-changes":{"label":"Navigate changes","children":{}},"/handbook/community":{"label":"Community","children":{"/handbook/community/icy-worth":{"label":"How much is your ICY worth","children":{}},"/handbook/community/icy-swap":{"label":"How to swap ICY to BTC","children":{}},"/handbook/community/icy":{"label":"ICY","children":{}},"/handbook/community/discord":{"label":"Discord","children":{}},"/handbook/community/earn":{"label":"Earn","children":{}},"/handbook/community/readme":{"label":"Radar","children":{}},"/handbook/community/radar":{"label":"Radar","children":{}},"/handbook/community/sharing":{"label":"Sharing knowledge","children":{}},"/handbook/community/showcase":{"label":"Showcase","children":{}},"/handbook/community/memo":{"label":"Memo","children":{}}}},"/handbook/guides":{"label":"Guides","children":{"/handbook/guides/check-in-at-office":{"label":"Office check-in process for earning ICY","children":{}},"/handbook/guides/leave-request":{"label":"Leave request","children":{}},"/handbook/guides/nda":{"label":"NDA & Agreements","children":{}},"/handbook/guides/configure-company-email":{"label":"Configure your company email","children":{}},"/handbook/guides/one-on-one-meeting":{"label":"1-on-1 meetings","children":{}},"/handbook/guides/continuing-education-allowance":{"label":"Continuing education allowance","children":{}},"/handbook/guides/reimbursement":{"label":"Reimbursement","children":{}},"/handbook/guides/email-communication-and-use":{"label":"Email use","children":{}},"/handbook/guides/password-sharing":{"label":"Password Sharing","children":{}},"/handbook/guides/asset-request":{"label":"Request an asset","children":{}},"/handbook/guides/effective-meeting":{"label":"Effective meetings","children":{}},"/handbook/guides/conduct-a-meeting":{"label":"How to conduct a meeting","children":{}}}},"/handbook/making-a-career":{"label":"Making a career","children":{}},"/handbook/as-a-community":{"label":"As a community","children":{}},"/handbook/knowledge-base":{"label":"Knowledge base","children":{}},"/handbook/stock-option-plan":{"label":"Stock option plan","children":{}},"/handbook/readme":{"label":"📔 Handbook","children":{}},"/handbook/compliance":{"label":"Compliance","children":{}},"/handbook/mma":{"label":"MMA","children":{}},"/handbook/hybrid-working":{"label":"Hybrid Working","children":{}},"/handbook/routine":{"label":"Work routine","children":{}},"/handbook/ventures":{"label":"Ventures arm","children":{}},"/handbook/purpose":{"label":"Purpose","children":{}},"/handbook/benefits-and-perks":{"label":"Benefits & perks","children":{}},"/handbook/dwarves-foundation-is-you":{"label":"You are Dwarves Foundation","children":{}},"/handbook/getting-started":{"label":"💎 Getting started","children":{}},"/handbook/how-we-hire":{"label":"How we hire","children":{}},"/handbook/how-we-spend-money":{"label":"How we spend money","children":{}},"/handbook/misc":{"label":"Misc","children":{"/handbook/misc/marketing-assets":{"label":"Marketing assets","children":{}}}},"/handbook/moonlighting":{"label":"Moonlighting","children":{}},"/handbook/places-to-work":{"label":"Places to work","children":{}},"/handbook/security-rules":{"label":"Security rules","children":{}},"/handbook/tools-and-systems":{"label":"Tools and systems","children":{}},"/handbook/what-we-stand-for":{"label":"What we stand for","children":{}},"/handbook/what-we-value":{"label":"What we value","children":{}},"/handbook/where-we-work":{"label":"Where we work","children":{}},"/handbook/who-does-what":{"label":"Who does what","children":{}},"/handbook/faq":{"label":"FAQs","children":{}},"/handbook/how-we-work":{"label":"How we work","children":{}}}},"/radar":{"label":"Radar","children":{"/radar/index":{"label":"Index","children":{"/radar/index/readme":{"label":"Tech Radar","children":{}},"/radar/index/apache-spark":{"label":"Apache Spark","children":{}},"/radar/index/ant-design":{"label":"Ant Design","children":{}},"/radar/index/apache-kafka":{"label":"Apache Kafka","children":{}},"/radar/index/argocd":{"label":"Argocd","children":{}},"/radar/index/astro":{"label":"Astro","children":{}},"/radar/index/backstage":{"label":"Backstage","children":{}},"/radar/index/blue-green-deployment":{"label":"Blue Green Deployment","children":{}},"/radar/index/browserstack":{"label":"Browserstack","children":{}},"/radar/index/carbon":{"label":"Carbon","children":{}},"/radar/index/chatgpt-assistance":{"label":"Chatgpt Assistance","children":{}},"/radar/index/chromatic":{"label":"Chromatic","children":{}},"/radar/index/clickhouse":{"label":"Clickhouse","children":{}},"/radar/index/cloudflare-workers":{"label":"Cloudflare Workers","children":{}},"/radar/index/codecept":{"label":"Codecept","children":{}},"/radar/index/commitlint":{"label":"Commitlint","children":{}},"/radar/index/copilot":{"label":"Copilot","children":{}},"/radar/index/cucumber":{"label":"Cucumber","children":{}},"/radar/index/cypress":{"label":"Cypress","children":{}},"/radar/index/dapr":{"label":"Dapr","children":{}},"/radar/index/deno":{"label":"Deno","children":{}},"/radar/index/detox":{"label":"Detox","children":{}},"/radar/index/devcontainers":{"label":"Devcontainers","children":{}},"/radar/index/devpod":{"label":"Devpod","children":{}},"/radar/index/dora-metrics":{"label":"Dora Metrics","children":{}},"/radar/index/duckdb":{"label":"Duckdb","children":{}},"/radar/index/earthly":{"label":"Earthly","children":{}},"/radar/index/elixir-umbrella-project":{"label":"Elixir Umbrella Project","children":{}},"/radar/index/elixir":{"label":"Elixir","children":{}},"/radar/index/erlang":{"label":"Erlang","children":{}},"/radar/index/error-logging-convention":{"label":"Error Logging Convention","children":{}},"/radar/index/eslint":{"label":"Eslint","children":{}},"/radar/index/event-sourcing":{"label":"Event Sourcing","children":{}},"/radar/index/excalidraw":{"label":"Excalidraw","children":{}},"/radar/index/expo":{"label":"Expo","children":{}},"/radar/index/figma":{"label":"Figma","children":{}},"/radar/index/formal-verification":{"label":"Formal Verification","children":{}},"/radar/index/fullstack-tracing":{"label":"Fullstack Tracing","children":{}},"/radar/index/gestalt-principle":{"label":"Gestalt Principle","children":{}},"/radar/index/github-actions":{"label":"Github Actions","children":{}},"/radar/index/golang":{"label":"Golang","children":{}},"/radar/index/grafana":{"label":"Grafana","children":{}},"/radar/index/graylog":{"label":"Graylog","children":{}},"/radar/index/headless-ui":{"label":"Headless UI","children":{}},"/radar/index/hoppscotch":{"label":"Hoppscotch","children":{}},"/radar/index/ipfs":{"label":"Ipfs","children":{}},"/radar/index/jotai":{"label":"Jotai","children":{}},"/radar/index/k6":{"label":"K6","children":{}},"/radar/index/k9s":{"label":"K9s","children":{}},"/radar/index/kaniko":{"label":"Kaniko","children":{}},"/radar/index/kotlin":{"label":"Kotlin","children":{}},"/radar/index/kubeseal-sops":{"label":"Kubeseal Sops","children":{}},"/radar/index/ladle":{"label":"Ladle","children":{}},"/radar/index/langchain":{"label":"Langchain","children":{}},"/radar/index/large-language-model-llm":{"label":"Large Language Model LLM","children":{}},"/radar/index/loki":{"label":"Loki","children":{}},"/radar/index/makefile":{"label":"Makefile","children":{}},"/radar/index/micro-frontend":{"label":"Micro Frontend","children":{}},"/radar/index/monorepo":{"label":"Monorepo","children":{}},"/radar/index/msw":{"label":"Msw","children":{}},"/radar/index/n6n":{"label":"N6n","children":{}},"/radar/index/nestjs":{"label":"Nestjs","children":{}},"/radar/index/netlify":{"label":"Netlify","children":{}},"/radar/index/newrelic":{"label":"Newrelic","children":{}},"/radar/index/nextjs":{"label":"Nextjs","children":{}},"/radar/index/nodejs":{"label":"Nodejs","children":{}},"/radar/index/nostrum":{"label":"Nostrum","children":{}},"/radar/index/nx":{"label":"Nx","children":{}},"/radar/index/orval":{"label":"Orval","children":{}},"/radar/index/page-object-model":{"label":"Page Object Model","children":{}},"/radar/index/partytown":{"label":"Partytown","children":{}},"/radar/index/phaser":{"label":"Phaser","children":{}},"/radar/index/phoenix":{"label":"Phoenix","children":{}},"/radar/index/playwright":{"label":"Playwright","children":{}},"/radar/index/pnpm":{"label":"Pnpm","children":{}},"/radar/index/progressive-delivery":{"label":"Progressive Delivery","children":{}},"/radar/index/prometheus":{"label":"Prometheus","children":{}},"/radar/index/prompt-engineering":{"label":"Prompt Engineering","children":{}},"/radar/index/qwik":{"label":"Qwik","children":{}},"/radar/index/radix-ui":{"label":"Radix UI","children":{}},"/radar/index/react-hook-form":{"label":"React Hook Form","children":{}},"/radar/index/react-llm":{"label":"React LLM","children":{}},"/radar/index/react-native":{"label":"React Native","children":{}},"/radar/index/react-query":{"label":"React Query","children":{}},"/radar/index/react-server-component":{"label":"React Server Component","children":{}},"/radar/index/react-testing-library":{"label":"React Testing Library","children":{}},"/radar/index/react":{"label":"React","children":{}},"/radar/index/reinforcement-learning-from-human-feedback":{"label":"Reinforcement Learning From Human Feedback","children":{}},"/radar/index/remix":{"label":"Remix","children":{}},"/radar/index/replayio":{"label":"Replayio","children":{}},"/radar/index/reverse-engineering":{"label":"Reverse Engineering","children":{}},"/radar/index/rust":{"label":"Rust","children":{}},"/radar/index/selenium":{"label":"Selenium","children":{}},"/radar/index/semantic-release-auto-release":{"label":"Semantic Release Auto Release","children":{}},"/radar/index/sentry":{"label":"Sentry","children":{}},"/radar/index/serverlessq":{"label":"Serverlessq","children":{}},"/radar/index/solidity":{"label":"Solidity","children":{}},"/radar/index/solidjs":{"label":"Solidjs","children":{}},"/radar/index/stern":{"label":"Stern","children":{}},"/radar/index/svelte":{"label":"Svelte","children":{}},"/radar/index/swagger":{"label":"Swagger","children":{}},"/radar/index/swift-ui":{"label":"Swift UI","children":{}},"/radar/index/swift":{"label":"Swift","children":{}},"/radar/index/swr":{"label":"Swr","children":{}},"/radar/index/tailwindcss":{"label":"Tailwindcss","children":{}},"/radar/index/tauri":{"label":"Tauri","children":{}},"/radar/index/team-topologies":{"label":"Team Topologies","children":{}},"/radar/index/timescaledb":{"label":"Timescaledb","children":{}},"/radar/index/tla":{"label":"Tla","children":{}},"/radar/index/trunk-based-development":{"label":"Trunk Based Development","children":{}},"/radar/index/turborepo":{"label":"Turborepo","children":{}},"/radar/index/type-safe-client-server":{"label":"Type Safe Client Server","children":{}},"/radar/index/typescript":{"label":"Typescript","children":{}},"/radar/index/ui-documentation":{"label":"UI Documentation","children":{}},"/radar/index/uno-css":{"label":"Uno Css","children":{}},"/radar/index/upptime":{"label":"Upptime","children":{}},"/radar/index/v-model":{"label":"V Model","children":{}},"/radar/index/vector-database":{"label":"Vector Database","children":{}},"/radar/index/vercel":{"label":"Vercel","children":{}},"/radar/index/vitejs":{"label":"Vitejs","children":{}},"/radar/index/volta":{"label":"Volta","children":{}},"/radar/index/wasm":{"label":"Wasm","children":{}},"/radar/index/webdriverio":{"label":"Webdriverio","children":{}},"/radar/index/webflow":{"label":"Webflow","children":{}},"/radar/index/yup":{"label":"Yup","children":{}},"/radar/index/zod":{"label":"Zod","children":{}},"/radar/index/zustand":{"label":"Zustand","children":{}}}},"/radar/readme":{"label":"Tech radar index","children":{}}}},"/updates":{"label":"Updates","children":{"/updates/forward":{"label":"Forward","children":{"/updates/forward/vol-01":{"label":"Vol 01","children":{"/updates/forward/vol-01/istio":{"label":"New Member","children":{}}}},"/updates/forward/market-commentary":{"label":"Market Commentary","children":{"/updates/forward/market-commentary/event-takeaways-2nd":{"label":"2nd Talks and Takeaways","children":{}},"/updates/forward/market-commentary/event-takeaways-1st":{"label":"1st Talks and Takeaways","children":{}},"/updates/forward/market-commentary/2025-28th-feb":{"label":"#9: Bybit Loses $1.5B in Hack, Claude 3.7 Sonnet Drops, and OpenArt Designs Characters","children":{}},"/updates/forward/market-commentary/2025-21th-feb":{"label":"#8: R1 1776 Goes Open-Source, Cardex Gets Hacked, and Grok-3 Debuts","children":{}},"/updates/forward/market-commentary/2025-14th-feb":{"label":"#7: 10x AI Cost Reduction, Lyft’s 2026 Robotaxi Milestone, and Solana ETF Buzz","children":{}},"/updates/forward/market-commentary/2025-7th-feb":{"label":"#6 Trending Products, DeepSeek Wave, and Ethereum Predictions","children":{}},"/updates/forward/market-commentary/2025-17th-jan":{"label":"#5 VC Trends, Blockchain Breakthroughs, and AI Innovations","children":{}},"/updates/forward/market-commentary/2025-10th-jan":{"label":"#4 AI Supercomputers, Mini AI PCs, SEA VC","children":{}},"/updates/forward/market-commentary/2025-3rd-jan":{"label":"#3 AI at CES, Wall Street Boom, Blockchain Trends","children":{}},"/updates/forward/market-commentary/2024-27th-dec":{"label":"#2 AI Talent Wars, OpenAI’s New Models, Hyperliquid","children":{}},"/updates/forward/market-commentary/2024-13th-dec":{"label":"#1 Gemini 2.0, OpenAI’s Sora,  a16z’s Predictions","children":{}}}},"/updates/forward/2025-02":{"label":"20242025","children":{}},"/updates/forward/product-design":{"label":"Product Design","children":{"/updates/forward/product-design/product-design-commentary-20241122":{"label":"Product Design Commentary #7: Hyper-personalization - How AI improves user experience personalization","children":{}},"/updates/forward/product-design/product-design-commentary-20241115":{"label":"Product Design Commentary #6: AI in Design - Cool ideas and how to make them happen","children":{}},"/updates/forward/product-design/product-design-commentary-20241101":{"label":"Product Design Commentary #5: Figma to SwiftUI (functional code) with Claude AI","children":{}},"/updates/forward/product-design/product-design-commentary-20241018":{"label":"Product Design Commentary #4: Generative AI UX design patterns","children":{}},"/updates/forward/product-design/product-design-commentary-20241011":{"label":"Product Design Commentary #3: The art of prompting in AI-human interaction","children":{}},"/updates/forward/product-design/product-design-commentary-20241004":{"label":"Product Design Commentary #2: Unpacking the sparkles icon and AI onboarding challenges","children":{}},"/updates/forward/product-design/product-design-commentary-20240927":{"label":"Product Design Commentary #1: New technologies changing UX/UI and product design","children":{}}}},"/updates/forward/market-report":{"label":"Market Report","children":{"/updates/forward/market-report/2024-october":{"label":"October 2024","children":{}},"/updates/forward/market-report/2024-september":{"label":"September 2024","children":{}},"/updates/forward/market-report/2024-august":{"label":"August 2024","children":{}},"/updates/forward/market-report/2024-july":{"label":"July 2024","children":{}},"/updates/forward/market-report/2024-may":{"label":"May 2024","children":{}},"/updates/forward/market-report/2024-april":{"label":"April 2024","children":{}},"/updates/forward/market-report/2024-march":{"label":"March 2024","children":{}},"/updates/forward/market-report/2024-february":{"label":"February 2024","children":{}},"/updates/forward/market-report/2024-january":{"label":"January 2024","children":{}},"/updates/forward/market-report/2023-december":{"label":"December 2023","children":{}}}},"/updates/forward/2024-09":{"label":"September 2024","children":{}},"/updates/forward/2023-11":{"label":"November 2023","children":{}},"/updates/forward/2023-10":{"label":"October 2023","children":{}},"/updates/forward/2023-08":{"label":"August 2023","children":{}},"/updates/forward/2023-06":{"label":"June 2023","children":{}},"/updates/forward/2023-05":{"label":"May 2023","children":{}},"/updates/forward/2023-03":{"label":"March 2023","children":{}},"/updates/forward/2023-12":{"label":"December 2023","children":{}},"/updates/forward/2022":{"label":"2022","children":{}},"/updates/forward/volume-03":{"label":"Tech Radar Volume 03","children":{}},"/updates/forward/volume-02":{"label":"Tech Radar Volume 02","children":{}},"/updates/forward/volume-01":{"label":"Tech Radar Volume 01","children":{}},"/updates/forward/readme":{"label":"Forward Engineering","children":{}}}},"/updates/build-log":{"label":"Build Log","children":{"/updates/build-log/service_monitoring_with_upptime":{"label":"Secure and transparent uptime monitoring with Upptime and GitHub secrets","children":{}},"/updates/build-log/create-slides-with-overleaf":{"label":"Create slides with Overleaf and ChatGPT","children":{}},"/updates/build-log/optimize-init-load-time-for-trading-platform":{"label":"Optimizing initial load time for a Trading Platform","children":{}},"/updates/build-log/ai-interview-platform-mvp":{"label":"Building MVP for AI-driven interview platform","children":{}},"/updates/build-log/optimizing-ui-for-effective-investment-experience":{"label":"Hedge Foundation - Optimizing UI for effective investment experience","children":{}},"/updates/build-log/implement-binance-future-pnl-analysis-page":{"label":"Implement Binance Futures PNL analysis page by Phoenix LiveView","children":{}},"/updates/build-log/migrate-normal-table-to-timescale-table":{"label":"Migrate regular tables into TimescaleDB hypertables to improve query performance","children":{}},"/updates/build-log/bitcoin-alt-performance-tracking":{"label":"Tracking Bitcoin-Altcoin Performance Indicators in BTC Hedging Strategy","children":{}},"/updates/build-log/database-hardening-for-trading-platform":{"label":"Database hardening for a trading platform","children":{}},"/updates/build-log/data-archive-and-recovery":{"label":"Building a data archive and recovery strategy for high-volume trading system","children":{}},"/updates/build-log/persist-history-using-data-snapshot-pattern":{"label":"Implementing data snapshot pattern to persist historical data","children":{}},"/updates/build-log/ai-ruby-travel-assistant-chatbot":{"label":"AI-powered Ruby travel assistant","children":{}},"/updates/build-log/building-chatbot-agent-for-project-management-tool":{"label":"Building chatbot agent to streamline project management","children":{}},"/updates/build-log/building-data-pipeline-ogif-transcriber":{"label":"Building data pipeline for OGIF transcriber","children":{}},"/updates/build-log/centralized-monitoring-setup-for-trading-platform":{"label":"Setup centralized monitoring system for Hedge Foundation trading platform","children":{}},"/updates/build-log/binance-transfer-matching":{"label":"Building better Binance transfer tracking","children":{}},"/updates/build-log/crypto-market-outperform-chart-rendering":{"label":"Visualizing crypto market performance: BTC-Alt dynamic indicators in Golang","children":{}},"/updates/build-log/enhancing-cryptocurrency-transfer-logger":{"label":"Transfer mapping: enhancing loggers for better transparency","children":{}},"/updates/build-log/reconstructing_trading_pnl_data_pipeline_approach":{"label":"Reconstructing historical trading PnL: a data pipeline approach","children":{}},"/updates/build-log/ai-powered-monthly-project-reports":{"label":"Project reports system: a case study","children":{}}}},"/updates/ogif":{"label":"OGIF","children":{"/updates/ogif/41-20250314":{"label":"#41 ICY-BTC, GitHub Bot, MCP-DB, Pocket Turing","children":{}},"/updates/ogif/39-20250207":{"label":"#39 Frontend report, DB Scaling, AI Workflow","children":{}},"/updates/ogif/38-20250117":{"label":"#38 Erlang automata, AI Trends, Year-End Awards","children":{}},"/updates/ogif/37-20241227":{"label":"#37 AI Fine-tuning, Data archiving, Datalakes","children":{}},"/updates/ogif/28-20241018":{"label":"#28 Go sync.Map, AI UX, Yelp AI, LLM Patterns, Git Analysis","children":{}},"/updates/ogif/27-20241011":{"label":"#27 Go weekly, Frontend, AI UX, Finite Automata","children":{}},"/updates/ogif/26-20241004":{"label":"#26 Design insights, Go tools, Trading app, Chatbots, Essays","children":{}},"/updates/ogif/25-20240927":{"label":"#25 Team updates, Hybrid work, AI insights, Go weekly","children":{}},"/updates/ogif/24-20240920":{"label":"#24 Go weekly, AI workflows, Team AI demo, Figma-UI with Claude","children":{}},"/updates/ogif/23-20240913":{"label":"#23 Go weekly, FE report, Hybrid work, AI agents","children":{}},"/updates/ogif/22-20240906":{"label":"#22 Hybrid work, Tech report, Go weekly, AI demo","children":{}},"/updates/ogif/21-20240830":{"label":"#21 Community engagement, Go weekly, Journey of thought for prompt engineering","children":{}},"/updates/ogif/20-20240823":{"label":"#20 Go weekly, Dynamic objects, Devbox, LLM tracing, Cursor AI","children":{}},"/updates/ogif/19-20240821":{"label":"#19 Go weekly, UI design, File sharing, Dify AI","children":{}},"/updates/ogif/18-20240809":{"label":"#18 Go weekly, RAG, UI, FE updates","children":{}},"/updates/ogif/17-20240802":{"label":"#17 Community Call July, C4 Model, Interview Life in the US","children":{}},"/updates/ogif/16-20240726":{"label":"#16 Go weekly, Dune query, AI voice clone, RAG re-ranking","children":{}},"/updates/ogif/15-20240719":{"label":"#15 AI Supervisors, Local-first Software, Code Completion, Bot Commands","children":{}},"/updates/ogif/14-20240712":{"label":"#14 Generic Collections, Pricing Models, and OGIF Summarizer","children":{}},"/updates/ogif/13-20240705":{"label":"#13 Go Weekly updates, Radix Sort, Human Feedback Mechanism, and effective ChatGPT usage","children":{}},"/updates/ogif/12-20240628":{"label":"#12 June updates, Go Performance, eBPF, PGO, Multimodal RAG","children":{}},"/updates/ogif/11-20240621":{"label":"#11 Design patterns: template method & visitor, Radix sort, and weekly tech commentary","children":{}},"/updates/ogif/10-20240614":{"label":"#10 Behavioral Patterns and Map Content Organization","children":{}},"/updates/ogif/9-20240607":{"label":"#9 What's next for June and Behavior Design Patterns","children":{}},"/updates/ogif/7-20240517":{"label":"#7 Echelon EXPO, Programming patterns, and Moonlighting","children":{}},"/updates/ogif/6-20240510":{"label":"#6 Factory Pattern, Erlang State Machines, and Trading Process","children":{}},"/updates/ogif/5-20240503":{"label":"#5 Singapore Market Report, C4 Modelling, Memo's Nested Sidebar","children":{}},"/updates/ogif/4-20240426":{"label":"#4 DCA, Devbox","children":{}},"/updates/ogif/3-20240419":{"label":"#3 Generative AI, Tokenomics, and Finance Talks","children":{}},"/updates/ogif/2-20240412":{"label":"#2 Devbox as the new Docker, Security Standards, and Understanding Liquidity","children":{}},"/updates/ogif/1-20240405":{"label":"#1 Markdown Presentations, Research Pipeline, Screenshots How-to","children":{}},"/updates/ogif/readme":{"label":"OGIF - Oh God It's Friday","children":{}}}},"/updates/changelog":{"label":"Changelog","children":{"/updates/changelog/2024-10-25-knowledge-base":{"label":"Build your knowledge base","children":{}},"/updates/changelog/2024-09-13-dwarve-updates-ai-llm":{"label":"The Stage of AI and LLM at Dwarves","children":{}},"/updates/changelog/readme":{"label":"Dwarves Updates","children":{}},"/updates/changelog/2023-09-12-growth-stages":{"label":"The Stage of Growth at Dwarves","children":{}},"/updates/changelog/2022-08-26-the-next-leading-chairs":{"label":"The Next Leading Chairs","children":{}},"/updates/changelog/2022-06-26-blockchain-and-data":{"label":"The future is blockchain and data","children":{}},"/updates/changelog/2022-03-31-hiring-stages":{"label":"The stages of hiring at Dwarves","children":{}},"/updates/changelog/2021-12-30-2021-in-review":{"label":"It's a wrap: 2021 in Review","children":{}},"/updates/changelog/2021-12-01-engineering-org-structure":{"label":"Engineering Organizational Structure","children":{}},"/updates/changelog/2021-10-31-path-to-growth":{"label":"The Path To Growth at Dwarves","children":{}},"/updates/changelog/2021-09-29-engineer-performance-review":{"label":"Engineer Performance Review","children":{}},"/updates/changelog/2021-08-23-project-compliance":{"label":"Project Compliance","children":{}},"/updates/changelog/2021-07-11-dalat-office":{"label":"Da Lat Office","children":{}},"/updates/changelog/2021-06-10-dwarves-updates":{"label":"Dwarves Updates","children":{}}}},"/updates/wala":{"label":"WALA","children":{"/updates/wala/001-43-factory":{"label":"43 Factory","children":{}},"/updates/wala/002-dzs-media":{"label":"DZS Media","children":{}},"/updates/wala/003-sp-group":{"label":"SP Group","children":{}},"/updates/wala/readme":{"label":"WALA","children":{}}}}}},"/careers":{"label":"Careers","children":{"/careers/archived":{"label":"Archived","children":{"/careers/archived/full-stack-engineer":{"label":"Full-Stack Engineer","children":{}},"/careers/archived/executive-assistant":{"label":"Executive Assistant","children":{}},"/careers/archived/technical-recruiter":{"label":"Technical Recruiter","children":{}},"/careers/archived/backend-engineer-go-elixir-rust":{"label":"Backend Engineer, Go/Elixir/Rust","children":{}},"/careers/archived/react-native-developer":{"label":"React Native Developer","children":{}},"/careers/archived/android-developer":{"label":"Mobile Engineer, Android","children":{}},"/careers/archived/community-executive":{"label":"Community Executive","children":{}},"/careers/archived/data-engineering":{"label":"Energy - Data Engineering","children":{}},"/careers/archived/devops":{"label":"DevOps Engineer - FinTech","children":{}},"/careers/archived/frontend-developer-junior":{"label":"Junior Frontend Developer","children":{}},"/careers/archived/frontend":{"label":"Frontend","children":{}},"/careers/archived/ios-developer":{"label":"iOS Developer - EnergyTech","children":{}},"/careers/archived/macos-developer":{"label":"Software Engineer, macOS","children":{}},"/careers/archived/product-designer-new-grad":{"label":"Product Designer, New Grad","children":{}},"/careers/archived/product-designer":{"label":"Product Designer","children":{}},"/careers/archived/qc-automation":{"label":"QC Engineer, Automation - Logistics","children":{}},"/careers/archived/qc-manual":{"label":"Fintech - QC Engineer, Manual","children":{}},"/careers/archived/reactjs-web-engineer":{"label":"Web Engineer, React.js","children":{}},"/careers/archived/visual-designer":{"label":"Visual Designer","children":{}},"/careers/archived/android":{"label":"Android","children":{}},"/careers/archived/golang":{"label":"Golang","children":{}},"/careers/archived/intern":{"label":"Intern","children":{}},"/careers/archived/ios":{"label":"iOS Developer","children":{}},"/careers/archived/qa":{"label":"QA Engineer","children":{}}}},"/careers/open-positions":{"label":"Open Positions","children":{"/careers/open-positions/business-manager":{"label":"Business Development Manager","children":{}},"/careers/open-positions/growth-lead":{"label":"Growth Lead","children":{}}}},"/careers/life":{"label":"Life","children":{"/careers/life/2024-09-26-29-dat-nguyen":{"label":"Dat Nguyen","children":{}},"/careers/life/2024-02-19-28-duyen-tran":{"label":"Duyen Tran","children":{}},"/careers/life/2024-01-22-27-tri-tran":{"label":"Tri Tran","children":{}},"/careers/life/2024-01-03-25-khoi-nguyen":{"label":"Khoi Nguyen","children":{}},"/careers/life/2023-12-13-24-tai-pham":{"label":"Tai Pham","children":{}},"/careers/life/2023-12-12-23-hieu-nghia":{"label":"Hieu Nghia","children":{}},"/careers/life/2023-11-27-22-cat-nguyen":{"label":"Cat Nguyen","children":{}},"/careers/life/2023-11-20-21-minh-cloud":{"label":"Minh Cloud","children":{}},"/careers/life/2023-11-13-20-hoai-khang":{"label":"Hoai Khang","children":{}},"/careers/life/2023-11-03-19-vi-tran":{"label":"Vi Tran","children":{}},"/careers/life/2023-10-30-18-tuan-tran":{"label":"Tuan Tran","children":{}},"/careers/life/2023-10-16-16-kim-ngan":{"label":"Kim Ngan","children":{}},"/careers/life/2023-10-13-17-hoang-nguyen":{"label":"Hoang Nguyen","children":{}},"/careers/life/2023-10-09-15-khoi-ngo":{"label":"Khoi Ngo","children":{}},"/careers/life/2023-10-02-14-dat-pham":{"label":"Dat Pham","children":{}},"/careers/life/2023-09-29-13-bien-vo":{"label":"Bien Vo","children":{}},"/careers/life/2023-09-18-12-toan-ho":{"label":"Toan Ho","children":{}},"/careers/life/2023-09-05-11-dinh-nam":{"label":"Dinh Nam","children":{}},"/careers/life/2023-08-17-10-cuong-mai":{"label":"Cuong Mai","children":{}},"/careers/life/2023-08-07-9-hoang-anh":{"label":"Hoang Anh","children":{}},"/careers/life/2023-06-30-7-khac-vy":{"label":"Khac Vy","children":{}},"/careers/life/group":{"label":"Group","children":{"/careers/life/group/2023-06-01-software-design-group":{"label":"Software Design Group","children":{}}}},"/careers/life/2022-09-21-7-my-anh":{"label":"My Anh","children":{}},"/careers/life/2022-08-11-6-hieu-vu":{"label":"Hieu Vu","children":{}},"/careers/life/2022-08-04-6-duy-nguyen":{"label":"Duy Nguyen","children":{}},"/careers/life/2022-08-03-5-nam-nguyen":{"label":"Nam Nguyen","children":{}},"/careers/life/2022-07-22-4-an-tran":{"label":"An Tran","children":{}},"/careers/life/2022-03-17-3-tom-nguyen":{"label":"Tom Nguyen","children":{}},"/careers/life/2022-02-25-2-anh-tran":{"label":"Anh Tran","children":{}},"/careers/life/2022-02-14-1-thanh-pham":{"label":"Thanh Pham","children":{}},"/careers/life/2021-03-31-0-tuan-dao":{"label":"Tuan Dao","children":{}},"/careers/life/2021-03-11-0-phat-nguyen":{"label":"Phat Nguyen","children":{}},"/careers/life/2020-05-08-0-thanh-pham":{"label":"Thanh Pham","children":{}},"/careers/life/2020-04-10-0-huy-nguyen":{"label":"Huy Nguyen","children":{}}}},"/careers/culture":{"label":"Culture","children":{}},"/careers/manifesto":{"label":"Manifesto","children":{}},"/careers/internship":{"label":"Internship","children":{"/careers/internship/2019":{"label":"2019","children":{"/careers/internship/2019/2019":{"label":"Spring Internship 2019","children":{}}}}}},"/careers/apprentice":{"label":"Apprentice","children":{"/careers/apprentice/2022":{"label":"2022","children":{"/careers/apprentice/2022/batch-of-2022":{"label":"Batch of 2022","children":{}},"/careers/apprentice/2022/2022-meet-ngoc-thanh-pham":{"label":"Thanh Pham","children":{}},"/careers/apprentice/2022/2022-meet-tuan-dao":{"label":"Tuan Dao","children":{}}}},"/careers/apprentice/apprentice":{"label":"Apprentice program","children":{}}}},"/careers/readme":{"label":"👋 Join the Dwarves","children":{}}}},"/opensource":{"label":"Opensource","children":{"/opensource/readme":{"label":"☀️ Open source","children":{}}}},"/culture":{"label":"Culture","children":{"/culture/culture-test":{"label":"The culture test","children":{}},"/culture/readme":{"label":"Notes on our culture","children":{}},"/culture/ogif-intro":{"label":"OGIF - Oh God It's Friday","children":{}},"/culture/red-flags":{"label":"Red flags","children":{}},"/culture/focus-on-delivery":{"label":"Focus on delivery","children":{}},"/culture/the-inner-circle":{"label":"The inner circle","children":{}},"/culture/making-decision":{"label":"Making decision as a team member","children":{}},"/culture/beyond-the-title":{"label":"Beyond the title","children":{}},"/culture/go-the-extra-mile":{"label":"Go the extra mile","children":{}},"/culture/runs-by-ideas":{"label":"The Dwarves runs by ideas","children":{}},"/culture/a-tips-of-hiring-dont":{"label":"A tips of hiring - Do & Don't","children":{}},"/culture/culture-handbook":{"label":"The Dwarves culture handbook","children":{}},"/culture/people-matter":{"label":"How people matter should work","children":{}},"/culture/delegation-and-believe-it-will-work":{"label":"Delegation and believe it will work","children":{}},"/culture/constructive-feedback":{"label":"Constructive feedback","children":{}},"/culture/transparency":{"label":"Transparency","children":{}},"/culture/account-management-strategy":{"label":"Account management strategies","children":{}},"/culture/avoid-burn-out":{"label":"Avoid burn out","children":{}},"/culture/high-performing-team":{"label":"Building a solid high performing team","children":{}},"/culture/delegate-work-not-responsibility":{"label":"Delegate work, not responsibility","children":{}},"/culture/blocking-distraction":{"label":"Blocking distraction","children":{}}}},"/playbook":{"label":"Playbook","children":{"/playbook/operations":{"label":"Operations","children":{"/playbook/operations/checklists":{"label":"Checklists","children":{"/playbook/operations/checklists/leave-and-request-checklist":{"label":"Leave Request","children":{}},"/playbook/operations/checklists/offboarding-checklist":{"label":"Offboarding","children":{}},"/playbook/operations/checklists/artifact-checklist":{"label":"Back up Artifact","children":{}},"/playbook/operations/checklists/project-archive":{"label":"Project Archive","children":{}},"/playbook/operations/checklists/project-case-study":{"label":"Project Case Study","children":{}},"/playbook/operations/checklists/project-communication":{"label":"Project Communication","children":{}},"/playbook/operations/checklists/project-handover":{"label":"Project Handover","children":{}},"/playbook/operations/checklists/project-initialization":{"label":"Project Initialization","children":{}},"/playbook/operations/checklists/assets-checklist":{"label":"Assets","children":{}},"/playbook/operations/checklists/billing-checklist":{"label":"Billing","children":{}},"/playbook/operations/checklists/candidate-checklist":{"label":"Candidate","children":{}},"/playbook/operations/checklists/consulting-contract-checklist":{"label":"Consulting Contract","children":{}},"/playbook/operations/checklists/hiring-checklist":{"label":"Hiring","children":{}},"/playbook/operations/checklists/onboarding-checklist":{"label":"Onboarding","children":{}},"/playbook/operations/checklists/unemployment-social-health-insurance":{"label":"Unemployment, Social, Health Insurance","children":{}},"/playbook/operations/checklists/vietnam-invoice-checklist":{"label":"Vietnam Invoice","children":{}}}},"/playbook/operations/how-to-conduct-delivery-reports":{"label":"How to conduct delivery reports","children":{}},"/playbook/operations/how-we-do-effective-planning-and-reporting":{"label":"How we do effective planning and reporting","children":{}},"/playbook/operations/project-schedule-delivery-guidelines":{"label":"Project Delivery Schedule and Guidelines","children":{}},"/playbook/operations/mbti-type-intj":{"label":"MBTI Type INTJ","children":{}},"/playbook/operations/mbti-type-istp":{"label":"MBTI Type ISTP","children":{}},"/playbook/operations/mbti-type-estj":{"label":"MBTI Type ESTJ","children":{}},"/playbook/operations/mbti-type-istj":{"label":"MBTI Type ISTJ","children":{}},"/playbook/operations/applying-myersbriggs-type-indicator-in-hr":{"label":"Applying Myersbriggs Type Indicator In Hiring","children":{}},"/playbook/operations/the-four-preferences":{"label":"The Four Preferences","children":{}},"/playbook/operations/adjust-the-way-we-work-in-basecamp-style":{"label":"Adjust The Way We Work In Basecamp Style","children":{}},"/playbook/operations/bric-a-brac":{"label":"Bric A Brac","children":{}},"/playbook/operations/writing-management-objectives-in-smart":{"label":"Writing Management Objectives In Smart","children":{}},"/playbook/operations/hiring-for-operations-team":{"label":"Hiring For Operations Team","children":{}},"/playbook/operations/annual-bonus-for-sales":{"label":"Annual bonus for sales","children":{}},"/playbook/operations/collaboration-guidelines":{"label":"Collaboration Guidelines","children":{}},"/playbook/operations/compliance-check-process":{"label":"Compliance Check Process","children":{}},"/playbook/operations/email-template":{"label":"Email Template","children":{"/playbook/operations/email-template/assignment-invitation-2":{"label":"Assignment Inviation (Skip pre-assessment)","children":{}},"/playbook/operations/email-template/assignment-invitation":{"label":"Assignment Inviation","children":{}},"/playbook/operations/email-template/confirm-resume-date":{"label":"Confirm Employee's Resume Date Day","children":{}},"/playbook/operations/email-template/farewell":{"label":"Farewell Letter","children":{}},"/playbook/operations/email-template/follow-up-onboarding-items":{"label":"Follow-up Onboarding Items","children":{}},"/playbook/operations/email-template/hung-king-commemoration-day":{"label":"Hung King Commemoration Day","children":{}},"/playbook/operations/email-template/information-about-resource-change":{"label":"Inform about resource change","children":{}},"/playbook/operations/email-template/international-labour-day":{"label":"International Labour Day","children":{}},"/playbook/operations/email-template/interview-invitation":{"label":"Interview Invitation","children":{}},"/playbook/operations/email-template/milestone-sign-off":{"label":"Milestone sign-off","children":{}},"/playbook/operations/email-template/national-day":{"label":"National Day","children":{}},"/playbook/operations/email-template/new-year-day":{"label":"New Year Day","children":{}},"/playbook/operations/email-template/offer-letter":{"label":"Offer Letter","children":{}},"/playbook/operations/email-template/referral-bonus-confirmation-note":{"label":"Referral Bonus Confirmation Note","children":{}},"/playbook/operations/email-template/rejection-email":{"label":"Rejection","children":{}},"/playbook/operations/email-template/salary-increment":{"label":"Salary Increment Announcement","children":{}},"/playbook/operations/email-template/tet-holiday":{"label":"Tet Holiday","children":{}},"/playbook/operations/email-template/thank-you-letter":{"label":"Thank you letter","children":{}},"/playbook/operations/email-template/welcome-onboard":{"label":"Welcome Onboard","children":{}},"/playbook/operations/email-template/welcome-to-dwarves-update":{"label":"Welcome to Dwarves Updates","children":{}}}},"/playbook/operations/naming-convention":{"label":"Naming convention","children":{}},"/playbook/operations/setup-email-template":{"label":"Setup email template in Gmail","children":{}},"/playbook/operations/types-of-employees":{"label":"Types Of Employees","children":{}},"/playbook/operations/hiring-approach":{"label":"Hiring Approach","children":{}},"/playbook/operations/the-okr":{"label":"The OKR","children":{}},"/playbook/operations/our-metrics-for-performance-review":{"label":"Our Metrics For Performance Review","children":{}},"/playbook/operations/make-remote-working-works":{"label":"Make Remote Working Works","children":{}},"/playbook/operations/our-policy-for-remote-working":{"label":"Our Policy For Remote Working","children":{}}}},"/playbook/engineering":{"label":"Engineering","children":{"/playbook/engineering/estimation-guidelines":{"label":"Estimation Guidelines","children":{}},"/playbook/engineering/presentation":{"label":"monitoring","children":{}},"/playbook/engineering/repo-icon":{"label":"release","children":{}}}},"/playbook/design":{"label":"Design","children":{"/playbook/design/design-system":{"label":"Design System","children":{}},"/playbook/design/ia-design":{"label":"Information Architecture","children":{}},"/playbook/design/ix-design":{"label":"IX","children":{}},"/playbook/design/aarrr":{"label":"AARRR","children":{}},"/playbook/design/design-sprint":{"label":"Design Sprint","children":{}},"/playbook/design/lean-canvas":{"label":"Lean Canvas","children":{}},"/playbook/design/prototype":{"label":"Low-fidelity prototype: UI Design","children":{}},"/playbook/design/ui-design":{"label":"UI","children":{}},"/playbook/design/ux-design":{"label":"UX","children":{}},"/playbook/design/wireframe":{"label":"wireframe","children":{}}}},"/playbook/readme":{"label":"Playbook","children":{}}}},"/fund":{"label":"Fund","children":{"/fund/ventures-fund-1":{"label":"Dwarves Ventures Fund 1","children":{}},"/fund/ventures-fund-0":{"label":"Dwarves Ventures Fund 0","children":{}}}}}},"/tags":{"label":"Popular Tags","children":{"/tags/earn":{"label":"#earn","children":{},"count":8},"/tags/productivity":{"label":"#productivity","children":{},"count":13},"/tags/quality":{"label":"#quality","children":{},"count":3},"/tags/open-source":{"label":"#open-source","children":{},"count":3},"/tags/liquidity":{"label":"#liquidity","children":{},"count":2},"/tags/rfc":{"label":"#RFC","children":{},"count":2},"/tags/icy":{"label":"#icy","children":{},"count":13},"/tags/blockchain":{"label":"#blockchain","children":{},"count":47},"/tags/ai":{"label":"#AI","children":{},"count":59},"/tags/evm":{"label":"#evm","children":{},"count":5},"/tags/web3":{"label":"#web3","children":{},"count":4},"/tags/foundry":{"label":"#foundry","children":{},"count":2},"/tags/hiring":{"label":"#hiring","children":{},"count":21},"/tags/case-study":{"label":"#case-study","children":{},"count":29},"/tags/handbook":{"label":"#handbook","children":{},"count":47},"/tags/business":{"label":"#business","children":{},"count":5},"/tags/growth":{"label":"#growth","children":{},"count":2},"/tags/frontend":{"label":"#frontend","children":{},"count":68},"/tags/market-report":{"label":"#market-report","children":{},"count":32},"/tags/security":{"label":"#security","children":{},"count":10},"/tags/mcp":{"label":"#MCP","children":{},"count":3},"/tags/btc":{"label":"#btc","children":{},"count":1},"/tags/swap":{"label":"#swap","children":{},"count":2},"/tags/golang":{"label":"#golang","children":{},"count":50},"/tags/go-weekly":{"label":"#go-weekly","children":{},"count":24},"/tags/llm":{"label":"#LLM","children":{},"count":76},"/tags/protocol":{"label":"#protocol","children":{},"count":2},"/tags/agents":{"label":"#agents","children":{},"count":5},"/tags/tooling":{"label":"#tooling","children":{},"count":9},"/tags/aider":{"label":"#aider","children":{},"count":2},"/tags/qwen2.5":{"label":"#qwen2.5","children":{},"count":1},"/tags/openhand":{"label":"#openhand","children":{},"count":1},"/tags/predicted output":{"label":"#predicted output","children":{},"count":1},"/tags/project-management":{"label":"#project-management","children":{},"count":1},"/tags/copilots":{"label":"#copilots","children":{},"count":2},"/tags/team-management":{"label":"#team-management","children":{},"count":1},"/tags/mongodb":{"label":"#mongodb","children":{},"count":1},"/tags/database":{"label":"#database","children":{},"count":8},"/tags/rag":{"label":"#RAG","children":{},"count":5},"/tags/salesforce":{"label":"#salesforce","children":{},"count":1},"/tags/use cases":{"label":"#use cases","children":{},"count":2},"/tags/react":{"label":"#react","children":{},"count":15},"/tags/performance":{"label":"#performance","children":{},"count":17},"/tags/design-system":{"label":"#design-system","children":{},"count":1},"/tags/storybook":{"label":"#storybook","children":{},"count":1},"/tags/hook":{"label":"#hook","children":{},"count":1},"/tags/testing":{"label":"#testing","children":{},"count":4},"/tags/cline":{"label":"#cline","children":{},"count":1},"/tags/realtime api":{"label":"#realtime api","children":{},"count":1},"/tags/interface":{"label":"#interface","children":{},"count":1},"/tags/import":{"label":"#import","children":{},"count":1},"/tags/package":{"label":"#package","children":{},"count":1},"/tags/yelp":{"label":"#yelp","children":{},"count":1},"/tags/generics":{"label":"#generics","children":{},"count":2},"/tags/entertainment":{"label":"#entertainment","children":{},"count":1},"/tags/observability":{"label":"#observability","children":{},"count":5},"/tags/log":{"label":"#log","children":{},"count":1},"/tags/pillar":{"label":"#pillar","children":{},"count":3},"/tags/metric":{"label":"#metric","children":{},"count":1},"/tags/tracing":{"label":"#tracing","children":{},"count":1},"/tags/intent-classification":{"label":"#intent-classification","children":{},"count":1},"/tags/prompting":{"label":"#prompting","children":{},"count":1},"/tags/evaluation":{"label":"#evaluation","children":{},"count":3},"/tags/enterprise":{"label":"#enterprise","children":{},"count":10},"/tags/language":{"label":"#language","children":{},"count":5},"/tags/ai-agents":{"label":"#ai-agents","children":{},"count":2},"/tags/ai-evaluation":{"label":"#ai-evaluation","children":{},"count":1},"/tags/moc":{"label":"#moc","children":{},"count":3},"/tags/prompt-engineering":{"label":"#prompt-engineering","children":{},"count":4},"/tags/ai-integration":{"label":"#ai-integration","children":{},"count":1},"/tags/networking":{"label":"#networking","children":{},"count":7},"/tags/finite-automata":{"label":"#finite-automata","children":{},"count":1},"/tags/pattern-matching":{"label":"#pattern-matching","children":{},"count":1},"/tags/state-machines":{"label":"#state-machines","children":{},"count":1},"/tags/java":{"label":"#java","children":{},"count":1},"/tags/programming":{"label":"#programming","children":{},"count":1},"/tags/caching":{"label":"#caching","children":{},"count":1},"/tags/devbox":{"label":"#devbox","children":{},"count":17},"/tags/nix":{"label":"#nix","children":{},"count":9},"/tags/generative-ui":{"label":"#generative-ui","children":{},"count":1},"/tags/docker":{"label":"#docker","children":{},"count":11},"/tags/function-calling":{"label":"#function-calling","children":{},"count":1},"/tags/ton":{"label":"#ton","children":{},"count":2},"/tags/design-pattern":{"label":"#design-pattern","children":{},"count":9},"/tags/gang-of-four":{"label":"#gang-of-four","children":{},"count":9},"/tags/behavior-pattern":{"label":"#behavior-pattern","children":{},"count":2},"/tags/visitor-design-pattern":{"label":"#visitor-design-pattern","children":{},"count":1},"/tags/ai-powered":{"label":"#ai-powered","children":{},"count":1},"/tags/feedback":{"label":"#feedback","children":{},"count":2},"/tags/pattern":{"label":"#pattern","children":{},"count":1},"/tags/supervisor-architecture":{"label":"#supervisor-architecture","children":{},"count":1},"/tags/document-processing":{"label":"#document-processing","children":{},"count":1},"/tags/information-retrieval":{"label":"#information-retrieval","children":{},"count":1},"/tags/iterators":{"label":"#iterators","children":{},"count":1},"/tags/reinforcement-learning":{"label":"#reinforcement-learning","children":{},"count":3},"/tags/vector-database":{"label":"#vector-database","children":{},"count":4},"/tags/kernel-programing":{"label":"#kernel-programing","children":{},"count":1},"/tags/solana":{"label":"#solana","children":{},"count":7},"/tags/defi":{"label":"#DeFi","children":{},"count":2},"/tags/anchor":{"label":"#anchor","children":{},"count":2},"/tags/machine-learning":{"label":"#machine-learning","children":{},"count":2},"/tags/containerization":{"label":"#containerization","children":{},"count":4},"/tags/virtualization":{"label":"#virtualization","children":{},"count":4},"/tags/investment":{"label":"#investment","children":{},"count":1},"/tags/personal-finance":{"label":"#personal-finance","children":{},"count":1},"/tags/content":{"label":"#content","children":{},"count":6},"/tags/instructions":{"label":"#instructions","children":{},"count":10},"/tags/guideline":{"label":"#guideline","children":{},"count":14},"/tags/websocket":{"label":"#websocket","children":{},"count":1},"/tags/protocols":{"label":"#protocols","children":{},"count":1},"/tags/dwarves":{"label":"#dwarves","children":{},"count":19},"/tags/radar":{"label":"#radar","children":{},"count":10},"/tags/labs":{"label":"#labs","children":{},"count":25},"/tags/process":{"label":"#process","children":{},"count":10},"/tags/rendering":{"label":"#rendering","children":{},"count":1},"/tags/dom":{"label":"#dom","children":{},"count":3},"/tags/cssom":{"label":"#cssom","children":{},"count":1},"/tags/render-tree":{"label":"#render-tree","children":{},"count":1},"/tags/iframe":{"label":"#iframe","children":{},"count":1},"/tags/postmessage":{"label":"#postmessage","children":{},"count":1},"/tags/mock-service-worker":{"label":"#mock-service-worker","children":{},"count":1},"/tags/api-mocking":{"label":"#api-mocking","children":{},"count":1},"/tags/web-development-tool":{"label":"#web-development-tool","children":{},"count":1},"/tags/engineering":{"label":"#engineering","children":{},"count":55},"/tags/bounty":{"label":"#bounty","children":{},"count":3},"/tags/community":{"label":"#community","children":{},"count":15},"/tags/data-fetching":{"label":"#data-fetching","children":{},"count":1},"/tags/frontend,":{"label":"#frontend,","children":{},"count":1},"/tags/graphql":{"label":"#graphql","children":{},"count":1},"/tags/reactjs":{"label":"#reactjs","children":{},"count":2},"/tags/scroll-driven-animations":{"label":"#scroll-driven-animations","children":{},"count":1},"/tags/animations":{"label":"#animations","children":{},"count":1},"/tags/intersection-observer":{"label":"#intersection-observer","children":{},"count":1},"/tags/nextjs":{"label":"#nextjs","children":{},"count":1},"/tags/server-component":{"label":"#server-component","children":{},"count":1},"/tags/caching-data":{"label":"#caching-data","children":{},"count":1},"/tags/social-networks":{"label":"#social-networks","children":{},"count":1},"/tags/tool":{"label":"#tool","children":{},"count":3},"/tags/practice":{"label":"#practice","children":{},"count":5},"/tags/foundation-model":{"label":"#foundation-model","children":{},"count":1},"/tags/fine-tuning":{"label":"#fine-tuning","children":{},"count":1},"/tags/vector database":{"label":"#vector database","children":{},"count":1},"/tags/shadow-dom":{"label":"#shadow-dom","children":{},"count":1},"/tags/web-api":{"label":"#web-api","children":{},"count":1},"/tags/backend":{"label":"#backend","children":{},"count":5},"/tags/swr-infinite":{"label":"#swr-infinite","children":{},"count":1},"/tags/web-design":{"label":"#web-design","children":{},"count":1},"/tags/tuning-llm":{"label":"#tuning-llm","children":{},"count":2},"/tags/langchain":{"label":"#langchain","children":{},"count":1},"/tags/web":{"label":"#web","children":{},"count":9},"/tags/translation":{"label":"#translation","children":{},"count":1},"/tags/profiling":{"label":"#profiling","children":{},"count":1},"/tags/micro-frontend":{"label":"#micro-frontend","children":{},"count":3},"/tags/architecture":{"label":"#architecture","children":{},"count":4},"/tags/nft":{"label":"#nft","children":{},"count":3},"/tags/state-mangement":{"label":"#state-mangement","children":{},"count":1},"/tags/global-state-management":{"label":"#global-state-management","children":{},"count":1},"/tags/css":{"label":"#css","children":{},"count":5},"/tags/fonts":{"label":"#fonts","children":{},"count":1},"/tags/variable-fonts":{"label":"#variable-fonts","children":{},"count":1},"/tags/state-management":{"label":"#state-management","children":{},"count":2},"/tags/component":{"label":"#component","children":{},"count":1},"/tags/proof-of-knowledge":{"label":"#proof-of-knowledge","children":{},"count":1},"/tags/fronten":{"label":"#fronten","children":{},"count":1},"/tags/hooks":{"label":"#hooks","children":{},"count":2},"/tags/typescript":{"label":"#typescript","children":{},"count":4},"/tags/analytics-tools":{"label":"#analytics-tools","children":{},"count":1},"/tags/analytics-platform":{"label":"#analytics-platform","children":{},"count":1},"/tags/parsing":{"label":"#parsing","children":{},"count":1},"/tags/validation":{"label":"#validation","children":{},"count":1},"/tags/webassembly":{"label":"#webassembly","children":{},"count":1},"/tags/sandbox":{"label":"#sandbox","children":{},"count":1},"/tags/zk-rollup":{"label":"#zk-rollup","children":{},"count":2},"/tags/polygon":{"label":"#polygon","children":{},"count":1},"/tags/starknet":{"label":"#starknet","children":{},"count":1},"/tags/ethereum":{"label":"#ethereum","children":{},"count":2},"/tags/zero-knowledge":{"label":"#zero-knowledge","children":{},"count":1},"/tags/network":{"label":"#network","children":{},"count":2},"/tags/atomic-css":{"label":"#atomic-css","children":{},"count":1},"/tags/client-side":{"label":"#client-side","children":{},"count":1},"/tags/storage":{"label":"#storage","children":{},"count":1},"/tags/frontend/performance":{"label":"#frontend/performance","children":{},"count":2},"/tags/wai-aria":{"label":"#wai-aria","children":{},"count":1},"/tags/accessibility":{"label":"#accessibility","children":{},"count":4},"/tags/polymorphic-component":{"label":"#polymorphic-component","children":{},"count":1},"/tags/threejs":{"label":"#threejs","children":{},"count":1},"/tags/web-performance":{"label":"#web-performance","children":{},"count":2},"/tags/html":{"label":"#html","children":{},"count":4},"/tags/animation":{"label":"#animation","children":{},"count":1},"/tags/zk-proof":{"label":"#zk-proof","children":{},"count":1},"/tags/guides":{"label":"#guides","children":{},"count":1},"/tags/responsive-design":{"label":"#responsive-design","children":{},"count":1},"/tags/hsl":{"label":"#hsl","children":{},"count":1},"/tags/javascript":{"label":"#javascript","children":{},"count":4},"/tags/css-in-js":{"label":"#css-in-js","children":{},"count":1},"/tags/tip":{"label":"#tip","children":{},"count":1},"/tags/dark-mode":{"label":"#dark-mode","children":{},"count":1},"/tags/multisign-wallet":{"label":"#multisign-wallet","children":{},"count":1},"/tags/virtual-dom":{"label":"#virtual-dom","children":{},"count":1},"/tags/native-modules":{"label":"#native-modules","children":{},"count":1},"/tags/vitejs":{"label":"#vitejs","children":{},"count":1},"/tags/esm":{"label":"#esm","children":{},"count":1},"/tags/tutorial":{"label":"#tutorial","children":{},"count":7},"/tags/modules":{"label":"#modules","children":{},"count":1},"/tags/blockchain-bridge":{"label":"#blockchain-bridge","children":{},"count":1},"/tags/foundational-topics":{"label":"#foundational-topics","children":{},"count":5},"/tags/distributed-systems":{"label":"#distributed-systems","children":{},"count":1},"/tags/pos":{"label":"#pos","children":{},"count":1},"/tags/smart-contract":{"label":"#smart-contract","children":{},"count":1},"/tags/atomic-design":{"label":"#atomic-design","children":{},"count":1},"/tags/a11y":{"label":"#a11y","children":{},"count":1},"/tags/useeffect":{"label":"#useeffect","children":{},"count":1},"/tags/token":{"label":"#token","children":{},"count":2},"/tags/report":{"label":"#report","children":{},"count":8},"/tags/radio":{"label":"#radio","children":{},"count":3},"/tags/wasm":{"label":"#wasm","children":{},"count":2},"/tags/rust":{"label":"#rust","children":{},"count":10},"/tags/concurrency":{"label":"#concurrency","children":{},"count":2},"/tags/parallelism":{"label":"#parallelism","children":{},"count":1},"/tags/engineering/frontend":{"label":"#engineering/frontend","children":{},"count":1},"/tags/writing":{"label":"#writing","children":{},"count":1},"/tags/english":{"label":"#english","children":{},"count":1},"/tags/design":{"label":"#design","children":{},"count":31},"/tags/design-thinking":{"label":"#design-thinking","children":{},"count":2},"/tags/macos":{"label":"#macos","children":{},"count":3},"/tags/swift":{"label":"#swift","children":{},"count":7},"/tags/operations":{"label":"#operations","children":{},"count":60},"/tags/project":{"label":"#project","children":{},"count":13},"/tags/data-structures":{"label":"#data-structures","children":{},"count":2},"/tags/software":{"label":"#software","children":{},"count":5},"/tags/vim":{"label":"#vim","children":{},"count":1},"/tags/monitoring":{"label":"#monitoring","children":{},"count":2},"/tags/upptime":{"label":"#upptime","children":{},"count":1},"/tags/consulting":{"label":"#consulting","children":{},"count":22},"/tags/tech-report":{"label":"#tech-report","children":{},"count":11},"/tags/overleaf":{"label":"#overleaf","children":{},"count":1},"/tags/slide":{"label":"#slide","children":{},"count":1},"/tags/office-hours":{"label":"#office-hours","children":{},"count":31},"/tags/ogif":{"label":"#OGIF","children":{},"count":32},"/tags/discord":{"label":"#discord","children":{},"count":32},"/tags/fintech":{"label":"#fintech","children":{},"count":16},"/tags/software-development":{"label":"#software-development","children":{},"count":1},"/tags/database-management":{"label":"#database-management","children":{},"count":1},"/tags/ux-ui":{"label":"#ux-ui","children":{},"count":13},"/tags/forward-engineering":{"label":"#forward-engineering","children":{},"count":14},"/tags/career":{"label":"#career","children":{},"count":39},"/tags/fullstack":{"label":"#fullstack","children":{},"count":2},"/tags/real-time":{"label":"#real-time","children":{},"count":1},"/tags/phoenix-live-view":{"label":"#phoenix-live-view","children":{},"count":1},"/tags/data":{"label":"#data","children":{},"count":14},"/tags/timescaledb":{"label":"#timescaledb","children":{},"count":1},"/tags/finance":{"label":"#finance","children":{},"count":1},"/tags/product-design":{"label":"#product-design","children":{},"count":7},"/tags/checklist":{"label":"#checklist","children":{},"count":17},"/tags/presentation":{"label":"#presentation","children":{},"count":1},"/tags/sql":{"label":"#sql","children":{},"count":4},"/tags/data-modeling":{"label":"#data-modeling","children":{},"count":1},"/tags/data-engineering":{"label":"#data-engineering","children":{},"count":5},"/tags/system-design":{"label":"#system-design","children":{},"count":2},"/tags/etl":{"label":"#etl","children":{},"count":3},"/tags/knowledge":{"label":"#knowledge","children":{},"count":2},"/tags/updates":{"label":"#updates","children":{},"count":14},"/tags/automata":{"label":"#automata","children":{},"count":1},"/tags/mobile":{"label":"#mobile","children":{},"count":3},"/tags/wala":{"label":"#WALA","children":{},"count":4},"/tags/fnb":{"label":"#fnb","children":{},"count":2},"/tags/film":{"label":"#film","children":{},"count":1},"/tags/error":{"label":"#error","children":{},"count":1},"/tags/startup":{"label":"#startup","children":{},"count":9},"/tags/shares":{"label":"#shares","children":{},"count":1},"/tags/founder":{"label":"#founder","children":{},"count":1},"/tags/culture":{"label":"#culture","children":{},"count":12},"/tags/test":{"label":"#test","children":{},"count":1},"/tags/life-at-dwarves, ai-developer, hybrid-work":{"label":"#life-at-dwarves, ai-developer, hybrid-work","children":{},"count":1},"/tags/hybrid-working":{"label":"#hybrid-working","children":{},"count":1},"/tags/guide":{"label":"#guide","children":{},"count":11},"/tags/team":{"label":"#team","children":{},"count":13},"/tags/newsletter":{"label":"#newsletter","children":{},"count":11},"/tags/reward":{"label":"#reward","children":{},"count":1},"/tags/ux":{"label":"#UX","children":{},"count":2},"/tags/directory-structure":{"label":"#directory-structure","children":{},"count":2},"/tags/file-management":{"label":"#file-management","children":{},"count":2},"/tags/file-system":{"label":"#file-system","children":{},"count":2},"/tags/permissions":{"label":"#permissions","children":{},"count":1},"/tags/database-modelling":{"label":"#database-modelling","children":{},"count":1},"/tags/nda":{"label":"#NDA","children":{},"count":1},"/tags/compliance":{"label":"#compliance","children":{},"count":2},"/tags/people":{"label":"#people","children":{},"count":27},"/tags/search":{"label":"#search","children":{},"count":1},"/tags/delivery":{"label":"#delivery","children":{},"count":3},"/tags/reporting":{"label":"#reporting","children":{},"count":1},"/tags/engagement":{"label":"#engagement","children":{},"count":2},"/tags/subscription":{"label":"#subscription","children":{},"count":1},"/tags/pricing":{"label":"#pricing","children":{},"count":1},"/tags/product":{"label":"#product","children":{},"count":1},"/tags/search-engine":{"label":"#search-engine","children":{},"count":1},"/tags/duckdb":{"label":"#duckdb","children":{},"count":3},"/tags/transformers.js":{"label":"#transformers.js","children":{},"count":1},"/tags/hybrid-search":{"label":"#hybrid-search","children":{},"count":1},"/tags/erlang":{"label":"#erlang","children":{},"count":1},"/tags/elixir":{"label":"#elixir","children":{},"count":5},"/tags/fsm":{"label":"#fsm","children":{},"count":1},"/tags/observer-pattern":{"label":"#observer-pattern","children":{},"count":1},"/tags/strategy-design-pattern":{"label":"#strategy-design-pattern","children":{},"count":1},"/tags/guidelines":{"label":"#guidelines","children":{},"count":3},"/tags/mechanism":{"label":"#mechanism","children":{},"count":1},"/tags/local-first":{"label":"#local-first","children":{},"count":1},"/tags/crdt":{"label":"#crdt","children":{},"count":2},"/tags/data-synchronization":{"label":"#data-synchronization","children":{},"count":1},"/tags/data-ownership":{"label":"#data-ownership","children":{},"count":1},"/tags/real-time-collaboration":{"label":"#real-time-collaboration","children":{},"count":1},"/tags/error-handling":{"label":"#error-handling","children":{},"count":1},"/tags/trait":{"label":"#trait","children":{},"count":1},"/tags/data-structure":{"label":"#data-structure","children":{},"count":1},"/tags/bloom-filter":{"label":"#bloom-filter","children":{},"count":1},"/tags/big-o":{"label":"#big-o","children":{},"count":1},"/tags/behavioral-pattern":{"label":"#behavioral-pattern","children":{},"count":1},"/tags/behavior-patterns":{"label":"#behavior-patterns","children":{},"count":2},"/tags/algorithms":{"label":"#algorithms","children":{},"count":1},"/tags/sorting":{"label":"#sorting","children":{},"count":1},"/tags/zettelkasten":{"label":"#zettelkasten","children":{},"count":1},"/tags/amm":{"label":"#amm","children":{},"count":1},"/tags/prompt":{"label":"#prompt","children":{},"count":1},"/tags/chatgpt":{"label":"#chatgpt","children":{},"count":1},"/tags/memo":{"label":"#memo","children":{},"count":3},"/tags/ops":{"label":"#ops","children":{},"count":2},"/tags/workflow":{"label":"#workflow","children":{},"count":4},"/tags/recording":{"label":"#recording","children":{},"count":1},"/tags/history":{"label":"#history","children":{},"count":1},"/tags/creational-design-pattern":{"label":"#creational-design-pattern","children":{},"count":1},"/tags/software-design":{"label":"#software-design","children":{},"count":2},"/tags/software-architecture":{"label":"#software-architecture","children":{},"count":3},"/tags/graphical-notation":{"label":"#graphical-notation","children":{},"count":2},"/tags/techecosystem":{"label":"#techecosystem","children":{},"count":1},"/tags/summit":{"label":"#summit","children":{},"count":1},"/tags/energy":{"label":"#energy","children":{},"count":1},"/tags/crypto":{"label":"#crypto","children":{},"count":1},"/tags/overview":{"label":"#overview","children":{},"count":1},"/tags/dfg":{"label":"#dfg","children":{},"count":6},"/tags/standardization":{"label":"#standardization","children":{},"count":1},"/tags/work-adoption":{"label":"#work-adoption","children":{},"count":1},"/tags/code of conduct":{"label":"#code of conduct","children":{},"count":1},"/tags/research":{"label":"#research","children":{},"count":3},"/tags/field-notes":{"label":"#field-notes","children":{},"count":1},"/tags/innovation":{"label":"#innovation","children":{},"count":2},"/tags/communications":{"label":"#communications","children":{},"count":3},"/tags/brain":{"label":"#brain","children":{},"count":1},"/tags/knowledge-base":{"label":"#knowledge-base","children":{},"count":1},"/tags/engineering/data":{"label":"#engineering/data","children":{},"count":5},"/tags/data-pipeline":{"label":"#data-pipeline","children":{},"count":1},"/tags/payment":{"label":"#payment","children":{},"count":2},"/tags/partners":{"label":"#partners","children":{},"count":1},"/tags/cybersecurity":{"label":"#cybersecurity","children":{},"count":2},"/tags/serverless":{"label":"#serverless","children":{},"count":1},"/tags/life-at-dwarves, community-contributor, techie-project":{"label":"#life-at-dwarves, community-contributor, techie-project","children":{},"count":1},"/tags/htmx":{"label":"#htmx","children":{},"count":2},"/tags/brainery":{"label":"#brainery","children":{},"count":2},"/tags/devops":{"label":"#devops","children":{},"count":6},"/tags/google-cloud":{"label":"#google-cloud","children":{},"count":1},"/tags/google-data-studio":{"label":"#google-data-studio","children":{},"count":1},"/tags/google-data-fusion":{"label":"#google-data-fusion","children":{},"count":1},"/tags/reliability":{"label":"#reliability","children":{},"count":2},"/tags/cdap":{"label":"#cdap","children":{},"count":1},"/tags/google-dataproc":{"label":"#google-dataproc","children":{},"count":1},"/tags/hadoop":{"label":"#hadoop","children":{},"count":2},"/tags/streaming":{"label":"#streaming","children":{},"count":1},"/tags/life-at-dwarves, alumni, career-growth":{"label":"#life-at-dwarves, alumni, career-growth","children":{},"count":1},"/tags/life-at-dwarves, backend-engineer, continuous-learning":{"label":"#life-at-dwarves, backend-engineer, continuous-learning","children":{},"count":1},"/tags/ecommerce":{"label":"#ecommerce","children":{},"count":2},"/tags/dropshipping":{"label":"#dropshipping","children":{},"count":1},"/tags/work":{"label":"#work","children":{},"count":14},"/tags/internal":{"label":"#internal","children":{},"count":11},"/tags/discussion":{"label":"#discussion","children":{},"count":6},"/tags/event":{"label":"#event","children":{},"count":6},"/tags/catchup":{"label":"#catchup","children":{},"count":5},"/tags/home":{"label":"#home","children":{},"count":1},"/tags/tauri":{"label":"#tauri","children":{},"count":1},"/tags/life-at-dwarves, backend-engineer, community-building":{"label":"#life-at-dwarves, backend-engineer, community-building","children":{},"count":1},"/tags/life-at-dwarves, backend-engineer, personal-development":{"label":"#life-at-dwarves, backend-engineer, personal-development","children":{},"count":1},"/tags/engineer":{"label":"#engineer","children":{},"count":1},"/tags/estimation":{"label":"#estimation","children":{},"count":1},"/tags/code-generation":{"label":"#code-generation","children":{},"count":1},"/tags/typesafe":{"label":"#typesafe","children":{},"count":1},"/tags/internship":{"label":"#internship","children":{},"count":2},"/tags/life-at-dwarves, backend-engineer, teamwork":{"label":"#life-at-dwarves, backend-engineer, teamwork","children":{},"count":1},"/tags/workshop":{"label":"#workshop","children":{},"count":1},"/tags/demo":{"label":"#demo","children":{},"count":1},"/tags/webrtc":{"label":"#webrtc","children":{},"count":1},"/tags/video-streaming":{"label":"#video-streaming","children":{},"count":1},"/tags/performance-review":{"label":"#performance-review","children":{},"count":1},"/tags/assessment":{"label":"#assessment","children":{},"count":1},"/tags/tech-radar":{"label":"#tech-radar","children":{},"count":1},"/tags/evaluating-tech":{"label":"#evaluating-tech","children":{},"count":1},"/tags/life-at-dwarves, product-executive, personal-growth":{"label":"#life-at-dwarves, product-executive, personal-growth","children":{},"count":1},"/tags/life-at-dwarves, frontend-engineer, community-member":{"label":"#life-at-dwarves, frontend-engineer, community-member","children":{},"count":1},"/tags/distributed-system":{"label":"#distributed-system","children":{},"count":1},"/tags/data-types":{"label":"#data-types","children":{},"count":1},"/tags/life-at-dwarves, communication-specialist, remote-work":{"label":"#life-at-dwarves, communication-specialist, remote-work","children":{},"count":1},"/tags/life-at-dwarves, qa-engineer, mentorship":{"label":"#life-at-dwarves, qa-engineer, mentorship","children":{},"count":1},"/tags/life-at-dwarves, qa-engineer, quality-standards":{"label":"#life-at-dwarves, qa-engineer, quality-standards","children":{},"count":1},"/tags/guidline":{"label":"#guidline","children":{},"count":1},"/tags/budgeting":{"label":"#budgeting","children":{},"count":3},"/tags/client":{"label":"#client","children":{},"count":1},"/tags/framework":{"label":"#framework","children":{},"count":6},"/tags/learning":{"label":"#learning","children":{},"count":3},"/tags/system design":{"label":"#system design","children":{},"count":1},"/tags/playbook":{"label":"#playbook","children":{},"count":3},"/tags/life-at-dwarves, backend-engineer, learning-culture":{"label":"#life-at-dwarves, backend-engineer, learning-culture","children":{},"count":1},"/tags/life-at-dwarves, backend-engineer, mentorship":{"label":"#life-at-dwarves, backend-engineer, mentorship","children":{},"count":3},"/tags/life-at-dwarves":{"label":"#life-at-dwarves","children":{},"count":2},"/tags/backend-engineer":{"label":"#backend-engineer","children":{},"count":1},"/tags/remote-work":{"label":"#remote-work","children":{},"count":1},"/tags/life-at-dwarves, frontend-engineer, community-building":{"label":"#life-at-dwarves, frontend-engineer, community-building","children":{},"count":1},"/tags/australia":{"label":"#australia","children":{},"count":1},"/tags/sargable-queries":{"label":"#sargable-queries","children":{},"count":1},"/tags/zookeeper":{"label":"#zookeeper","children":{},"count":1},"/tags/kafka":{"label":"#kafka","children":{},"count":1},"/tags/sequential-reads":{"label":"#sequential-reads","children":{},"count":1},"/tags/sequential-writes":{"label":"#sequential-writes","children":{},"count":1},"/tags/random-reads":{"label":"#random-reads","children":{},"count":1},"/tags/random-writes":{"label":"#random-writes","children":{},"count":1},"/tags/url-redirect":{"label":"#url-redirect","children":{},"count":1},"/tags/url-rewrite":{"label":"#url-rewrite","children":{},"count":1},"/tags/http":{"label":"#http","children":{},"count":1},"/tags/seo":{"label":"#SEO","children":{},"count":1},"/tags/life-at-dwarves, frontend-engineer, community-learning":{"label":"#life-at-dwarves, frontend-engineer, community-learning","children":{},"count":1},"/tags/life-at-dwarves, engineer, work-culture":{"label":"#life-at-dwarves, engineer, work-culture","children":{},"count":1},"/tags/dx":{"label":"#dx","children":{},"count":1},"/tags/life-at-dwarves, software-engineer, mentorship":{"label":"#life-at-dwarves, software-engineer, mentorship","children":{},"count":1},"/tags/machine learning":{"label":"#machine learning","children":{},"count":1},"/tags/r&d":{"label":"#r&d","children":{},"count":1},"/tags/technique":{"label":"#technique","children":{},"count":9},"/tags/vietnam":{"label":"#vietnam","children":{},"count":1},"/tags/write-heavy":{"label":"#write-heavy","children":{},"count":1},"/tags/inventory-platform":{"label":"#inventory-platform","children":{},"count":1},"/tags/scalability":{"label":"#scalability","children":{},"count":1},"/tags/doordash":{"label":"#doordash","children":{},"count":1},"/tags/low-latency":{"label":"#low-latency","children":{},"count":1},"/tags/sharing":{"label":"#sharing","children":{},"count":1},"/tags/management":{"label":"#management","children":{},"count":12},"/tags/teamwork":{"label":"#teamwork","children":{},"count":1},"/tags/multi-column-index":{"label":"#multi-column-index","children":{},"count":1},"/tags/index":{"label":"#index","children":{},"count":1},"/tags/composite-index":{"label":"#composite-index","children":{},"count":1},"/tags/components":{"label":"#components","children":{},"count":1},"/tags/scrum":{"label":"#scrum","children":{},"count":2},"/tags/technicaldebt":{"label":"#technicaldebt","children":{},"count":1},"/tags/projectmanagement":{"label":"#projectmanagement","children":{},"count":1},"/tags/email":{"label":"#email","children":{},"count":22},"/tags/decoder":{"label":"#decoder","children":{},"count":1},"/tags/json":{"label":"#json","children":{},"count":1},"/tags/materialized-view":{"label":"#materialized-view","children":{},"count":1},"/tags/data-warehouse":{"label":"#data-warehouse","children":{},"count":1},"/tags/mapreduce":{"label":"#mapreduce","children":{},"count":1},"/tags/distributed":{"label":"#distributed","children":{},"count":3},"/tags/form":{"label":"#form","children":{},"count":1},"/tags/uilibraries":{"label":"#uilibraries","children":{},"count":1},"/tags/migrations":{"label":"#migrations","children":{},"count":1},"/tags/agile":{"label":"#agile","children":{},"count":6},"/tags/behavior-driven-development":{"label":"#behavior-driven-development","children":{},"count":1},"/tags/ubiquitous-language":{"label":"#ubiquitous-language","children":{},"count":1},"/tags/forward-proxy":{"label":"#forward-proxy","children":{},"count":1},"/tags/apprenticeship":{"label":"#apprenticeship","children":{},"count":3},"/tags/life-at-dwarves, apprenticeship, backend-engineer":{"label":"#life-at-dwarves, apprenticeship, backend-engineer","children":{},"count":1},"/tags/remote":{"label":"#remote","children":{},"count":7},"/tags/showcase":{"label":"#showcase","children":{},"count":1},"/tags/life-at-dwarves, backend-engineer, golang":{"label":"#life-at-dwarves, backend-engineer, golang","children":{},"count":1},"/tags/life-at-dwarves, operations, techie-story":{"label":"#life-at-dwarves, operations, techie-story","children":{},"count":1},"/tags/life-at-dwarves, devops-engineer, personal-growth":{"label":"#life-at-dwarves, devops-engineer, personal-growth","children":{},"count":1},"/tags/life-at-dwarves, senior-engineer, mentorship":{"label":"#life-at-dwarves, senior-engineer, mentorship","children":{},"count":1},"/tags/quant":{"label":"#quant","children":{},"count":1},"/tags/life-at-dwarves, data-engineer, remote-work":{"label":"#life-at-dwarves, data-engineer, remote-work","children":{},"count":1},"/tags/apprentice":{"label":"#apprentice","children":{},"count":1},"/tags/life-at-dwarves, ui-designer, design-communication":{"label":"#life-at-dwarves, ui-designer, design-communication","children":{},"count":1},"/tags/life-at-dwarves, engineering-manager, mentorship":{"label":"#life-at-dwarves, engineering-manager, mentorship","children":{},"count":1},"/tags/meeting":{"label":"#meeting","children":{},"count":3},"/tags/us":{"label":"#us","children":{},"count":4},"/tags/funding":{"label":"#funding","children":{},"count":2},"/tags/ventures":{"label":"#ventures","children":{},"count":3},"/tags/mbti":{"label":"#mbti","children":{},"count":6},"/tags/intj":{"label":"#intj","children":{},"count":1},"/tags/istp":{"label":"#istp","children":{},"count":1},"/tags/estj":{"label":"#estj","children":{},"count":1},"/tags/istj":{"label":"#istj","children":{},"count":1},"/tags/personalities":{"label":"#personalities","children":{},"count":1},"/tags/early-stage":{"label":"#early-stage","children":{},"count":3},"/tags/healthcare":{"label":"#healthcare","children":{},"count":1},"/tags/browser-extension":{"label":"#browser-extension","children":{},"count":2},"/tags/git":{"label":"#git","children":{},"count":2},"/tags/life-at-dwarves, software-engineer, growth-mindset":{"label":"#life-at-dwarves, software-engineer, growth-mindset","children":{},"count":1},"/tags/life-at-dwarves, backend-engineer, career-change":{"label":"#life-at-dwarves, backend-engineer, career-change","children":{},"count":1},"/tags/marketplace":{"label":"#marketplace","children":{},"count":2},"/tags/real-estate":{"label":"#real-estate","children":{},"count":1},"/tags/nocode":{"label":"#nocode","children":{},"count":1},"/tags/hospitality":{"label":"#hospitality","children":{},"count":1},"/tags/ride-hailing":{"label":"#ride-hailing","children":{},"count":1},"/tags/iot":{"label":"#iot","children":{},"count":1},"/tags/tips":{"label":"#tips","children":{},"count":6},"/tags/partnership":{"label":"#partnership","children":{},"count":1},"/tags/travel":{"label":"#travel","children":{},"count":1},"/tags/purpose":{"label":"#purpose","children":{},"count":2},"/tags/delegate":{"label":"#delegate","children":{},"count":2},"/tags/transparency":{"label":"#transparency","children":{},"count":1},"/tags/event-sourcing":{"label":"#event-sourcing","children":{},"count":1},"/tags/sdlc":{"label":"#sdlc","children":{},"count":1},"/tags/pm":{"label":"#pm","children":{},"count":2},"/tags/life-at-dwarves, frontend-engineer, design-engineering":{"label":"#life-at-dwarves, frontend-engineer, design-engineering","children":{},"count":1},"/tags/modeling":{"label":"#modeling","children":{},"count":2},"/tags/life-at-dwarves, software-engineer, engineering-values":{"label":"#life-at-dwarves, software-engineer, engineering-values","children":{},"count":1},"/tags/burn-out":{"label":"#burn-out","children":{},"count":1},"/tags/goal":{"label":"#goal","children":{},"count":2},"/tags/license":{"label":"#license","children":{},"count":1},"/tags/operation":{"label":"#operation","children":{},"count":4},"/tags/template":{"label":"#template","children":{},"count":20},"/tags/k8s":{"label":"#k8s","children":{},"count":1},"/tags/js":{"label":"#js","children":{},"count":2},"/tags/clojure":{"label":"#clojure","children":{},"count":1},"/tags/react.js":{"label":"#react.js","children":{},"count":2},"/tags/employee":{"label":"#employee","children":{},"count":1},"/tags/onboarding":{"label":"#onboarding","children":{},"count":1},"/tags/assets":{"label":"#assets","children":{},"count":1},"/tags/marketing":{"label":"#marketing","children":{},"count":1},"/tags/human-resource":{"label":"#human-resource","children":{},"count":1},"/tags/dcos":{"label":"#dcos","children":{},"count":5},"/tags/okr":{"label":"#okr","children":{},"count":1},"/tags/oss":{"label":"#oss","children":{},"count":1},"/tags/policy":{"label":"#policy","children":{},"count":1}}}},"content":"<h3 id=\"topic-highlights\">Topic highlights</h3>\n<ol>\n<li>\n<p>Nam's presentation on \"UX Guide to Prompt with AI\"</p>\n<ul>\n<li>Overview of current AI-human interaction trends</li>\n<li>Introduction to the \"Race\" (Role, Action, Context, Expectation) concept in AI prompting</li>\n<li>Discussion of new methods to improve AI UX:\n<ul>\n<li>Context Through Rephrasing</li>\n<li>Implicit Referencing</li>\n<li>Continue Conversation</li>\n<li>Racing and AI Scoring</li>\n<li>System Prompting</li>\n</ul>\n</li>\n<li>Focus on designing AI tools for better user experience beyond speed and accuracy</li>\n</ul>\n</li>\n<li>\n<p>Minh's presentation on computing the union of two finite automata</p>\n<ul>\n<li>Applications of finite state machines in programming</li>\n<li>Use of automata in input validation (e.g., regex for email, phone number checks)</li>\n<li>Application in event-driven systems and event buttons</li>\n<li>Demonstration using Go source code</li>\n</ul>\n</li>\n<li>\n<p>Phat's presentation on Go Weekly commentary</p>\n<ul>\n<li>Overview of recent developments in the Go programming language</li>\n<li>Discussion of notable changes and updates</li>\n<li>Insights into the Go community and ecosystem</li>\n</ul>\n</li>\n<li>\n<p>Lap's presentation on Frontend Report for September</p>\n<ul>\n<li>Overview of recent trends and developments in frontend technologies</li>\n<li>Discussion of notable frameworks, libraries, and tools</li>\n<li>Insights into the frontend community and ecosystem</li>\n</ul>\n</li>\n</ol>\n<hr>\n<p><strong>Vietnamese Transcript</strong></p>\n<p><strong>08:02</strong> Có thông tin gì cần phổ biến không? Không thì chắc để phát lên trước, nay thấy nhiều bài quá, để ưu tiên cho mấy bạn mới. Ok, nay có tới năm bài.</p>\n<p><strong>09:13</strong>  Xin mời anh em.  Anh em nào có topic thì lên sớm nhờ. Dạ, pha start trước rồi, chưa đến phần Thành, mời Nam.  Dạ, bài của em là \"User Experience AI.\" Cái bài này chị team làm đi, rồi Thành bạn đã chuẩn bị chưa? Hôm nay, Nam sẽ chia sẻ về đề tài có tên là \"UX Guide to  Prompt with AI.\"</p>\n\n<p><strong>10:20</strong>\nThì em nói overview trước về tình hình hiện tại. Giao tiếp giữa con người và AI là chủ đề rất phổ biến hiện nay, và sự xuất hiện của LLM (Large Language Models) là công cụ hữu ích mà team mình đang muốn tìm hiểu. Bài hôm nay em sẽ dành cho ai quan tâm đến User Experience (UX) của AI, cụ thể hơn là cách các tool hiện đang thiết kế cho sự tương tác giữa người dùng và AI tốt hơn. Hiện nay có khá nhiều tool và platform ra đời, nhưng họ thường tập trung vào việc cải thiện tốc độ prompt và độ chính xác, thay vì chú trọng đến trải nghiệm người dùng.</p>\n<p><strong>11:08</strong> Cái khái niệm \"Race\" (Role, Action, Context, Expectation) rất phổ biến trong việc prompt AI. Người dùng cần prompt theo cấu trúc này để AI có thể tạo ra output chính xác nhất. Tuy nhiên, không phải trường hợp nào cũng áp dụng được \"Race.\" Có nhiều công ty đã phát triển những phương pháp mới để cải thiện UX của AI, giúp tương tác giữa người dùng và AI mượt mà hơn.</p>\n<p><strong>12:04</strong> Phương pháp đầu tiên là \"Context Through Rephrasing.\" Phương pháp này giúp AI truy vấn lại ngữ cảnh của câu hỏi trước, để trả lời câu hỏi tiếp theo một cách liên mạch, không cần từ đầu phải có cấu trúc prom chuẩn chỉnh. Ví dụ: Câu hỏi đầu tiên là “Who is the wife of Superman?” Tiếp theo, câu hỏi “When did they get married?” AI sẽ hiểu ngữ cảnh và liên kết đúng. Nhưng nếu không có ngữ cảnh phù hợp, như câu “What day did Titanic sink?”, AI sẽ không thể đưa ra kết quả đúng.</p>\n<p><strong>12:50</strong> Tiếp theo là \"Implicit Referencing,\" ví dụ khi hỏi về số tầng của một building, AI sẽ tự động assume đó là một tòa nhà nổi tiếng như \"Willis Tower in Chicago.\" Nếu hỏi “What day?” mà không có ngữ cảnh liên quan, AI không thể trả lời chính xác. Các câu hỏi cần có sự liên kết chặt chẽ với nhau để AI có thể trả lời tốt hơn, và điều này cũng áp dụng cho \"Context Through Rephrasing.\"</p>\n<p><strong>14:19</strong> Một khái niệm tương tự là \"Continue Conversation,\" như trong Google Assistant. Các câu hỏi được nối tiếp một cách tự nhiên, và mỗi câu hỏi mới sẽ liên quan đến những câu hỏi trước đó để tạo ra một chuỗi hội thoại liên tục.</p>\n<p><strong>15:03</strong> Phương pháp tiếp theo là \"Racing and AI Scoring.\" Google Assistant cũng áp dụng phương pháp này. Nó cung cấp nhiều tùy chọn dựa trên các ngữ cảnh khác nhau, giúp người dùng có kết quả tốt hơn. AI cũng có thể tự động học từ những lựa chọn của người dùng để cải thiện khả năng tương tác. Ví dụ, khi AI không rõ ngữ cảnh, nó sẽ đưa ra các tùy chọn cho người dùng chọn.</p>\n<p><strong>16:03</strong> Cuối cùng là \"System Prompting.\" Lý thuyết này định hướng cho AI hoạt động theo ngữ cảnh và mục tiêu người dùng đặt ra. Nó giúp AI tạo ra output chính xác mà không cần tuân theo một chuẩn prompt cố định. Ví dụ, cùng một câu hỏi “Plan for releasing a software product,” Chat GPT có thể đưa ra các khái niệm chung chung, trong khi GPT mini sẽ đưa ra các câu hỏi chi tiết hơn để giúp người dùng prompt tiếp và đạt kết quả chính xác hơn.</p>\n<p><strong>17:45</strong> Bài hôm nay sẽ tập trung vào việc thiết kế tool AI sao cho user experience tốt hơn, không chỉ dựa vào tốc độ hay độ chính xác, mà còn chú trọng đến sự tương tác và trải nghiệm tổng thể của người dùng.</p>\n<p><strong>18:50</strong> Tóm tắt lại bài này cho các bạn, đặc biệt là các bạn designer, bài của Nam có hai khía cạnh chính. Thứ nhất, nó giải thích cấu trúc của \"Race\" và cách áp dụng nó. Thứ hai, nó đưa ra một framework thiết kế tool AI tập trung vào việc prompt sao cho tương tác giữa AI và người dùng tốt hơn. Cấu trúc \"Race\" này gồm Role, Action, Context, và Expectation, và nó giúp cải thiện UX của AI.</p>\n<p><strong>19:20</strong> Giải thích cái cấu trúc sơ qua của chuyện là cái Race nó như thế nào, có những thể loại Race như thế nào là những phần nãy giờ Nam nói. Cái thứ hai đó là cái layer về chuyện xây dựng (build) một ứng dụng tập trung vào chuyện prompting, thì cấu trúc đó gắn vào ra làm sao. Khi viết một cái Race, bạn sẽ phải nói rõ Role, Action, Context, và Expectation.</p>\n<p><strong>20:03</strong> Race được mô tả rất rõ ràng: Role là gì, Action là gì, mọi thứ được mô tả theo cái Expect là gì, Task là gì. Tóm lại, chữ R thì cơ bản nhất là các designer sẽ nhìn và hiểu cấu trúc của một câu Race. Nó sẽ có cấu trúc nhất định, dựa trên đó mà đưa ra kết quả tiêu chuẩn. Input là như vậy, và output sẽ nhận được kết quả tương ứng.</p>\n<p><strong>20:47</strong> Phần thứ hai, phần cuối của bài này, sẽ nói về chuyện khi mình đã hiểu cấu trúc của một cái prompt rồi, và hiểu luôn cách để prompt sao cho chuẩn xác. Khi thiết kế, cần phải chú ý những gì? Phần này sẽ là phần mở vì bài này giống như là bài 101 cho các bạn designer để nhìn qua và hiểu cơ bản.</p>\n<p><strong>21:30</strong> Nam đã nói khá nhiều về cái chữ R, nên đôi lúc có thể mọi người sẽ hiểu lầm là bài này đang giải thích chi tiết lại cái đó. Nhưng thực ra bài này là giới thiệu về prompting cho UX designer. Ok, câu hỏi sẽ là, có ai có thắc mắc gì không? Bài này khá cơ bản, team mình xài nhiều rồi, demo cũng nhiều rồi. Có một phần cần lưu ý, bài này đặc biệt hơn ở chỗ giới thiệu về system prompting, mà các bài khác không có.</p>\n<p><strong>22:31</strong> Bài này giới thiệu cái system prompting mà các bài hướng dẫn khác thường không nhắc tới. Các bài viết cho người dùng cuối (end user) thường không đề cập đến điều này nhiều. Bài này nhắc tới system prompting vì nó viết dưới góc nhìn của designer – một người trong đội build. System prompting sẽ khác so với prompting thông thường, vì nó điều khiển cách AI hoạt động theo mục tiêu cụ thể của hệ thống.</p>\n<p><strong>23:06</strong> Cấu trúc của system prompting khác so với các loại R thông thường mà mọi người thường thấy khi đọc research. Thường thì các bạn chỉ thấy nói về 200 kiểu R khác nhau, nhưng không có góc độ là viết cho người build app. Bài này dành cho designer, không phải là end user, mà là người đứng giữa, để kết nối các phần lại với nhau.</p>\n<p><strong>23:48</strong> Bài này khác với những bài viết dành cho engineer vì nó không chỉ giới thiệu về tooling để xây dựng prompts, mà còn nói về việc kết hợp các kiểu R lại với nhau. Đây là bài ở mức độ trung gian, phù hợp cho các bạn làm designer, có vai trò đứng giữa, không trực tiếp build nhưng cũng không phải người dùng cuối. Nó giúp kết nối hai phần này với nhau.</p>\n<p><strong>24:33</strong> Ok, cảm ơn Nam. Tuần sau chắc sẽ scope lại bài theo content cho mọi người dễ hiểu hơn. Còn đi sâu vào chi tiết thì sẽ hơi khó để mọi người nắm bắt hết nội dung. Cảm ơn em nhé. Mời bạn tiếp theo. Để xem thử, không xem màn hình được, à vào lại rồi.</p>\n<p><strong>25:41</strong> Bài của em hôm nay là về một vấn đề nhỏ trong kỹ thuật lập trình, đó là cách compute một tổ hợp (Union) của hai cái finite automata hay còn gọi là finite state machine. Em sẽ demo nó trên một cái source code Go. Chủ đề này hôm nay sẽ có một số mục chính. Trước tiên sẽ giải thích các ứng dụng của automata để mọi người dễ hình dung trước, rồi sẽ đi vào chi tiết.</p>\n\n<p><strong>26:41</strong> Ứng dụng mà của finite state machine mà mọi người thường thấy nhất là nó sẽ dùng trong việc có một cái button và một cái input, thì mình sẽ muốn kiểm tra xem input này đưa vào cái button đó nó sẽ match hay là nó fail. Nó đơn giản chỉ là như vậy thôi. Cái dễ thấy nhất thường sẽ là dùng regex để kiểm tra xem một đoạn text có phải là một email hoặc là số điện thoại, hoặc là số nhà hay không. Mình sẽ có một cái button giống như vậy, và mình sẽ đưa một đoạn text vào cho nó kiểm tra xem nó có match với điều kiện đó không.</p>\n<p>Ngoài regex, dễ thấy nhất, thì ở trong những cái hệ thống event-driven nó sẽ có cái gọi là event button. Mọi người sẽ define một cái button dưới dạng một cái state machine, sau đó, mỗi event sẽ là một state, nó sẽ đi qua event button này và sẽ được filter qua xem nó có match với cái event đó hay không. Nếu match thì nó sẽ đi qua và tới cái state tiếp theo để nó làm tiếp, còn nếu không thì nó sẽ fail và không đi qua được.</p>\n<p><strong>27:27</strong> Đây là một ví dụ của nó: Ví dụ, mình có một cái event bus, tất cả các event sẽ đi qua cái event bus này và sẽ được filter qua các rule. Nếu một event thỏa mãn điều kiện của rule thì nó sẽ đi qua để tiếp tục xử lý. Điều này thường thấy nhất trong các hệ thống cloud hiện tại, họ dùng rất nhiều cái hệ thống này để quản lý các event và filter chúng qua những cái rule như vậy. Mọi người có thể thấy trong những cái hệ thống lớn như của Amazon chẳng hạn, event của họ sẽ đi qua một chuỗi các rule như thế.</p>\n<p><strong>28:05</strong> Ví dụ là mình có một cái button, và tất cả những cái item nào có cái field image, trong cái field image đó có một cái object là width với giá trị là 800, thì nó sẽ được pass qua hết. Và ở dưới thì nó cũng sẽ thêm một vài cái rule nữa, chẳng hạn như những cái field khác nhau mà mình thêm vào cho cái button đó. Đó là một ví dụ về việc finite state machine và event button hoạt động như thế nào. Khi một event được đưa vào hệ thống, nó sẽ đi qua các rule, và nếu thỏa mãn các điều kiện thì nó sẽ được pass qua để tiếp tục các bước xử lý tiếp theo.</p>\n<p><strong>28:56</strong> Đây là một ví dụ cụ thể về hệ thống event của Amazon, nơi mà các event của họ sẽ đi qua một chuỗi các rule để được filter và xử lý. Hầu hết các hệ thống cloud hiện nay đều sử dụng những mẫu button tương tự để quản lý và xử lý các event một cách có tổ chức và hiệu quả.</p>\n<p><strong>29:37</strong> Trong thực tế, bây giờ mình sẽ đi ngược lại một chút về finite automata (f automata) dưới góc độ toán học, nó là cái gì. Thực chất, nó đơn giản là một cái machine trong đó có một tập hợp những states. Để đi từ một state này tới một state tiếp theo, nó cần phải đi qua một transition. Ví dụ, để từ start state tới một end state, nó sẽ luôn cần phải có một điểm bắt đầu gọi là start state và một điểm kết thúc gọi là end state. Vì vậy, nó được gọi là finite state machine bởi vì nó luôn có điểm bắt đầu và điểm kết thúc.</p>\n<p><strong>30:21</strong> Ở giữa, sẽ có một tập hợp các transitions và states để di chuyển từ điểm bắt đầu tới điểm kết thúc. Một input symbol là cái để đưa vào một state để nó di chuyển tới một state khác, và trong thực tế, input symbol thường sẽ là một ký tự. Tí nữa mình sẽ bàn chi tiết về vấn đề này. Accepting state là trạng thái mà khi input của nó được chấp nhận, thì nó sẽ được di chuyển tới một state khác thông qua một transition. Nếu như không chấp nhận thì nó sẽ không di chuyển tới đâu cả, coi như transition đó không dẫn tới một state nào.</p>\n<p><strong>31:04</strong> Có hai loại finite automata, đó là deterministic finite automata (DFA) và nondeterministic finite automata (NFA). Điểm khác biệt duy nhất ở đây là với DFA, mỗi state sẽ có một input symbol duy nhất dẫn tới một transition tới một state khác. Còn với NFA, nó có thể có nhiều transitions cho cùng một state, thậm chí có thể không có transition nào hết. Điều này chỉ khác nhau về cách thể hiện con đường từ điểm bắt đầu tới điểm kết thúc, chứ thật ra một cái finite state machine đều có thể được biểu diễn dưới dạng DFA hoặc NFA, chỉ khác nhau cách biểu diễn thôi.</p>\n<p><strong>31:51</strong> Về phần Union của hai cái finite automata, thì nó sẽ là tổ hợp của tất cả các states và transitions của hai cái finite automata cộng lại. Đặc điểm của nó là nếu ví dụ cái event A pass qua được cái finite automaton FA1 và event B pass qua cái finite automaton FA2, thì tổ hợp của hai cái này, Union của hai cái này, nó phải đảm bảo là cả event A và event B đều pass qua được.</p>\n<p><strong>32:45</strong> Tại sao chúng ta cần phải tính toán Union của hai cái finite automata? Trong thực tế, ví dụ như khi dùng một cái event button, ta sẽ không dùng một cái button mà sẽ dùng nhiều button kết hợp lại với nhau. Ví dụ ở trong hình, chúng ta có thể define rất nhiều button, và trong event của mình có thể chứa nhiều đoạn thông tin match với những button này. Khi muốn kết hợp những button đó lại với nhau, chúng ta sẽ cần tính toán tổ hợp của tất cả chúng lại.</p>\n<p><strong>33:24</strong> Nhưng mình sẽ không tính tất cả một lần, mà sẽ tính từng cái một, từng cặp một, ví dụ như cặp A và cặp B trước, sau đó lấy tổ hợp của A và B, rồi lại tính với cặp C. Chỉ cần tính toán hai button một lúc thôi, đây là mức cơ bản nhất để tính ra được tổ hợp của tất cả các button này.</p>\n<p>Để tính toán Union của hai cái finite automata, theo lý thuyết thì chúng ta sẽ phải tính hết tất cả các states và transitions của hai automata đó. Ví dụ mình có hai cái button A và B, trong mỗi button sẽ có rất nhiều states, ví dụ như từ A1 đến Ax và từ B1 đến Bx. Khi tính toán theo kiểu lý thuyết, mình sẽ phải tính toán tất cả các trường hợp kết hợp giữa hai button này, ví dụ A1-B1, A2-B2, A1-B2, A2-B1, có rất nhiều trường hợp.</p>\n<p><strong>34:07</strong> Trong thực tế mình chỉ quan tâm đến việc khi đưa event vào button thì mình muốn biết nó có match hay không thôi. Mình chỉ cần quan tâm xem event đó sau khi đưa vào button, nó có thể đi đến state cuối hay không. Việc tính toán tất cả các states trong Union sẽ rất lãng phí và không cần thiết. Do đó, cách tiếp cận thực tế là mình sẽ có hai finite automata với các states từ A1 tới Ax và từ B1 tới Bx. Khi tính tổ hợp của chúng, mình sẽ kiểm tra xem state đó có dẫn tới một transition nào trong A hoặc B hay không. Nếu không, mình sẽ bỏ qua.</p>\n<p><strong>35:40</strong> Ví dụ như nếu state chỉ dẫn tới A1 và không có transition nào dẫn tới B, thì mình sẽ chỉ tính toán cho nhánh của A, bỏ qua nhánh của B. Ngược lại, cũng tương tự với B. Trường hợp cuối cùng là nếu A1 di chuyển tới Ax và B1 cũng di chuyển tới Bx, thì chúng ta sẽ tạo ra một state mới là Ax-Bx. Lúc này, mình sẽ bắt đầu đệ quy lại và tiếp tục tính toán từ bước đầu tiên này. Ví dụ, mình có A1-B1, và sau đó có A2-B2, thì mình sẽ lặp lại bốn bước này để tính toán tiếp.</p>\n<p><strong>36:15</strong> Khi đó, số lượng states mà mình có thể bỏ qua và không cần tính hoặc không cần lưu trữ sẽ giảm đi rất nhiều so với phương pháp lý thuyết ở trên.</p>\n<p>Về input symbol, như trong ví dụ về event button hoặc regex, trong thực tế, các button và input mà chúng ta truyền vào chương trình đều sẽ ở dạng ký tự. Ký tự ở đây thường sẽ là những cái.</p>\n<p><strong>37:04</strong> Ký tự dưới dạng UTF-8, tức là những ký tự đơn giản ví dụ như từ a tới z hoặc từ 0 đến 9. Nó sẽ nằm gọn trong UTF-8, bao gồm 244 ký tự. Mặc dù UTF-8 xài 8 bits (2^8 - 1 = 256), nhưng những bits từ 245 đến 255 thì dư ra, nên mình không xài, chỉ có 244 bits đầu tiên thôi. Rồi, đây là phần detail implementation trong code. Đây là cái workflow cơ bản mà mình sẽ thực hiện. Không biết có zoom được không? Zoom hình hồi nãy thử xem, không thấy chữ gì hết. Từ từ, để xem lại.</p>\n<p><strong>38:21</strong> Rồi, cái FA là gì? Finite automata hả? Đúng rồi, automata. Cái hàm này sẽ merge hai cái automata lại với nhau. Đầu tiên nó sẽ tạo ra một cái key để mình đánh dấu lại, để không phải đi lại những cái state mà mình đã xử lý rồi. Sau đó, nó sẽ check thử cái key này, nếu không trùng, thì nó bắt đầu làm việc. Nó sẽ tạo một cái combined state rỗng, bao gồm tất cả các transitions của hai cái finite automata đó. Rồi nó sẽ tiếp tục merge từng cái finite automata lại với nhau, từng cái một. Kéo lên, mình đọc chưa kịp cái đó.</p>\n<p><strong>39:33</strong> Trong quá trình implementation, sẽ có một số điểm cần chỉnh sửa trong cấu trúc dữ liệu để lưu lại những states đó. Đề tài này của em là em đang chạy cho cái example nào vậy? Hình này đang chạy sample nào? Đây chắc để em show code thì dễ nhìn hơn, phải nhìn vào đề bài mới biết đang code cho bài nào. Rồi, sau cái ví dụ này, sẽ có nhiều câu hỏi cho mình. Nhưng bài này chỉ cần Phúc và Tuấn hiểu là được, mọi người hiểu code rõ không?</p>\n<p>Ví dụ hồi nãy về bài toán event button, ở đây mình sẽ define một cái button chẳng hạn. Cái button em define ra dưới dạng T, và đây là cái event. Khi mình chạy đoạn code này, nó chỉ là một phần logic thôi, ngoài ra còn nhiều đoạn code khác nữa. Nhưng khi chạy cái đó, kết quả mình mong đợi là nó sẽ kiểm tra xem event này có match với button này không. Nó sẽ trả về kết quả là đúng hay không đúng, event có match với button không.</p>\n<p><strong>41:13</strong> Đúng rồi, đó là bài toán mà vấn đề này đang giải quyết. Đây là đoạn code đơn giản, em sẽ chạy ra kết quả, chỉ kiểm tra xem nó có match với button này hay không thôi. Ví dụ ở đây, button này có transition với từ \"user_register,\" chẳng hạn. Nếu em sửa lại điều gì đó khác, thì nó sẽ không match. Còn nếu event thỏa mãn điều kiện thì nó sẽ match, kiểu như vậy.</p>\n<p><strong>42:09</strong> Em sẽ đi thẳng tới phần logic chính. Nó sẽ là cái hàm để merge hai cái finite state machine lại với nhau. Mỗi cái finite automata này đại diện cho một cái button. Cứ tưởng tượng mình có nhiều cái button. Ở đây mới chỉ có một cái button thôi, ví dụ em tách cái này thành hai button. Hàm của mình có nhiệm vụ merge hai cái button đó lại để tạo ra một cái button tổng.</p>\n<p><strong>43:31</strong> Như đã nói, để tránh tính toán quá nhiều, trước tiên mình sẽ giải thích các tham số truyền vào hàm. Hai cái FAState là hai cái structure đại diện cho hai cái button hồi nãy của mình. Mỗi cái structure này bao gồm một small table để đại diện cho một dãy những input symbols và những transitions tương ứng. Epsilon là state mà tự đưa lại chính vị trí của nó, mình sẽ bỏ qua nó tạm thời. Ở đây mình chỉ quan tâm tới hai cái states này thôi. Đơn vị nhỏ nhất ở đây mà mình muốn làm input là file, bởi vì một ký tự sẽ được thể hiện dưới dạng UTF-8 và bao gồm 244 bits. Bây giờ mình sẽ loop qua từng bit trong từng ký tự này để so sánh.</p>\n<p><strong>44:20</strong> Ví dụ như trong ví dụ này, mình đưa một cái event vào, sau khi mình compute xong hai cái button này, nó sẽ bắt đầu từ từng ký tự. Ví dụ nó sẽ đi từ ký tự dấu ngoặc, rồi sẽ kiểm tra xem có transition nào tới cái \"user\" không. Nếu không có, nó sẽ skip phần ID, vì nó không match. Bạn này đang đi vào chi tiết cách so sánh từng ký tự.</p>\n<p><strong>45:02</strong> Skip đoạn này đi. Chỉ cần xem lợi ích và ý tưởng của việc cài đặt thôi, còn so sánh chi tiết thì không cần thiết ở đây. Lợi ích của phương pháp này đơn giản là nó giúp thuật toán không phải tính toán lại nhiều lần. Thuật toán khá đơn giản, chỉ là compare, như mình đã phân tích. Nếu một ký tự không có dẫn tới một transition nào, mình sẽ bỏ qua. Hoặc nếu nó chỉ dẫn tới một nhánh, mà nhánh đó không có transition nào, thì mình cũng bỏ qua luôn.</p>\n<p><strong>46:34</strong> Ví dụ nếu state A1 của mình đi đến state B, mà state B không tồn tại, thì mình sẽ bỏ qua nhánh đó. Ngược lại, nếu state này đã tồn tại trong map rồi, mình cũng sẽ bỏ qua. Chỉ khi nào thỏa hết các điều kiện thì mình mới bắt đầu tính toán và loop qua từng state trong finite automata. Sau khi loop qua từng bước với mỗi state tương ứng trong B, mình sẽ ra được cái state tổng và gán nó vào, sau đó return ra kết quả.</p>\n<p><strong>47:17</strong> Mọi người có hiểu không? Hỏi Minh xem. Minh đi coi cái này, anh kêu Minh quăng cái link lên. Bữa anh em nghe có hiểu không? Quan trọng là coi lại cái diagram đầu tiên, vì mình sợ mọi người không hiểu. Diagram này lâu lắm rồi, hơn cả tháng rồi đúng không? Đúng rồi, diagram này, mọi người có hiểu không?</p>\n<p><strong>49:11</strong> Hệ thống như event bus của Amazon cần phải merge có khi lên đến hàng triệu cái button, nên sẽ có một số chi tiết trong phần implementation để làm những việc này nhanh hơn. Rồi qua một hình khác nữa đi, hình kế tiếp, hình mà nó rẽ hai nhánh, dùng hình đó để nói dễ hơn. Hình rẽ hai nhánh, đúng rồi. Cái hình rẽ hai nhánh, cái nào mà nên? Ừ chắc dùng giữ hình này đi, mấy anh kia có hiểu không?</p>\n<p><strong>50:11</strong> Nói luôn cho rõ, lỡ nói bài này, mọi người nắm thì nó sẽ ok hơn. Hoàng có hiểu không? Em có hiểu cái này làm gì không? À, Phúc hỏi là có dùng bit operator không? Này thì chưa, chưa đến mức đó, chỉ là chi tiết so sánh rồi, không liên quan tới phần đó đâu. Tuấn, Minh ơi, Vincent đâu rồi, mọi người có hiểu bài này không? Không hiểu hả? Bài này nó ẩn tới ba lớp trong đó của phần Minh nói nha. Để mình clear vài thứ cho anh em đỡ lẫn lộn.</p>\n<p><strong>51:03</strong> Đầu tiên là finite automata, tức là cái machine trạng thái, giống như cái state transition diagram mà mấy anh em hay vẽ. Nhớ không? Nó có những trạng thái (states) và các nút (nodes) đại diện cho trạng thái đó. Cái thứ hai là các điều kiện (input symbols) để di chuyển từ trạng thái này qua trạng thái khác, gọi là transition. Đọc cho dễ hiểu, dễ nhớ nhé. Nó giống như cái state transition diagram, đó là cái đầu tiên.</p>\n<p><strong>51:47</strong> Cái thứ hai, cái mà Minh vừa show ra, là hai loại finite automata này. Tại sao lại show ra hai loại này? Vì có những trạng thái rất đơn giản, nó chỉ đi một chiều và không quay ngược lại được. Ví dụ, giờ ăn trưa chẳng hạn. Khi mình đi ra Hà Đô để ăn trưa, mình có thể đi ăn phở, đi bộ ra quán phở, ăn xong rồi đi về. Đó là hoàn thành một cái finite state trạng thái hũ hạn. Nó không có quay đầu lại được, đó là finite automata.</p>\n<p><strong>53:10</strong> Một ví dụ khác, có một trạng thái finite automata mới là đi ăn trưa, nhưng lần này đi xuống siêu thị mua cơm, trả tiền rồi đi về. Vẫn là một cái finite automata, nhưng nó có các states khác với cái trước.</p>\n<p><strong>53:57</strong> Câu chuyện là làm sao tính toán tổ hợp (union) của hai cái finite automata này. Giả sử có hai trạng thái tổ hợp, một là đi ăn phở, hai là đi mua cơm siêu thị. Ta cần build một cái union cho hai trạng thái đó, giống như Minh đã nói về việc merge hai cái state machines lại. Ở đây, chúng ta sẽ có hai lựa chọn: một là đi ăn phở, hai là đi siêu thị mua cơm. Ý tưởng là làm sao tổ hợp tất cả các lựa chọn có thể có giữa hai hệ thống states khác nhau.</p>\n<p><strong>54:30</strong> Mình tính tổ hợp của nó thì mình gộp lại thôi. Trong cái trường hợp hồi nãy, ví dụ đó, mình sẽ có bao nhiêu options? Một người đi ăn phở, người kia đi siêu thị, đúng không? Ví dụ cũng là tính tổ hợp, nhưng đây là tổ hợp khác nha. Bài toán là có hai cái hệ thống finite automata (FA), và mình yêu cầu là tính union của chúng lại. Sau đó, mình kiểm tra như thế nào? Sẽ có hai phần: phần thứ nhất là đi theo luồng ban đầu – đi ăn phở, và phần thứ hai là đi theo luồng siêu thị. Một trường hợp khác là khi chập hai hệ điều kiện lại với nhau, nó sẽ sinh ra một hệ phụ nữa. Khi đó, mình lại phải tiếp tục tính toán và compute thêm.</p>\n<p><strong>55:17</strong> Rồi, idea cơ bản của việc làm union của nhiều finite automata là vậy. Nó giống như phần mà Minh đã show lúc nãy, Minh có show cái source code. Rồi, coi lại cái hàm lúc nãy đi. Được rồi, ở đây, hàm của Minh có cái hàm để merge tất cả các states lại. Tức là, như đây, mình giả lập là có hai cái hệ states thôi đúng không, của hai cái finite automata khác nhau. Sau đó mình gộp lại thành một hệ chung, rồi ra được cái bảng lớn. Trên cái bảng lớn đó, mình mới tiếp tục tính toán với từng điều kiện.</p>\n<p><strong>56:04</strong> Giờ mình đã build xong cái bảng lớn, một cái array lớn là danh sách tổng các điều kiện nằm ngay đó. Bây giờ mình sẽ bắt đầu tính toán. Khi có một điều kiện mới đưa vào, nó sẽ bắt đầu bằng cách kiểm tra tất cả các điều kiện của hệ đầu tiên. Nếu không được, thì nó kiểm tra các điều kiện của hệ thứ hai. Nếu vẫn không match, thì nó sẽ kiểm tra tiếp điều kiện của hệ tổ hợp giữa hai hệ trước đó. Logic tính toán cơ bản là như vậy.</p>\n<p><strong>57:02</strong> Cái khó của bài này, nếu anh em cảm thấy hơi lẫn lộn, là do quá trình mô hình hóa từ toán học sang lập trình. Cho xem lại cái hàm và cái hình lúc nãy. Hình này là để giải thích tại sao trong bài regular expressions, người ta lại mention điều đó. Khi mình check trong cái dấu ngoặc vuông trong regular expressions, mình phải đi qua bao nhiêu điều kiện trong đó. Vì có nhiều options như vậy, mỗi option lại được mô hình hóa thành toán để dễ xử lý. Mỗi điều kiện là một cái finite automata, và chúng ta tính union của các điều kiện này.</p>\n<p><strong>58:38</strong> Mô hình hóa toán logic thành lập trình là quá trình tính toán với nhiều hệ khác nhau. Mình phải tính toán xem điều kiện union của các hệ 1, 2, 3, 4... Nếu không có điều kiện nào, thì mình phải tính tiếp hệ giao của từng cặp điều kiện. Bài toán này là như vậy. Nếu anh em muốn tìm hiểu thêm, đây là một bài quan trọng vì nó giúp cho hiểu cách mà mình làm trong các hệ thống logic lớn.</p>\n<p><strong>59:21</strong> Chắc bữa trước đưa cho Minh coi rồi. Tại vì điều này quan trọng, bởi nó liên quan tới việc làm hàm cộng trong logic. So sánh phổ biến nhất là login authentication, như bài log in, nó sẽ dính tới bài này. Trong quá trình log in, sẽ có nhiều điều kiện, ví dụ như nó pass bằng 2FA, hoặc email, hoặc SMS, hoặc password. Mỗi thứ này có thể mô hình hóa thành một cái finite automata riêng, và khi mình compute, mình gom tất cả lại.</p>\n<p><strong>01:00:00</strong> Ví dụ như có yêu cầu là người dùng phải có vừa face scan vừa có QR code trên app để đăng nhập. Đó là một điều kiện tổ hợp (giao), chứ không đơn giản là một điều kiện if như bình thường. Trong mô hình toán học, ta sẽ dễ dàng xử lý hơn vì nó sẽ có tính chất đệ quy để tính toán các tổ hợp logic phức tạp. Cái quan trọng nhất là làm sao để tính được tổ hợp này mà không phải tính lại nhiều lần. Output sẽ là success hoặc failure. Nhưng đối với các bạn junior, khi thêm một case mới mà không có tư duy mô hình hóa, họ sẽ làm rất nhiều if statements lộn xộn, gây khó khăn khi bảo trì code.</p>\n<p><strong>01:01:29</strong> Khi thêm một feature mới mà không có tư duy về mô hình hóa, code sẽ trở nên rối rắm và không hiệu quả. Họ sẽ phải sửa lại nhiều lần, gây ra nhiều lỗi và mất nhiều thời gian hơn để kiểm thử và sửa lỗi. Đó là lý do tại sao bài toán này quan trọng, vì nó ảnh hưởng tới việc thiết kế hệ thống, đặc biệt là các hệ thống như login authentication, nơi mà việc tổ hợp nhiều điều kiện là rất phổ biến.</p>\n<p><strong>01:02:23</strong> Còn câu hỏi nào không? Không có hả? Minh, em có hiểu hết không? Ok, chắc hết giờ rồi. Thành ơi, còn bài nào nữa không? Chắc còn hai bài nữa, tranh thủ làm nốt thôi. Để em xem nào. Mọi người thấy màn hình không? Ok, tuần này em chỉ biết được hai bài, còn một bài nữa nhưng nó dài quá, chắc hẹn tuần sau. Bài đó cần chi tiết hơn về cách sử dụng.</p>\n<p><strong>01:03:36</strong> Bài tiếp theo là về Go và cách embed file. Go embed là gì? Nó cho phép mình embed một cái file trực tiếp vào trong binary. Điều này giúp mình giảm thiểu việc handle các external files. Cách sử dụng là khi mình embed một file vào binary, quá trình handle sẽ trở nên đơn giản hơn. Nhưng có một hạn chế, đó là nếu file quá lớn, thì binary của mình sẽ phình to ra. Nên cần phải cẩn thận khi sử dụng.</p>\n\n<p><strong>01:04:15</strong> Cách sử dụng như thế này: mình chỉ việc import rồi sử dụng như bình thường. Ví dụ, mình có một cái file message, mình embed file đó vào, rồi có thể truy cập file đó trực tiếp trong binary. Đối với nhiều file, mình có thể thêm ký tự sau như thế này. Sau đó, mình dùng biến đã embed để read file hoặc access như một file bình thường. Hoặc mình có thể embed nguyên một thư mục Directory luôn.</p>\n<p><strong>01:04:57</strong> Thường thì chúng ta muốn embed cái static file như file ảnh, HTML, hoặc cái gì đó kiểu vậy. Về cái limitation mình nói trước đó, cái thứ hai là về reflect một cái package. Bài này thì nội dung cũng không mới. Thật ra cũng không mới nếu như mà em xài Go và có đọc trước bài của bác R rồi. Em sẽ nói qua luôn. Context của ông tác giả này cũng giống như mình thôi. Ví dụ như ổng đang xài một cái tool, một cái codebase nào đó, xong ổng gặp vấn đề về reflect và viết lại bài này. Thì nhìn chung, reflect có ba phần cần chú ý.</p>\n<p><strong>01:05:49</strong> Ba phần quan trọng là: từ interface value cho đến reflection object, và ngược lại. Phần cuối cùng là khi muốn modify thì những cái value đó phải settable – nghĩa là phải được export, tức là phải viết trên capitalized value. Interface value là gì? Reflection object là gì? Interface value là mỗi hàm mà mình xài trong package reflect, nó luôn được hiểu là một interface{} rộng, cho nên nó là giá trị interface. Còn cái giá trị này là reflection object, và ngược lại.</p>\n<p><strong>01:06:36</strong> Về chiều đi: ValueOf sẽ trả về một reflection object. Còn chiều ngược lại: từ đây, mình có thể dùng method là .Interface() để trả ngược lại giá trị ban đầu. Bên Go thì hiện tại nó đã mặc định sẵn rồi. Nếu muốn cập nhật (update) cái gì đó, mình cần tìm cái settable. Reflect có method này để mình có thể dùng và cập nhật được.</p>\n<p><strong>01:07:12</strong> Còn một ý nữa là bên bài viết đó cũng đã nói rồi – nên tránh dùng reflect trừ trường hợp bất khả kháng. Vì nếu mình dùng các hàm như FieldByName, nếu input không được kiểm soát tốt, nó có thể dẫn đến panic hoặc crash ngay lập tức. Nên chỉ dùng khi thực sự cần thiết thôi, trong những trường hợp bí bách.</p>\n<p><strong>01:07:53</strong> Còn một bài khác nữa mà em nói là dài, nói về map. Bài này so sánh giữa việc xài map bình thường với khi cần hỗ trợ concurrency, thì mình cần dùng locking strategy. Có thể xài mutex hay cái gì đó, hoặc lock khác. Bên package sync có hỗ trợ một cái sync.Map. Bài đó sẽ so sánh giữa hai cách tiếp cận này. Thực sự thì không có cái nào hơn cái nào, mà tuỳ vào use case mà xài.</p>\n<p><strong>01:08:35</strong> Rồi chắc tới phần sau. Phát dạ, đơn giản thôi. Minh Trần đang hỏi về logic của ba automata, rồi yêu cầu thêm hai automata nữa. Thì Minh Trần đang hiểu sai thứ tự rồi. Thứ tự sẽ là theo logic khác. Tại sao anh Huy lại nói về các automata của hệ thống Việt Nam? Là bởi vì trước đây họ tiếp cận từ góc độ máy công nghiệp, những hệ máy tự động hoá. Không thể build tụi nó để chúng tương tác với nhau, chạy với nhau tự động, vì chi phí thử và sai rất cao.</p>\n<p><strong>01:09:31</strong> Vì thế, để đảm bảo hiệu quả, họ phải tính toán về mặt logic trước, xem có bao phủ hết các trường hợp không. Ví dụ, khi có ba hệ thống, thêm hai hệ thống nữa là thành năm hệ thống. Trước tiên, phải xem thiết kế logic có chồng chéo gì không. Sau đó, mình mới list out các cây logic ra và tính toán. Đó là bước đầu tiên, sau đó mới tiến hành cài đặt.</p>\n<p><strong>01:10:09</strong> Còn phần lập trình thực hiện sau đó tuỳ vào cách bạn muốn làm: có thể là union các hệ thống hoặc làm hàm cộng. Quan trọng là trước khi làm gì, mình phải đảm bảo phần logic đã cover được hết các trường hợp. Logic ở đây không chỉ là chuyển từ A sang B, mà là hệ logic tổng quát, bao gồm việc tính toán trên cây logic.</p>\n<p><strong>01:10:50</strong> Union trong bài này nói về logic toán học một chút thôi. Còn khi implementation, nếu anh em đã làm thì chắc cũng dễ dàng làm được hàm cộng. Chỉ cần hiểu là trong union logic, chúng ta gom các điều kiện lại và tính toán. Sau khi gom các điều kiện đó, câu hỏi sẽ là trong hàm cộng, nó thực hiện như thế nào. Thường thì mọi người sẽ cố gắng explicitly từng bước một.</p>\n<p><strong>01:11:53</strong> Ok, chắc ổn rồi. Thành còn gì nữa không? Ok, được rồi, để bên DevOps xử lý tiếp. Vào thử lại xem có vấn đề gì không. Mọi người tranh thủ làm bài test sớm nhé. Đợt này có deal về tài chính và AI, nên hãy chú ý.</p>\n<p><strong>01:13:04</strong> Rồi, em sẽ nói qua luôn. Trong tháng 9 này thì không có nhiều tin nổi bật. Em sẽ nói nhanh thôi. Đầu tiên là về React, với những keywords như server actions, server functions, và React compiler. Có một bài viết trên freeCodeCamp về kiến trúc của React 19, nói rõ về cách tối ưu hoá hiệu suất. Nếu mọi người có thời gian thì nên đọc bài này.</p>\n\n<p><strong>01:15:12</strong> Về Next.js, không có gì mới. Chỉ có một cái lùm xùm hồi đầu tháng khi OpenAI chuyển từ Next.js sang Remix. Tóm lại, OpenAI muốn trang của họ nhẹ hơn vì Next.js hơi nặng đối với kiểu trang SPA của chatbox. Vì vậy, họ quyết định quay về dùng Remix. Điều này liên quan đến một xu hướng mà em cảm thấy đang xuất hiện trong cộng đồng engineer: các framework như Next.js dần không được ưa chuộng như trước nữa.</p>\n<p><strong>01:15:51</strong>\nCòn về Next.js, không có gì nhiều, chỉ vậy thôi. Ngoài ra, có một cái OpenNext, nó đang hướng tới hỗ trợ việc host Next.js trên tất cả các runtime. Hiện tại, Next.js chỉ chính thức hỗ trợ hosting trên các môi trường cụ thể, còn nếu muốn host ở những môi trường khác thì rất khó khăn.</p>\n<p><strong>01:16:28</strong> Thằng OpenNext này thì mục tiêu của tụi nó là muốn hướng tới một cách mà mọi người có thể host Next.js trên tất cả các môi trường, kiểu không còn bị Versel độc quyền nữa. Vậy nên, có thằng này làm để giải quyết vấn đề đó. Qua cái mục này thì em thấy có hai cái thú vị đang được feature ở đây. Có một thanh niên đang implement một hệ thống real-time đơn giản dùng TypeScript và React. Nói chung, nó khá đơn giản, nhưng mà khi đọc thì thấy nó vui vui, kiểu như là JavaScript làm được mọi thứ vậy.</p>\n<p><strong>01:17:14</strong> Next là một bài về chủ đề này. Nó hơi giống như commentary, nhưng mà em để bên này vì thấy nó cũng khá liên quan. Bài này bàn về trạng thái của ES5 trên web. ES5 giống như đợt trước em có nói, kiểu như CSS3 vậy, mấy cái công nghệ này tồn tại quá lâu rồi. Bài này khảo sát xem các thư viện, trang web trên internet liệu còn bao nhiêu trang web đang còn dùng ES5 hay đã move qua ES6 hết rồi. Tóm lại, kết luận là 89% của top 10.000 trang web hiện tại đã shift sang ES6 rồi.</p>\n<p><strong>01:17:55</strong> Cho nên, kết luận ở đây là ES5 vẫn xài, nhưng mà khi làm một cái gì đó mới, nhất là khi làm thư viện mới, thì nói chung là không nên hướng tới ES5 nữa, vì nó cũng sắp lỗi thời rồi, nó đã quá lâu rồi. State of ES5 vẫn khá là liên quan.</p>\n<p><strong>01:18:44</strong> Về phía trending, không có gì nhiều, nhưng có một bài này em thấy khá vui. Người ta đang có một cái open letter để kêu gọi thằng Oracle bỏ cái trademark của JavaScript. Em mới biết là JavaScript thuộc về trademark của Oracle. Khi nhắc tới Oracle, mọi người chỉ biết về Java thôi, gần như không có sản phẩm nào liên quan tới JavaScript, nhưng mà trademark của JavaScript lại thuộc về Oracle. Nên cái open letter này là kiểu mấy ông lớn trong giới developer yêu cầu Oracle thả cái trademark của JavaScript ra đi, đừng giữ nữa, vì Oracle không có đóng góp gì cho cộng đồng JavaScript.</p>\n<p><strong>01:19:22</strong> Có rất nhiều người nổi tiếng đã ký vào bức thư này, những người creator của Node.js và JavaScript, kiểu rất nhiều người họ đã ký. Em cũng mới biết tới, nhưng mà thấy cũng hay hay.</p>\n<p><strong>01:20:16</strong> Rồi tiếp theo, quay lại mấy cái framework và library mới, nhưng chắc phần này em sẽ skip vì không có gì đặc biệt. Có một cái bài commentary mà anh Thành gửi cho em, nó liên quan về cái sentiment của cộng đồng về React và JavaScript, đặc biệt là Next.js. Bài này khá dài, nhưng tóm lại ý chính của họ là các framework như Next.js càng ngày càng nặng.</p>\n<p><strong>01:20:55</strong> Họ chỉ trích xu hướng hiện tại của cộng đồng engineer React là các front-end developers đang chạy theo các framework và library lạm dụng quá nhiều JavaScript. Điều này có lợi cho trải nghiệm của developer (DX), nhưng lại làm giảm trải nghiệm của người dùng (UX) vì phải ship quá nhiều JavaScript về phía client. Tóm lại là code thì sướng, nhưng sản phẩm cuối cùng thì người dùng lại không thích. Đặc biệt là họ chỉ đích danh thằng Next.js, nói rằng cần đẩy ngược các phần nặng về lại server để cải thiện trải nghiệm người dùng.</p>\n<p><strong>01:21:28</strong> Cái sentiment này khá rõ ràng, họ đang kêu gọi mọi người chuyển ngược về server-side nhiều hơn. Em thấy bên front-end cứ đi vòng quanh vậy thôi, từ server chuyển xuống client, rồi từ client nặng quá lại kêu chuyển về server.</p>\n<p><strong>01:22:19</strong> Nói chung là đó là mấy bài em thấy thú vị trong đợt tháng 9 vừa rồi. Drama thì cũng có chút thú vị, lôi kéo sự chú ý. Bên Go thì ổn định quá nên không có drama, thành ra không ai nói gì nhiều. Còn bên JavaScript thì cứ có drama suốt, từ server-side script, JavaScript modules, kiểu như drama quanh đi quẩn lại. Cộng đồng này lúc nào cũng vậy, không có biên chuẩn rõ ràng thì lúc nào cũng cãi nhau về chuyện đó.</p>\n<p>Cảm ơn mọi người. Về phần reminder, các anh em tranh thủ làm bài test sớm nhé, để có thời gian xử lý kịp. Còn một số phần team lab cần xem lại, đặc biệt là báo cáo kết quả sau khi chuyển hết phần này, xem còn gì cần report không. Thành, chắc tụi mình sẽ wrap up ở đây và tập trung vào các case đã nói trước rồi, nhé.</p>\n<p><strong>01:23:30</strong> Rồi, cảm ơn mọi người! Về phần reminder, các anh em tranh thủ làm bài test sớm nhé, để có thời gian xử lý kịp. Còn một số phần team lab cần xem lại, đặc biệt là báo cáo kết quả sau khi chuyển hết phần này, xem còn gì cần report không. Thành, chắc tụi mình sẽ wrap up ở đây và tập trung vào các case đã nói trước rồi, nhé.</p>\n<p><strong>01:24:04</strong> Lập, xem lại giúp nhé. Cát có share một bài bên ngoài, bài đó mới post lên, dễ hiểu, mọi người thử xem nhé. Xu hướng hiện tại của mình sẽ kết thúc chu kỳ của mấy cái software không cần suy nghĩ nhiều, mà tập trung vào phần tooling nhiều hơn. Giờ mấy cái kỹ thuật cơ bản về toán và logic đang quay lại. Sắp tới, team lab sẽ report các chủ đề theo hướng logic nhiều hơn, để anh em nghe quen dần.</p>\n<p><strong>01:24:50</strong> Tom hồi giữa tuần có dựng lại một cái library mới tên là WebUI sau khi cái library cũ bị shut down. Mọi người thử xem. Thằng này khá là legit, khi mình hỏi về chủ đề compile union của hai cái finite automata, nó trả lời toàn bộ theo công thức toán hết, nhìn rất dễ hiểu. Nó giải thích rõ ràng từng bước làm thế nào để tính union của hai hệ thống finite automata.</p>\n<p><strong>01:26:15</strong> Đây, hai hệ rời, hệ chập lại điều kiện để tính toán điều kiện của hai cái dưới đây. Nó nói về chuyện state transitions, anh đang thử nghiệm một vài khái niệm về toán trên đây, và thấy khá là legit. Nếu được, khuyến khích anh em xài con này nhiều hơn. Con này, Tôm đã ngồi mod lại cái system của nó rồi. Ban đầu có thể sẽ nhìn hơi khó chịu một chút, vì mình đã quen nói chuyện bằng ngôn ngữ bình thường khi giải đề toán rất bình thường. Giờ mình phải step back lại một chút, để thấy rằng mấy kiến thức về khối A (toán học) giờ nó có giá trị. Full logic luôn. Rồi, advance như thế nào, practical implications là như thế nào, kỹ thuật làm như thế nào, đều có hết.</p>\n<p><strong>01:26:57</strong> Thành thử ra, với những gì đang diễn ra, với các inquiry và commentary, anh ngồi dò, chắc chắn là thị trường sẽ chuyển qua hướng tài chính. Từ năm ngoái đến giờ, sau đợt blockchain và crypto, team mình hiện tại, đội của Huy Nguyễn vẫn đang tiếp tục, và đội đó vẫn rất ổn. Một số kỹ thuật mới hơn bên blockchain, như Monas hay gì đó, thì mình chưa xem, nhưng chắc cũng tương tự thôi, không có kỹ thuật nào khác biệt quá.</p>\n<p><strong>01:28:29</strong> Về mảng tài chính, mình đang tích cực gần với các cycles về tài chính. Domain đó đang build up theo hướng này, và có vẻ như đây là một cửa rất sáng. Hướng này team mình cũng đang dần làm gần hết rồi, giờ chỉ còn lại là số lượng case study nhiều hay ít nữa thôi. Anh nghĩ vậy là hợp lý. Chất lượng đội ngũ cũng đang được cải thiện dần. Như bài lúc nãy đưa cho Minh, không nhớ là đã đưa cho Minh Lư chưa, nhưng Minh có xem được thì chắc cũng đã hiểu được tầm 6/10. Nhưng anh tin rằng nó vẫn hơn rất nhiều so với nhiều người khác. Mặc dù có sợ, nhưng không report lại được. Minh đã mở hai phần của finite state ra và giải thích rất legit.</p>\n<p><strong>01:29:12</strong> Định hướng của team là theo hướng đó. Nếu khéo, thì chắc là hết tháng này, mình có thể đẩy thêm được nội dung về toán logic nhiều hơn một chút, cố gắng so sánh giữa những khái niệm cũ và những khái niệm mới mà mình đang biết, tương đương với nhau thôi. Biên lại, chỉnh lại cho phù hợp. Ok, không yêu cầu tất cả mọi người phải đi theo hướng đó, nhưng theo quan sát cơ bản, anh thấy thị trường đang dịch chuyển theo hướng đó. Để giữ giá trị khác biệt, mình chơi game theo cách khác chút. Đó là message để anh em aware.</p>\n<p><strong>01:29:58</strong> Nếu không có gì khác thì còn một bài của anh Thành, chắc để sau. Còn lại, mọi thứ, thằng vừa rồi nếu mọi người chưa có access, thì xin chỗ Tom nhé. Hẹn gặp lại anh em tuần sau. Thứ Tư tuần sau sẽ không có buổi họp giữa tuần, mọi người ngồi và làm tiếp theo hướng mình vừa nói nhé. Content làm sao để anh em hiểu.</p>\n<p><strong>01:30:57</strong> Ok, chắc là vậy nhé. Bye bye anh em, hẹn gặp lại anh em vào Thứ Sáu tuần sau. Thứ Tư tuần sau sẽ không có buổi nào ở giữa nữa. Mọi người dành thời gian xem thêm nội dung liên quan tới những gì cần để hoàn thành bài test nhé. Cảm ơn tất cả anh em. Bye bye, hẹn gặp lại.</p>\n<hr>\n<p><strong>English transcript</strong></p>\n<p><strong>08:02</strong> Is there any information that needs to be shared? If not, let's have Phát go first, I see a lot of topics today, so let's prioritize the new members. Ok, there are five topics today.</p>\n<p><strong>09:13</strong> Please come forward. Whoever has a topic, please go early. Yes, Phát will start first, and then Thành’s part will follow. Nam, are you ready? Today, Nam will share a topic called \"UX Guide to Prompt with AI.\"</p>\n<p><strong>10:20</strong> I’ll give an overview of the current situation first. Interaction between humans and AI is a popular topic today, and the emergence of Large Language Models (LLM) is a useful tool that our team is looking into. Today’s topic is for anyone interested in the User Experience (UX) of AI, specifically how tools are currently designed to improve the interaction between users and AI. Many tools and platforms are being developed today, but they mostly focus on improving prompt speed and accuracy instead of focusing on the user experience.</p>\n<p><strong>11:08</strong> The concept of \"RACE\" (Role, Action, Context, Expectation) is quite common in prompting AI. Users need to prompt in this structure for AI to generate the most accurate output. However, not every case applies to \"RACE.\" Many companies have developed new methods to improve AI UX, helping make the interaction between users and AI smoother.</p>\n<p><strong>12:04</strong> The first method is \"Context Through Rephrasing.\" This method helps AI query the context of the previous question to answer the next question coherently, without needing a perfectly structured prompt from the start. For example, if the first question is \"Who is the wife of Superman?\" and then you ask, \"When did they get married?\" AI will understand the context and connect the dots. But if there is no relevant context, such as asking, \"What day did the Titanic sink?\" AI won’t be able to provide the right answer.</p>\n<p><strong>12:50</strong> Next is \"Implicit Referencing,\" for example, when asking about the number of floors in a building, AI might assume it's a famous building like the \"Willis Tower in Chicago.\" If you ask, \"What day?\" without proper context, AI cannot give an accurate answer. Questions must be tightly connected for AI to answer better, and this also applies to \"Context Through Rephrasing.\"</p>\n<p><strong>14:19</strong> A similar concept is \"Continue Conversation,\" like in Google Assistant. Questions are naturally linked, and each new question relates to the previous ones to create a continuous conversation.</p>\n<p><strong>15:03</strong> The next method is \"Racing and AI Scoring.\" Google Assistant also applies this method. It provides multiple options based on different contexts, helping users get better results. AI can also learn from user choices to improve interaction. For example, when AI is unclear about the context, it will give users options to choose from.</p>\n<p><strong>16:03</strong> Lastly, there is \"System Prompting.\" This theory directs AI to operate based on the context and user-defined goals. It helps AI generate accurate output without following a fixed prompt standard. For example, when asking, \"Plan for releasing a software product\". ChatGPT may provide general concepts, while GPT mini will ask more detailed questions to help users continue prompting for more precise results.</p>\n<p><strong>17:45</strong> Today’s discussion focuses on designing AI tools to improve user experience, not just in terms of speed or accuracy but also in terms of user interaction and overall experience.</p>\n<p><strong>18:50</strong> To summarize this for everyone, especially designers, Nam's topic has two main aspects. First, it explains the structure of \"RACE\" and how to apply it. Second, it presents a framework for designing AI tools, focusing on how to prompt effectively to improve the interaction between AI and users. The RACE structure includes Role, Action, Context, and Expectation, and it helps enhance AI UX.</p>\n<p><strong>19:20</strong> To explain briefly, R stands for Role, and there are different types of R’s that Nam mentioned earlier. For designers to understand the R structure, it's important to look at how to build an app focused on prompting and how this structure ties in. It involves introducing the R technique, a common technique Nam mentioned earlier, called RACE. When writing a RACE, you need to clearly state the Role, Action, Context, and Expectation.</p>\n<p><strong>20:03</strong> RACE is described very clearly: what is Role, what is Action, everything is explained, including what Expectation is and what Task is. In summary, the most basic thing for designers is to understand the structure of a RACE prompt. It follows a specific structure, which produces standard results. The input follows that structure, and the output will provide corresponding results.</p>\n<p><strong>20:47</strong> The second and final part of this presentation will discuss what to pay attention to when designing once you understand the structure of a prompt and how to prompt accurately. This part is open-ended because this is like a 101 guide for designers to look at and understand the basics.</p>\n<p><strong>21:30</strong> Nam has talked quite a bit about the letter R, so some people might misunderstand that this topic is just explaining that concept in detail. But in fact, this presentation is introducing prompting to UX designers. Ok, any questions? This topic is quite basic; our team has used it a lot, and we’ve demoed it many times. There’s one point to note: this topic is special because it introduces system prompting, which other guides don’t cover.</p>\n<p><strong>22:31</strong> This presentation introduces system prompting, which is usually not mentioned in other guides. Guides for end-users (end users) rarely mention this. This topic covers system prompting because it’s written from a designer’s perspective – someone who is part of the team building it. System prompting differs from regular prompting because it controls how AI operates based on the system's specific goals.</p>\n<p><strong>23:06</strong> The structure of system prompting differs from the usual R's that people often see when reading research. Typically, you see discussions about 200 different types of R’s, but there is no perspective from someone building the app. This topic is for designers, not for end-users, but for those in-between to connect the different parts.</p>\n<p><strong>23:48</strong> This is different from articles for engineers because it not only introduces the tools to build prompts but also discusses how to combine different R types. This is an intermediate-level topic, suitable for designers who play the intermediary role, not directly building but also not the end-users. It helps bridge these two parts together.</p>\n<p><strong>24:33</strong> Ok, thanks, Nam. Next week, we will scope this topic again to make the content easier to understand for everyone. Going into detail might be a bit difficult for everyone to grasp. Thank you, Nam. Now, on to the next speaker. Let’s see if we can view the screen. Ah, it’s back.</p>\n<p><strong>25:41</strong> My topic today is a small problem in programming techniques, which is how to compute the union of two finite automata, also known as finite state machines. I will demo it using Go source code. Today’s topic will have a few key points. First, I’ll explain the applications of automata for everyone to get an idea, then we’ll go into the details.</p>\n<p><strong>26:41</strong> The most common application of finite state machines is that when you have a button and an input, you want to check whether the input matches or fails. It’s as simple as that. The most common example is using regex to check whether a piece of text is an email, a phone number, or a street number. We have a button like that, and we feed in a piece of text to check if it matches the condition.</p>\n<p>Aside from regex, another common case is in event-driven systems, where we have event buttons. You define a button in the form of a state machine, and each event is a state. The event will go through the event button and get filtered to see if it matches that event. If it matches, it moves on to the next state for further processing; otherwise, it fails and doesn’t go through.</p>\n<p><strong>27:27</strong> Here’s an example: Suppose we have an event bus, and all the events pass through this event bus and get filtered through the rules. If an event satisfies the rule, it proceeds for further processing. This is most commonly seen in modern cloud systems, where they use a lot of these systems to manage events and filter them through rules like this. You can see this in large systems like Amazon, where their events pass through a series of rules.</p>\n<p><strong>28:05</strong> For example, suppose we have a button, and all items with a field \"image\" that contains an object with a width of 800 will pass through. And we can also add a few more rules for different fields that we add to that button. This is an example of how finite state machines and event buttons work. When an event enters the system, it passes through rules, and if the conditions are met, it will pass through to the next processing steps.</p>\n<p><strong>28:56</strong> This is a specific example of Amazon’s event system, where their events pass through a series of rules to be filtered and processed. Most cloud systems today use similar button patterns to manage and process events in an organized and efficient way.</p>\n<p><strong>29:37</strong> In practice, let's go back a bit to finite automata (f automata) in mathematical terms, what it is. In essence, it's simply a machine with a set of states. To move from one state to the next, it needs to go through a transition. For example, to go from the start state to the end state, there will always need to be a start point called the start state and an endpoint called the end state. That’s why it’s called a finite state machine because it always has a start and an end.</p>\n<p><strong>30:21</strong> In between, there will be a set of transitions and states to move from the start point to the end point. An input symbol is what you feed into a state to move it to another state, and in practice, the input symbol is often a character. We’ll talk more about this in detail later. The accepting state is the state where if the input is accepted, it moves to another state through a transition. If it’s not accepted, it doesn’t go anywhere, as if the transition doesn’t lead to any state.</p>\n<p><strong>31:04</strong> There are two types of finite automata, deterministic finite automata (DFA) and nondeterministic finite automata (NFA). The only difference is that with DFA, each state has a single input symbol leading to a transition to another state. With NFA, there can be multiple transitions for the same state, and there may even be no transitions at all. This difference is just about how the path from the start to the end is represented, but both finite state machines can be expressed as either DFA or NFA. It’s just a matter of representation.</p>\n<p><strong>31:51</strong> Regarding the union of two finite automata, it’s the combination of all the states and transitions of the two finite automata. Its feature is that if event A passes through finite automaton FA1 and event B passes through finite automaton FA2, the union of these two must ensure that both event A and event B pass through.</p>\n<p><strong>32:45</strong> Why do we need to compute the union of two finite automata? In practice, for example, when using an event button, we don’t use just one button, we use multiple buttons combined. For example, in the diagram, we can define many buttons, and in our event, we may have multiple pieces of information that match these buttons. When we want to combine these buttons, we need to compute the union of all of them.</p>\n<p><strong>33:24</strong> But we don’t compute them all at once; we compute them one at a time, for example, first with pairs A and B, then take the union of A and B and compute it with pair C. We just need to compute two buttons at a time, this is the most basic level of calculating the union of all these buttons.</p>\n<p><strong>34:07</strong> To compute the union of two finite automata, theoretically, we would have to calculate all the states and transitions of both automata. For example, if we have two buttons, A and B, and each button has many states, such as from A1 to Ax and from B1 to Bx. Theoretically, we would have to calculate all combinations of these two buttons, like A1-B1, A2-B2, A1-B2, A2-B1, there are many combinations.</p>\n<p>34:07 In practice, we only care about whether, when feeding an event into the button, we want to know if it matches or not. We only care if, after feeding the event into the button, it can reach the final state or not. Calculating all the states in the union would be wasteful and unnecessary. Therefore, the practical approach is to have two finite automata with states from A1 to Ax and from B1 to Bx. When calculating their union, we check if the state leads to any transition in A or B. If not, we skip it.</p>\n<p><strong>35:40</strong> For example, if the state only leads to A1 and there’s no transition leading to B, then we only calculate the branch for A and skip B. Similarly, we do the same for B. The last case is if A1 moves to Ax and B1 also moves to Bx, then we create a new state, Ax-Bx. At this point, we recursively start again and continue calculating from this first step. For example, we have A1-B1, and then we have A2-B2, so we repeat these four steps to continue calculating.</p>\n<p><strong>36:15</strong> This way, the number of states we can skip and not calculate or store is significantly reduced compared to the theoretical method mentioned earlier.</p>\n<p>Regarding input symbols, like in the event button or regex examples, in practice, the buttons and inputs we feed into the program are always in the form of characters. Characters here are often those.</p>\n<p><strong>37:04</strong> Characters in UTF-8, which are simple characters like from a to z or from 0 to 9. They fit into UTF-8, which includes 244 characters. Although UTF-8 uses 8 bits (2^8 - 1 = 256), the bits from 245 to 255 are left over, so we don’t use them, just the first 244 bits. Now, here’s the implementation detail in the code. This is the basic workflow we’ll follow. Not sure if it can be zoomed in? Try zooming in on the diagram from earlier, the text isn't visible. Wait a moment, let’s check again.</p>\n<p><strong>38:21</strong> Alright, what is FA? Finite automata? Yes, automata. This function will merge two automata together. First, it creates a key to mark the states that have already been processed so that we don’t have to revisit them. Then, it checks this key, and if it’s not a duplicate, it starts working. It creates an empty combined state that includes all the transitions of the two finite automata. Then it continues merging each finite automaton, one by one. Scroll up, I couldn’t read that part in time.</p>\n<p><strong>39:33</strong> During implementation, there will be some points where we need to modify the data structure to store those states. Which example is your topic based on? Which sample is this diagram running? Let me show the code; it’ll be easier to see. You have to look at the problem to know which code we're dealing with. After this example, we’ll have more questions. But this topic only needs Phúc and Tuấn to understand, does everyone understand the code clearly?</p>\n<p><strong>40:13</strong> The earlier example about the event button, here we define a button, for example. The button I defined is in the form of T, and here’s the event. When we run this code, it’s just part of the logic; there are more parts of the code. But when running that, the expected result is that it will check if this event matches this button. It will return whether the event matches the button or not.</p>\n<p><strong>41:13</strong> That’s right, that’s the problem this code is solving. This is simple code; it will run and return results, just checking if it matches this button or not. For example, here, this button has a transition with \"user_register,\" for instance. If I change something else, it won’t match. But if the event meets the condition, it will match, something like that.</p>\n<p><strong>42:09</strong> I’ll go straight to the main logic. It’s the function to merge two finite state machines together. Each of these finite automata represents a button. Imagine we have multiple buttons. Here we only have one button, but imagine I split this into two buttons. My function is responsible for merging those two buttons into one total button.</p>\n<p><strong>43:31</strong> As mentioned earlier, to avoid too much calculation, I’ll first explain the parameters passed into the function. The two FAState are two structures representing the two buttons we had earlier. Each structure includes a small table to represent a series of input symbols and their corresponding transitions. Epsilon is the state that returns to its own position, we’ll skip that for now. Here, we only care about these two states. The smallest unit we want to use as input is the file because a character is represented in UTF-8 and includes 244 bits. Now, we’ll loop through each bit in these characters to compare.</p>\n<p><strong>44:20</strong> For example, in this case, when I input an event, after computing these two buttons, it starts from each character. For example, it starts with a bracket and checks if there’s any transition to \"user.\" If there isn’t, it skips the ID part because it doesn’t match. This part goes into the details of comparing each character.</p>\n<p><strong>45:02</strong> Skip this part. Just look at the benefits and the idea behind the implementation; there’s no need to compare in detail here. The benefit of this method is simple: it helps the algorithm avoid recalculating too many times. The algorithm is quite simple, it’s just comparing, as we analyzed earlier. If a character doesn’t lead to a transition, we skip it. Or if it only leads to one branch, and that branch doesn’t have any transitions, we skip it as well.</p>\n<p><strong>46:34</strong> For example, if state A1 moves to state B, but state B doesn’t exist, we skip that branch. Conversely, if that state already exists in the map, we skip it. Only when all conditions are met do we start calculating and loop through each state in the finite automata. After looping through each step with the corresponding state in B, we get the final state and assign it, then return the result.</p>\n<p><strong>47:17</strong> Does everyone understand? Ask Minh. Minh, check this out. I told Minh to send the link. Did you all understand this? The important thing is to review the first diagram because I’m afraid people don’t understand it. This diagram was a long time ago, more than a month ago, right? Yes, this diagram, does everyone understand?</p>\n<p><strong>49:11</strong> Systems like Amazon’s event bus need to merge sometimes up to millions of buttons, so there will be some details in the implementation to speed up these tasks. Switch to another diagram, the next one, the one that branches into two; use that to explain better. The branching diagram, which one should we use? Let’s stick with this diagram, do the others understand?</p>\n<p><strong>50:11</strong> Let’s explain it clearly so that everyone gets it. Hoàng, do you understand? Do you get what this is doing? Ah, Phúc asked if it uses a bit operator. Not yet, it hasn’t reached that level, it’s just detailed comparisons, unrelated to that part. Tuấn, Minh, where’s Vincent? Does everyone understand this topic? No? This topic is nested in three layers from what Minh discussed earlier. Let’s clear a few things to make it less confusing for everyone.</p>\n<p><strong>51:03</strong> First, finite automata, or state machines, are like state transition diagrams that you often draw. Remember? They have states and nodes representing those states. Second, there are conditions (input symbols) that allow you to move from one state to another, called transitions. Read it carefully to understand and remember it better. It’s like a state transition diagram; that’s the first point.</p>\n<p><strong>51:47</strong> The second point is the two types of finite automata that Minh just showed. Why show these two types? Because some states are simple, they only move in one direction and can’t reverse. For example, lunchtime. When you walk out to Hà Đô to eat pho, you can walk to the pho restaurant, eat, and return. That completes a finite state; it doesn’t reverse, that’s a finite automaton.</p>\n<p><strong>53:10</strong> Another example is a new finite automaton where you go to the supermarket to buy lunch, pay, and return. It’s still a finite automaton, but it has different states than the previous one.</p>\n<p><strong>53:57</strong> The issue is how to calculate the union of these two finite automata. Let’s say there are two states: one where you eat pho, and the other where you go to the supermarket to buy lunch. We need to build a union of these two states, like how Minh talked about merging two state machines. Here, we have two choices: one is to eat pho, and the other is to go to the supermarket. The idea is to compute all possible combinations of these two state systems.</p>\n<p><strong>54:30</strong> We calculate their union by simply combining them. In the earlier example, how many options do we have? One person goes to eat pho, and the other goes to the supermarket, right? This example is also calculating the union, but it’s a different kind of union. The problem is that there are two finite automata (FA), and we need to compute their union. Then we check how to combine them. There are two parts: one part follows the original flow, eating pho, and the other part follows the supermarket flow. Another case is when you combine two sets of conditions, which will generate a new set. At that point, we have to continue calculating and computing more.</p>\n<p><strong>55:17</strong> The basic idea of creating a union of multiple finite automata is like that. It’s similar to what Minh showed earlier, Minh showed the source code. Now, let’s go back to that function. Alright, here, Minh’s function has a method to merge all the states. This means we simulate having two state systems only, right? From two different finite automata. Then we merge them into a unified system, which gives us a big table. From that big table, we continue to calculate based on each condition.</p>\n<p><strong>56:04</strong> Now, we’ve built the big table, a large array that contains the complete list of conditions. Now, we’ll start calculating. When a new condition is input, it begins by checking all the conditions of the first system. If it doesn’t match, it checks all the conditions of the second system. If it still doesn’t match, it checks the conditions of the union of the two systems. The basic calculation logic is just like that.</p>\n<p><strong>57:02</strong> The difficulty of this problem, if you feel a bit confused, lies in the process of modeling from mathematics into programming. Do you get it, Tư? Lucky, did you grasp it? Ok, follow the problem. Show the function and the diagram from earlier. This diagram explains why regular expressions mention this. When you check in square brackets in regular expressions, you need to go through all the conditions inside. Because there are so many options, each option is modeled mathematically to make it easier to handle. Each condition is a finite automaton, and we compute the union of these conditions.</p>\n<p><strong>58:38</strong> Modeling mathematical logic into programming is the process of calculating with different systems. We need to calculate the union condition of systems 1, 2, 3, 4... If none of the conditions are met, we have to calculate the intersection of each pair of conditions. This problem is like that. If you want to learn more, this is an important topic because it helps you understand how we operate in large logic systems.</p>\n<p><strong>59:21</strong> I think I gave this to Minh earlier. This is important because it relates to creating logic addition functions. A common comparison is login authentication, like in the login process, which relates to this problem. During the login process, there are many conditions, for example, passing 2FA, email, SMS, or password. Each of these can be modeled into its own finite automaton, and when we compute them, we combine them all.</p>\n<p><strong>0 1:00:00</strong> For example, there might be a requirement for the user to have both face scan and QR code to log in. That’s a combined condition (intersection), not just a simple if statement. In mathematical modeling, we can handle this easily because it has recursive properties to compute complex logic combinations. The most important thing is how to calculate this combination without recalculating many times. The output will either be success or failure. But for junior developers, when adding a new case without the modeling mindset, they’ll end up creating many messy if statements, making it hard to maintain the code.</p>\n<p><strong>01:01:29</strong> When adding a new feature without a modeling mindset, the code becomes messy and inefficient. They’ll have to rewrite it many times, causing many bugs and wasting time fixing and testing. That’s why this problem is important, as it impacts system design, especially in systems like login authentication, where combining multiple conditions is common.</p>\n<p><strong>01:02:23</strong> Any more questions? No? Minh, do you understand it all? Ok, looks like we’re out of time. Thành, are there any more topics? There are two more, but let’s try to wrap them up quickly. Let me check. Can everyone see the screen? Ok, this week, I only have two topics, there’s another one, but it’s too long, we’ll do it next week. That one requires more detail in terms of usage.</p>\n<p><strong>01:03:36</strong> The next topic is about Go and how to embed files. What is Go embed? It allows us to embed a file directly into the binary. This helps reduce the need to handle external files. The way it works is that when we embed a file into the binary, the handling process becomes simpler. But there’s a limitation: if the file is too large, the binary will expand. So, be careful when using this.</p>\n<p><strong>01:04:15</strong> The usage is like this: we just import it and use it as usual. For example, we have a message file, we embed that file into the binary, and then we can access that file directly. For multiple files, we can add additional characters like this. Then, we use the embedded variable to read or access it like a normal file. Or we can even embed an entire directory.</p>\n<p><strong>01:04:57</strong> Usually, we want to embed static files like images, HTML, or something like that. As for the limitation I mentioned earlier, the second topic is about reflecting a package. This topic is not new. It’s not really new if you’ve used Go and read the article by Dr. R. I’ll go over it quickly. The context is that the author encountered a problem with reflection while using a tool or codebase and wrote this article. In general, reflection has three key points to note.</p>\n<p><strong>01:05:49</strong> The three important points are: from interface value to reflection object, and vice versa. The final point is when you want to modify the values, they need to be settable, meaning they need to be exported, or written with a capitalized value. What is an interface value? What is a reflection object? The interface value is, in every function we use in the reflect package, it’s always understood as a wide interface{}, so it’s an interface value. And this value is a reflection object, and vice versa.</p>\n<p><strong>01:06:36</strong> As for the direction: ValueOf returns a reflection object. In the opposite direction, from here, we can use the method .Interface() to return the original value. In Go, this is now default. If you want to update something, you need to find something settable. Reflect has this method for you to use and update.</p>\n<p><strong>01:07:12</strong> Another point mentioned in that article is to avoid using reflect unless absolutely necessary. If you use functions like FieldByName, if the input is not well-controlled, it can lead to panic or crashes immediately. So, only use it when absolutely necessary, in cases where there’s no other option.</p>\n<p><strong>01:07:53</strong> There’s another article that I mentioned that’s quite long, about map. It compares using regular maps with the need to support concurrency, where you’ll need a locking strategy. You can use mutex or something else, or some other lock. The sync package provides a sync.Map. The article compares these two approaches. There’s no better option; it depends on the use case.</p>\n<p><strong>01:08:35</strong> Now, let’s move on to the next part. Phát, simple stuff. Minh Trần is asking about the logic of three automata and then adding two more automata. But Minh Trần is misunderstanding the order. The order will follow different logic. Why did Huy mention automata systems in Vietnam? Because previously, they approached it from the perspective of industrial machines, automated systems. They couldn’t build them to interact with each other or run automatically because the cost of trial and error was too high.</p>\n<p><strong>01:09:31</strong> So, to ensure effectiveness, they had to calculate the logic first to see if it covered all cases. For example, when there are three systems, and you add two more, making five systems. First, you have to see if the logic design overlaps. Then, we list out the logic trees and calculate. That’s the first step, then we proceed with implementation.</p>\n<p><strong>01:10:09</strong> As for implementation, it depends on how you want to do it: you can union the systems or create an addition function. The important thing is that before you do anything, you must ensure the logic covers all the cases. Logic here is not just about going from A to B; it’s a general logic system, including calculations on logic trees.</p>\n<p><strong>01:10:50</strong> Union in this article talks about mathematical logic a bit. When it comes to implementation, if you’ve done it before, you’ll find it easy to create an addition function. Just understand that in union logic, we combine conditions and calculate. After combining those conditions, the question is how the addition function performs. Usually, people try to explicitly go step by step.</p>\n<p><strong>01:11:53</strong> Ok, seems good now. Thành, is there anything else? Ok, got it, DevOps team will handle the rest. Try it again and see if there’s any issue. Everyone, please do your tests early. We’ve got a financial and AI deal this time, so pay attention.</p>\n<p><strong>01:13:04</strong> Now, I’ll move on. In September, there weren’t many notable updates. I’ll go over it quickly. First, about React, with keywords like server actions, server functions, and React compiler. There’s an article on freeCodeCamp about React 19’s architecture, detailing how to optimize performance. If you have time, you should read that article.</p>\n<p><strong>01:15:12</strong> Regarding Next.js, nothing much new. There was some noise at the beginning of the month when OpenAI switched from Next.js to Remix. In short, OpenAI wanted their page to be lighter because Next.js was a bit heavy for a chatbox SPA (Single Page Application). So, they decided to switch back to Remix. This relates to a trend I’m noticing in the engineer community: frameworks like Next.js are becoming less favored.</p>\n<p><strong>01:16:28</strong> The goal of OpenNext is to make it so that people can host Next.js on any environment, no longer being restricted by Vercel’s exclusivity. So, this project is here to solve that problem. Moving on, I see two interesting things being featured. There’s someone implementing a simple real-time system using TypeScript and React. It’s pretty simple, but reading it makes you smile, like JavaScript can do everything.</p>\n<p><strong>01:17:14</strong> Next is a piece about this topic, which is kind of like commentary, but I’m putting it here because it’s still relevant. This article discusses the state of ES5 on the web. ES5 is like what I mentioned before, like CSS3, technologies that have been around for too long. This article surveys how many websites on the internet are still using ES5 or if they’ve moved on to ES6. In short, the conclusion is that 89% of the top 10,000 websites have already shifted to ES6.</p>\n<p><strong>01:17:55</strong> So, the takeaway here is that ES5 is still in use, but when building something new, especially when building a new library, generally, you shouldn’t aim for ES5 anymore because it’s almost outdated; it’s been around for too long. The state of ES5 is still somewhat relevant.</p>\n<p><strong>01:18:44</strong> Regarding trending topics, there’s not much, but there is an amusing one. There’s an open letter asking Oracle to give up the JavaScript trademark. I just found out that JavaScript belongs to Oracle's trademark. When people think of Oracle, they only know Java, and almost no product relates to JavaScript. But the trademark for JavaScript is owned by Oracle. So this open letter is basically developers asking Oracle to release the JavaScript trademark, not hold onto it anymore, because Oracle hasn’t contributed anything to the JavaScript community.</p>\n<p><strong>01:19:22</strong> Many big names have signed the letter, including the creators of Node.js and JavaScript, many well-known people have signed it. I just found out, but it seems interesting.</p>\n<p><strong>01:20:16</strong> Moving on to new frameworks and libraries, but I’ll probably skip this part because there’s nothing special. There’s a commentary from Thành, relating to the sentiment in the React and JavaScript community, especially around Next.js. The article is quite long, but to sum it up, the main point is that frameworks like Next.js are getting heavier.</p>\n<p><strong>01:20:55</strong> They criticize the current trend in the React engineer community: front-end developers are chasing after frameworks and libraries that overuse JavaScript. This benefits the developer experience (DX), but it reduces the user experience (UX) because too much JavaScript is being shipped to the client. In short, writing code is fun, but the final product doesn’t make the user happy. They specifically mention Next.js, saying that the heavy parts need to be pushed back to the server to improve the user experience.</p>\n<p><strong>01:21:28</strong> This sentiment is quite clear; they’re calling for a shift back to more server-side solutions. I feel like the front-end community keeps going in circles: moving from the server to the client, and now the client is too heavy, so they’re calling to move back to the server.</p>\n<p><strong>01:22:19</strong> In general, those are the interesting topics I found in September. Drama is always interesting; it grabs attention. In Go, everything is stable, so there’s no drama, which is why no one talks much. But in JavaScript, there’s always drama, from server-side scripts to JavaScript modules, the drama just keeps coming back around. The community is always like this; without clear standards, people are always arguing.</p>\n<p><strong>01:23:30</strong> Thanks, everyone. Regarding the reminder, please do your tests early so there’s time to handle everything. The team lab still has some work to review, especially the reports after everything is transferred over. Thành, I think we’ll wrap up here and focus on the cases we mentioned earlier.</p>\n<p><strong>01:24:04</strong> Lập, please review. Cát shared an article outside, it’s new, easy to understand, everyone take a look. The current trend seems to be ending the cycle of software that doesn’t require much thought, focusing more on tooling. Now, basic techniques in math and logic are making a return. In the future, the lab team will report more on topics in logic, so everyone gets used to it.</p>\n<p><strong>01:24:50</strong> Tom rebuilt a new library called WebUI after the old one was shut down. Everyone take a look. This one is quite legit. When you ask it about the union of two finite automata, it responds with everything in mathematical formulas, very easy to understand. It explains clearly how to compute the union of two finite automata systems.</p>\n<p><strong>01:26:15</strong> Here, the two systems combine conditions to calculate. It talks about state transitions, I’m testing a few mathematical concepts on it, and it seems quite legit. If possible, I encourage everyone to use this more. Tom has already modified its system. Initially, it might seem a bit uncomfortable because we’ve been used to using normal language to talk about these problems for so long. Now, we have to step back a little, and see that knowledge in math is valuable now. Full logic. Then, how to advance, practical implications, how to implement it, everything is there.</p>\n<p><strong>01:26:57</strong> Given what’s happening with the inquiries and commentary, I’ve been checking, and I’m certain the market is shifting toward finance. Since last year, after the blockchain and crypto wave, our team, Huy Nguyễn’s team, is still moving forward, and that team is still doing well. Some newer techniques in blockchain, like Monas or something, we haven’t looked at yet, but it’s probably similar, no major technical differences.</p>\n<p><strong>01:28:29</strong> In finance, we’re actively working with the financial cycles. That domain is building up this way, and it seems like a bright opportunity. Our team is also almost done with this, now it’s just a matter of how many case studies there are. I think this direction is reasonable. The team’s quality is gradually improving. Like the material I gave to Minh earlier, I can’t remember if I gave it to Minh Lư yet, but if Minh has seen it, he should understand about 6/10. But I believe it’s still much better than many others. Even though there might be fear, he didn’t report back. Minh opened two parts of the finite state machine and explained them very well.</p>\n<p><strong>01:29:12</strong> The team’s direction is to follow this path. If done skillfully, by the end of this month, we could push more content about math and logic. We’ll try to compare old concepts with new ones we already know. Let’s refine and adjust. Ok, it’s not required that everyone follow this path, but based on basic observation, I see the market is shifting in that direction. To keep our value distinct, we have to play a different game. Consider this as a message for everyone to be aware.</p>\n<p><strong>01:29:58</strong> If there’s nothing else, there’s one more article from Thành, but we’ll leave it for later. As for the rest, if anyone doesn’t have access to the thing from earlier, ask Tom. See you next week. Next Wednesday, there won’t be a mid-week meeting, everyone sit and continue along the direction we just discussed. Let’s work on the content so that everyone can understand.</p>\n<p><strong>01:30:57</strong> Ok, I think that’s it. Bye-bye, everyone, see you next Friday. Next Wednesday, there won’t be a mid-week meeting. Everyone take time to review the content related to what needs to be done for the test. Thanks, everyone. Bye-bye, see you.</p>","frontmatter":{"tags":["office-hours","ogif","discord"],"title":"OGIF Office Hours #27 - Go Weekly, Frontend Report Sep, UX Guide to Prompt with AI, Computing the Union of Two Finite Automata","short_title":"#27 Go weekly, Frontend, AI UX, Finite Automata","date":"2024-10-14T00:00:00.000Z","description":"In OGIF office hour 27, covering presentations on UX Guide to Prompt with AI, computing the union of finite automata, and other topics including Go Weekly and Frontend Report for September.","authors":["innno_"]},"slug":["updates","ogif","27-20241011"],"backlinks":[],"tocItems":[{"id":"topic-highlights","value":"Topic highlights","depth":3,"children":[]}],"metadata":{"created":"Mon Oct 14 2024 00:00:00 GMT+0000 (Coordinated Universal Time)","updated":null,"author":"innno_","coAuthors":[],"tags":["office-hours","ogif","discord"],"folder":"updates/ogif","wordCount":14997,"readingTime":"75m","characterCount":82101,"blocksCount":200,"tokenId":"","permaStorageId":"","title":"OGIF Office Hours #27 - Go Weekly, Frontend Report Sep, UX Guide to Prompt with AI, Computing the Union of Two Finite Automata","authorRole":"","image":"","firstImage":null},"isListPage":false},"__N_SSG":true}