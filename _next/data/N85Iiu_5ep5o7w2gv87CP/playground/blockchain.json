{"pageProps":{"directoryTree":{"/pinned":{"label":"Pinned Notes","children":{"/playbook/operations/ogif":{"label":"OGIF - Oh God It's Friday","children":{}}}},"/":{"label":"Home","children":{"/consulting":{"label":"Consulting","children":{"/consulting/case-study":{"label":"Case Study","children":{"/consulting/case-study/screenz-ai":{"label":"Screenz.ai","children":{}},"/consulting/case-study/kafi":{"label":"Kafi","children":{}},"/consulting/case-study/droppii":{"label":"Droppii","children":{}},"/consulting/case-study/konvoy":{"label":"Konvoy","children":{}},"/consulting/case-study/cimb":{"label":"CIMB","children":{}},"/consulting/case-study/swift":{"label":"Swift","children":{}},"/consulting/case-study/startupvn":{"label":"StartupVN","children":{}},"/consulting/case-study/open-fabric":{"label":"Open Fabric","children":{}},"/consulting/case-study/icrosschain":{"label":"iCrosschain","children":{}},"/consulting/case-study/hedge-foundation":{"label":"Hedge Foundation","children":{}},"/consulting/case-study/searchio":{"label":"Search.io","children":{}},"/consulting/case-study/tokenomy":{"label":"Tokenomy","children":{}},"/consulting/case-study/basehq":{"label":"BaseHQ","children":{}},"/consulting/case-study/momos":{"label":"Momos","children":{}},"/consulting/case-study/attrace":{"label":"Attrace","children":{}},"/consulting/case-study/setel":{"label":"Setel","children":{}},"/consulting/case-study/joinpara":{"label":"JoinPara","children":{}},"/consulting/case-study/relay":{"label":"Relay","children":{}},"/consulting/case-study/naru":{"label":"Naru","children":{}},"/consulting/case-study/mudah":{"label":"Mudah","children":{}},"/consulting/case-study/reapit":{"label":"Reapit","children":{}},"/consulting/case-study/aharooms":{"label":"Aharooms","children":{}},"/consulting/case-study/begroup":{"label":"beGroup","children":{}},"/consulting/case-study/airwatt":{"label":"AirWatt","children":{}},"/consulting/case-study/voconic":{"label":"Voconic","children":{}},"/consulting/case-study/sol":{"label":"Sol","children":{}},"/consulting/case-study/dental-marketplace":{"label":"Dental Marketplace","children":{}},"/consulting/case-study/bhd":{"label":"BHD Cinema","children":{}}}},"/consulting/market-report":{"label":"Market Report","children":{"/consulting/market-report/event-takeaways-2nd":{"label":"2nd Talks and Takeaways","children":{}},"/consulting/market-report/event-takeaways-1st":{"label":"1st Talks and Takeaways","children":{}},"/consulting/market-report/2025-28th-feb":{"label":"#9: Bybit Loses $1.5B in Hack, Claude 3.7 Sonnet Drops, and OpenArt Designs Characters","children":{}},"/consulting/market-report/2025-21th-feb":{"label":"#8: R1 1776 Goes Open-Source, Cardex Gets Hacked, and Grok-3 Debuts","children":{}},"/consulting/market-report/2025-14th-feb":{"label":"#7: 10x AI Cost Reduction, Lyft’s 2026 Robotaxi Milestone, and Solana ETF Buzz","children":{}},"/consulting/market-report/2025-7th-feb":{"label":"#6 Trending Products, DeepSeek Wave, and Ethereum Predictions","children":{}},"/consulting/market-report/2025-17th-jan":{"label":"#5 VC Trends, Blockchain Breakthroughs, and AI Innovations","children":{}},"/consulting/market-report/2025-10th-jan":{"label":"#4 AI Supercomputers, Mini AI PCs, SEA VC","children":{}},"/consulting/market-report/2025-3rd-jan":{"label":"#3 AI at CES, Wall Street Boom, Blockchain Trends","children":{}},"/consulting/market-report/2024-27th-dec":{"label":"#2 AI Talent Wars, OpenAI’s New Models, Hyperliquid","children":{}},"/consulting/market-report/2024-13th-dec":{"label":"#1 Gemini 2.0, OpenAI’s Sora,  a16z’s Predictions","children":{}}}},"/consulting/wala":{"label":"Wala","children":{"/consulting/wala/43-factory":{"label":"43 Factory","children":{}},"/consulting/wala/dzs-media":{"label":"DZS Media","children":{}},"/consulting/wala/sp-group":{"label":"SP Group","children":{}}}},"/consulting/partners-network":{"label":"Partners Network","children":{}},"/consulting/readme":{"label":"Consulting Team","children":{}}}},"/handbook":{"label":"Handbook","children":{"/handbook/navigate-changes":{"label":"Navigate changes","children":{}},"/handbook/community":{"label":"Community","children":{"/handbook/community/icy-worth":{"label":"How much is your ICY worth","children":{}},"/handbook/community/icy-swap":{"label":"How to swap ICY to BTC","children":{}},"/handbook/community/icy":{"label":"ICY","children":{}},"/handbook/community/discord":{"label":"Discord","children":{}},"/handbook/community/earn":{"label":"Earn","children":{}},"/handbook/community/radar":{"label":"Radar","children":{}},"/handbook/community/sharing":{"label":"Sharing knowledge","children":{}},"/handbook/community/showcase":{"label":"Showcase","children":{}},"/handbook/community/memo":{"label":"Memo","children":{}}}},"/handbook/guides":{"label":"Guides","children":{"/handbook/guides/check-in-at-office":{"label":"Office check-in process for earning ICY","children":{}},"/handbook/guides/leave-request":{"label":"Leave request","children":{}},"/handbook/guides/nda":{"label":"NDA & Agreements","children":{}},"/handbook/guides/configure-the-company-email":{"label":"Configure your company email","children":{}},"/handbook/guides/one-on-one-meeting":{"label":"1-on-1 meetings","children":{}},"/handbook/guides/continuing-education-allowance":{"label":"Continuing education allowance","children":{}},"/handbook/guides/reimbursement":{"label":"Reimbursement","children":{}},"/handbook/guides/email-communication-and-use":{"label":"Email use","children":{}},"/handbook/guides/password-sharing":{"label":"Password Sharing","children":{}},"/handbook/guides/asset-request":{"label":"Request an asset","children":{}},"/handbook/guides/effective-meeting":{"label":"Effective meetings","children":{}},"/handbook/guides/conduct-a-meeting":{"label":"How to conduct a meeting","children":{}}}},"/handbook/making-a-career":{"label":"Making a career","children":{}},"/handbook/as-a-community":{"label":"As a community","children":{}},"/handbook/knowledge-base":{"label":"Knowledge base","children":{}},"/handbook/stock-option-plan":{"label":"Stock option plan","children":{}},"/handbook/readme":{"label":"📔 Handbook","children":{}},"/handbook/compliance":{"label":"Compliance","children":{}},"/handbook/mma":{"label":"MMA","children":{}},"/handbook/hybrid-working":{"label":"Hybrid Working","children":{}},"/handbook/routine":{"label":"Work routine","children":{}},"/handbook/ventures":{"label":"Ventures arm","children":{}},"/handbook/purpose":{"label":"Purpose","children":{}},"/handbook/benefits-and-perks":{"label":"Benefits & perks","children":{}},"/handbook/dwarves-foundation-is-you":{"label":"You are Dwarves Foundation","children":{}},"/handbook/getting-started":{"label":"💎 Getting started","children":{}},"/handbook/how-we-hire":{"label":"How we hire","children":{}},"/handbook/how-we-spend-money":{"label":"How we spend money","children":{}},"/handbook/misc":{"label":"Misc","children":{"/handbook/misc/marketing-assets":{"label":"Marketing assets","children":{}}}},"/handbook/moonlighting":{"label":"Moonlighting","children":{}},"/handbook/places-to-work":{"label":"Places to work","children":{}},"/handbook/security-rules":{"label":"Security rules","children":{}},"/handbook/tools-and-systems":{"label":"Tools and systems","children":{}},"/handbook/what-we-stand-for":{"label":"What we stand for","children":{}},"/handbook/what-we-value":{"label":"What we value","children":{}},"/handbook/where-we-work":{"label":"Where we work","children":{}},"/handbook/who-does-what":{"label":"Who does what","children":{}},"/handbook/faq":{"label":"FAQ","children":{}},"/handbook/how-we-work":{"label":"How we work","children":{}}}},"/playground":{"label":"Playground","children":{"/playground/01_literature":{"label":"01_literature","children":{"/playground/01_literature/evolutionary-database-design":{"label":"Evolutionary Database Design: Managing Change and Scaling with the System","children":{}},"/playground/01_literature/design":{"label":"Design","children":{"/playground/01_literature/design/product-design-commentary-20241122":{"label":"Product Design Commentary #7: Hyper-personalization - How AI improves user experience personalization","children":{}},"/playground/01_literature/design/product-design-commentary-20241115":{"label":"Product Design Commentary #6: AI in Design - Cool ideas and how to make them happen","children":{}},"/playground/01_literature/design/product-design-commentary-20241101":{"label":"Product Design Commentary #5: Figma to SwiftUI (functional code) with Claude AI","children":{}},"/playground/01_literature/design/product-design-commentary-20241018":{"label":"Product Design Commentary #4: Generative AI UX design patterns","children":{}},"/playground/01_literature/design/product-design-commentary-20241011":{"label":"Product Design Commentary #3: The art of prompting in AI-human interaction","children":{}},"/playground/01_literature/design/product-design-commentary-20241004":{"label":"Product Design Commentary #2: Unpacking the sparkles icon and AI onboarding challenges","children":{}},"/playground/01_literature/design/product-design-commentary-20240927":{"label":"Product Design Commentary #1: New technologies changing UX/UI and product design","children":{}}}},"/playground/01_literature/giving-a-talk-checklist":{"label":"Giving a talk","children":{}},"/playground/01_literature/database-design-circular":{"label":"Database design Circular","children":{}},"/playground/01_literature/a-lens-to-modern-data-engineering":{"label":"A Lens to Modern Data Engineering","children":{}},"/playground/01_literature/security":{"label":"Security","children":{"/playground/01_literature/security/a-holistic-guide-to-security":{"label":"A Holistic Guide to Security","children":{}},"/playground/01_literature/security/how-i-came-up-with-our-security-standard":{"label":"How I came up with our Security Standard","children":{}}}},"/playground/01_literature/record-reward-sharing-culture":{"label":"Record and reward sharing at Dwarves","children":{}},"/playground/01_literature/designing-for-forgiveness":{"label":"Designing for Forgiveness: Creating Error-Tolerant Interfaces","children":{}},"/playground/01_literature/design-file-sharing-system-part-2-permission-and-password":{"label":"Design file-sharing system - Part 2: Permission & Password","children":{}},"/playground/01_literature/designing-a-model-with-dynamic-properties":{"label":"Designing a model with dynamic properties","children":{}},"/playground/01_literature/hybrid-search":{"label":"Evaluating search engine in RAG systems","children":{}},"/playground/01_literature/design-file-sharing-system-part-1-directory-structure":{"label":"Design file-sharing system - Part 1: Directory Structure","children":{}},"/playground/01_literature/using-foundry-for-evm-smart-contract-developement":{"label":"Using Foundry for EVM smart contract development","children":{}},"/playground/01_literature/creating-a-fully-local-search-engine-on-memo":{"label":"Building a Local Search Engine for Our Memo Website","children":{}},"/playground/01_literature/observer-pattern":{"label":"Introduce the Observer pattern and its use cases","children":{}},"/playground/01_literature/visitor-design-pattern":{"label":"Visitor design pattern, the concept, problem solution and use cases","children":{}},"/playground/01_literature/strategy-design-pattern":{"label":"Strategy design pattern, the concept, use cases and difference with the state design pattern","children":{}},"/playground/01_literature/vietnam-tech-ecosystem-report":{"label":"Vietnam Tech Ecosystem 2024 Report","children":{}},"/playground/01_literature/how-we-crafted-the-ogif-summarizer-bot-to-streamline-weekly-knowledge-sharing":{"label":"How we crafted the OGIF summarizer bot to streamline weekly knowledge-sharing","children":{}},"/playground/01_literature/feedback-mechanism":{"label":"Design feedback mechanism for LLM applications","children":{}},"/playground/01_literature/local-first-software":{"label":"Local-first Software","children":{}},"/playground/01_literature/error-handling-in-rust":{"label":"Error handling on Rust","children":{}},"/playground/01_literature/engineering":{"label":"Engineering","children":{"/playground/01_literature/engineering/backend":{"label":"Backend","children":{"/playground/01_literature/engineering/backend/bloom-filter":{"label":"Bloom Filter","children":{}},"/playground/01_literature/engineering/backend/introduction-to-crdt":{"label":"Introduction to CRDT","children":{}},"/playground/01_literature/engineering/backend/sql-sargable-queries-and-their-impact-on-database-performance":{"label":"SQL Saragable Queries and Their Impact on Database Performance","children":{}},"/playground/01_literature/engineering/backend/the-removal-of-apache-kafkas-dependency-on-zookeeper":{"label":"The removal of Apache Kafka's dependency on Zookeeper","children":{}},"/playground/01_literature/engineering/backend/sql-and-how-it-relates-to-disk-reads-and-writes":{"label":"SQL and how it relates to Disk Reads and Writes","children":{}}}},"/playground/01_literature/engineering/data":{"label":"Data","children":{"/playground/01_literature/engineering/data/data-pipeline-design-framework":{"label":"Data Pipeline Design Framework","children":{}},"/playground/01_literature/engineering/data/quick-learning-vector-database":{"label":"Quick Learning Vector Database","children":{}},"/playground/01_literature/engineering/data/mapreduce":{"label":"MapReduce","children":{}}}},"/playground/01_literature/engineering/google-data-fusion":{"label":"Google Data Fusion","children":{}},"/playground/01_literature/engineering/google-dataproc":{"label":"Google Dataproc","children":{}},"/playground/01_literature/engineering/introducing-htmx-navigating-the-advantages-and-concerns":{"label":"Introducing HTMX - Navigating the Advantages and Concerns","children":{}},"/playground/01_literature/engineering/typesafe-client-server":{"label":"Typesafe Client Server","children":{}},"/playground/01_literature/engineering/url-redirect-vs-rewrite":{"label":"URL Redirect vs. Rewrite; What’s the difference?","children":{}}}},"/playground/01_literature/template-method-design-pattern":{"label":"A Tour of Template method pattern with Golang","children":{}},"/playground/01_literature/command-pattern":{"label":"Command Pattern","children":{}},"/playground/01_literature/radix-sort":{"label":"Radix Sort","children":{}},"/playground/01_literature/state-pattern":{"label":"State Pattern","children":{}},"/playground/01_literature/dynamic-liquidity-market-a-new-form-of-concentrated-liquidity-amm-on-solana":{"label":"Dynamic Liquidity Market Maker - a new form of concentrated liquidity AMM on Solana","children":{}},"/playground/01_literature/memo-knowledge-base-meeting":{"label":"Memo Knowledge Base Meeting","children":{}},"/playground/01_literature/peep-nft":{"label":"Claim your Peeps NFT","children":{}},"/playground/01_literature/recording-flow":{"label":"How We Set Up a Recording Workflow for Dwarves Office Hours","children":{}},"/playground/01_literature/memo-publication-workflow":{"label":"Memo Publication Workflow","children":{}},"/playground/01_literature/history-of-structured-output-for-llms":{"label":"History of Structured Outputs for LLMs","children":{}},"/playground/01_literature/builder-design-pattern":{"label":"Introduce the Builder pattern and its use cases","children":{}},"/playground/01_literature/how-to-make-a-moc":{"label":"How to make a MOC","children":{}},"/playground/01_literature/prototype-design-pattern":{"label":"Going Through use cases of the prototype design pattern and it place among the creational patterns","children":{}},"/playground/01_literature/singleton-design-pattern":{"label":"A tour of Singleton design pattern with Golang","children":{}},"/playground/01_literature/echelon-x-singapore-2024-where-innovations-meet-inspiration":{"label":"Echelon X Singapore 2024: Where Innovations Meet Inspiration","children":{}},"/playground/01_literature/c4-modelling":{"label":"Breaking Down Complexity: The Role of Abstractions and UML in C4 Modelling","children":{}},"/playground/01_literature/dollar-cost-averaging":{"label":"Dollar Cost Averaging (DCA)","children":{}},"/playground/01_literature/how-i-create-content-for-multiple-platforms-at-dwarves":{"label":"How I Create Content for Multiple Platforms at Dwarves","children":{}},"/playground/01_literature/understanding-saving-investing-and-speculating-key-differences-and-strategies":{"label":"Understanding Saving, Investing, and Speculating: Key Differences and Strategies","children":{}},"/playground/01_literature/writing-content-for-multimedia-guidelines":{"label":"Writing Content for Multimedia Guidelines","children":{}},"/playground/01_literature/how-to-earn-reward-from-staking-dfg":{"label":"How to earn reward from staking DFG","children":{}},"/playground/01_literature/how-to-transfer-dfg-from-eth-to-base-for-staking":{"label":"How to bridge $DFG from Ethereum Mainnet to Base Network for staking","children":{}},"/playground/01_literature/design-less-present-more-with-deckset":{"label":"Design less, present more with Deckset","children":{}},"/playground/01_literature/level-up-your-markdown-memos":{"label":"Level Up Your Markdown Memos: Avoiding Common Pitfalls","children":{}},"/playground/01_literature/tech-canvas":{"label":"Tech Canvas","children":{}},"/playground/01_literature/how-to-recap-a-publication":{"label":"Recapping A publication","children":{}},"/playground/01_literature/lifecycle-of-a-publication":{"label":"Life cycle of a publication","children":{}},"/playground/01_literature/how-to-set-up-environment-for-editing-memo":{"label":"How to set up environment to edit memo","children":{}},"/playground/01_literature/_how-to-setup-crypto-wallet-to-withdraw-icy":{"label":"How to set up crypto wallet to withdraw ICY","children":{}},"/playground/01_literature/_how-to-withdraw-icy":{"label":"How to withdraw ICY","children":{}},"/playground/01_literature/how-to-take-better-screenshots-on-mac":{"label":"How To Take Better Screenshots On Mac","children":{}},"/playground/01_literature/how-to-push-content-on-note-d":{"label":"How to push content on memo.d.foundation","children":{}},"/playground/01_literature/labs-weekly-catchup-5":{"label":"Labs Weekly Catchup #5","children":{}},"/playground/01_literature/labs-weekly-catchup-4":{"label":"Labs Weekly Catchup #4","children":{}},"/playground/01_literature/labs-weekly-catchup-3":{"label":"Labs Weekly Catchup #3","children":{}},"/playground/01_literature/labs-weekly-catchup-2":{"label":"Labs Weekly Catchup #2","children":{}},"/playground/01_literature/labs-weekly-catchup-1":{"label":"Labs Weekly Catchup #1","children":{}},"/playground/01_literature/labs-who-we-are":{"label":"Labs - Who we are","children":{}},"/playground/01_literature/readme":{"label":"Dwarves Memo","children":{}},"/playground/01_literature/duckdb-demo-and-showcase":{"label":"DuckDB demo and showcase","children":{}},"/playground/01_literature/salary-advance":{"label":"$icy Salary Advance","children":{}},"/playground/01_literature/how-rd-contributes-to-performance-review":{"label":"How R&D contributes to Performance Review","children":{}},"/playground/01_literature/knowledge-journey":{"label":"Knowledge Journey","children":{}},"/playground/01_literature/labs-new-member-onboarding":{"label":"Labs - New Member Onboarding","children":{}},"/playground/01_literature/labs-roadmap-nov-23-update":{"label":"Labs Roadmap (Nov 23 update)","children":{}},"/playground/01_literature/labs-topic-proposal-progress-tracking":{"label":"Labs - Topic proposal & progress tracking","children":{}},"/playground/01_literature/labs-x-consulting-workflow":{"label":"Labs x Consulting Workflow","children":{}},"/playground/01_literature/reward-model-nomination":{"label":"Reward Model & Nomination","children":{}},"/playground/01_literature/our-view-on-fullstack-engineering":{"label":"Our View On Fullstack Engineering","children":{}},"/playground/01_literature/adoption-of-pnpm":{"label":"Adoption Of Pnpm","children":{}},"/playground/01_literature/working-on-a-project-interview-assessment-at-dwarves":{"label":"Working On A Project Interview Assessment At Dwarves","children":{}},"/playground/01_literature/how-we-created-an-ai-powered-interview-system-using-openais-chatgpt":{"label":"How We Created An Ai Powered Interview System Using Openais Chatgpt","children":{}},"/playground/01_literature/easy-prompt-engineering-for-business-use-and-mitigating-risks-in-llms":{"label":"Easy Prompt Engineering For Business Use And Mitigating Risks In Llms","children":{}},"/playground/01_literature/exploring-machine-learning-approaches-for-fine-tuning-llama-models":{"label":"Exploring Machine Learning Approaches For Fine Tuning Llama Models","children":{}},"/playground/01_literature/managing-dataflow-and-sql-database-with-concurrency-control":{"label":"Managing Dataflow And Sql Database With Concurrency Control","children":{}},"/playground/01_literature/choosing-the-right-javascript-framework-a-deep-dive-into-react-vs-angular-vs-vue":{"label":"Choosing The Right Javascript Framework A Deep Dive Into React Vs Angular Vs Vue","children":{}},"/playground/01_literature/design-system-for-layer-2-using-zk-rollup":{"label":"Design System For Layer 2 Using Zk Rollup","children":{}},"/playground/01_literature/lessons-learned-from-being-a-part-of-corporate-micro-frontend-implementation":{"label":"Lessons Learned From Being A Part Of Corporate Micro Frontend Implementation","children":{}},"/playground/01_literature/cost-of-react-native":{"label":"Cost Of React Native","children":{}},"/playground/01_literature/lessons-learned-from-concurrency-practices-in-blockchain-projects":{"label":"Lessons Learned From Concurrency Practices In Blockchain Projects","children":{}},"/playground/01_literature/database-designs-for-multilingual-apps":{"label":"Database Designs For Multilingual Apps","children":{}},"/playground/01_literature/accelerate-project-initiation-with-advanced-nextjs-boilerplate-react-toolkit":{"label":"Accelerate Project Initiation With Advanced Nextjs Boilerplate React Toolkit","children":{}},"/playground/01_literature/how-blue-green-deployment-helped-mochi":{"label":"How Blue Green Deployment Helped Mochi","children":{}},"/playground/01_literature/i18n-frontend-guideline":{"label":"I18n Frontend Guideline","children":{}},"/playground/01_literature/radio-talk-61-monorepo":{"label":"Radio Talk 61 Monorepo","children":{}},"/playground/01_literature/from-multi-repo-to-monorepo-a-case-study-with-nghenhan-turbo-monorepo":{"label":"From Multi Repo To Monorepo A Case Study With Nghenhan Turbo Monorepo","children":{}},"/playground/01_literature/radio-talk-60-blue-green-deployment":{"label":"Radio Talk 60 Blue Green Deployment","children":{}},"/playground/01_literature/growth-is-our-universal-language":{"label":"Growth Is Our Universal Language","children":{}},"/playground/01_literature/the-key-of-security-mechanisms-in-tackling-cyber-threats":{"label":"The Key Of Security Mechanisms In Tackling Cyber Threats","children":{}},"/playground/01_literature/responsibility":{"label":"Responsibility","children":{}},"/playground/01_literature/configure-the-company-email":{"label":"Configure The Company Email","children":{}},"/playground/01_literature/tech-event-in-the-latest-transforming-healthcare-with-technology":{"label":"Tech Event In The Latest Transforming Healthcare With Technology","children":{}},"/playground/01_literature/from-data-to-backend-an-apprentice-sharing":{"label":"From Data To Backend An Apprentice Sharing","children":{}},"/playground/01_literature/data-analyst-in-retail-trading":{"label":"Data Analyst In Retail Trading","children":{}},"/playground/01_literature/passing-the-probation-get-3-upvotes":{"label":"Passing The Probation Get 3 Upvotes","children":{}},"/playground/01_literature/react-native-new-architecture":{"label":"React Native New Architecture","children":{}},"/playground/01_literature/writing":{"label":"Writing","children":{"/playground/01_literature/writing/state-explain-link":{"label":"State, Explain, Link - An all-purpose writing technique","children":{}}}},"/playground/01_literature/dwarves-radio-talk-17-conduct-a-1-1-session":{"label":"Dwarves Radio Talk 17 Conduct A 1 1 Session","children":{}},"/playground/01_literature/dwarves-radio-talk-16-run-an-effective-performance-review":{"label":"Dwarves Radio Talk 16 Run An Effective Performance Review","children":{}},"/playground/01_literature/understanding-an-application-design":{"label":"Understanding An Application Design","children":{}},"/playground/01_literature/sql-practices-orm-vs-plain-sql":{"label":"Sql Practices Orm Vs Plain Sql","children":{}},"/playground/01_literature/what-i-learned-on-design-thinking-and-software-development":{"label":"What I Learned On Design Thinking And Software Development","children":{}},"/playground/01_literature/six-things-i-extracted-from-design-thinking":{"label":"Six Things I Extracted From Design Thinking","children":{}},"/playground/01_literature/gitflow-pull-request":{"label":"Gitflow Pull Request","children":{}},"/playground/01_literature/git-commit-message-convention":{"label":"Git Commit Message Convention","children":{}},"/playground/01_literature/are-we-really-engineers":{"label":"Are We Really Engineers","children":{}},"/playground/01_literature/how-we-setup-cicd":{"label":"How We Setup Cicd","children":{}},"/playground/01_literature/getting-started-with-webflow":{"label":"Getting Started With Webflow","children":{}},"/playground/01_literature/ui-design-best-practices-dwarves":{"label":"Ui Design Best Practices Dwarves","children":{}},"/playground/01_literature/xpc-services-on-macos-app-using-swift":{"label":"Xpc Services On Macos App Using Swift","children":{}},"/playground/01_literature/the-correct-way-to-build-kpi":{"label":"The Correct Way To Build Kpi","children":{}},"/playground/01_literature/domain-insight-research-framework":{"label":"Domain Insight Research Framework","children":{}},"/playground/01_literature/asking-as-a-junior":{"label":"Asking As A Junior","children":{}},"/playground/01_literature/infinite-image-gallery-with-r3f-an-approach":{"label":"Infinite Image Gallery With R3f An Approach","children":{}},"/playground/01_literature/market":{"label":"Market","children":{"/playground/01_literature/market/an-overview-of-micro-investment-in-real-estate":{"label":"An Overview Of Micro Investment In Real Estate","children":{}}}},"/playground/01_literature/grid-and-layout":{"label":"Grid And Layout","children":{}},"/playground/01_literature/startups-vs-junior-designers":{"label":"Startups Vs Junior Designers","children":{}},"/playground/01_literature/gestalt-principles-in-ui-design":{"label":"Gestalt Principles In Ui Design","children":{}},"/playground/01_literature/aarrr-framework-in-a-nutshell":{"label":"Aarrr Framework In A Nutshell","children":{}},"/playground/01_literature/a-quick-intro-to-webassembly":{"label":"A Quick Intro To Webassembly","children":{}},"/playground/01_literature/sdk-event-sourcing":{"label":"Sdk Event Sourcing","children":{}},"/playground/01_literature/software-development-life-cycle-101":{"label":"Software Development Life Cycle 101","children":{}},"/playground/01_literature/introduce-to-dwarves-memo":{"label":"Introduce To Dwarves Memo","children":{}},"/playground/01_literature/daemons-and-services-programming-guide":{"label":"Daemons And Services Programming Guide","children":{}},"/playground/01_literature/remote-moderated-usability-testing":{"label":"Remote Moderated Usability Testing","children":{}},"/playground/01_literature/an-alternative-to-tm":{"label":"An Alternative To Tm","children":{}},"/playground/01_literature/how-a-design-system-work":{"label":"How A Design System Work","children":{}},"/playground/01_literature/software-modeling":{"label":"Software Modeling","children":{}},"/playground/01_literature/reusability-in-software-development":{"label":"Reusability In Software Development","children":{}},"/playground/01_literature/blockchain-for-designers":{"label":"Blockchain For Designers","children":{}},"/playground/01_literature/design-better-mobile-application":{"label":"Design Better Mobile Application","children":{}},"/playground/01_literature/introduction-to-software-craftsmanship":{"label":"Introduction To Software Craftsmanship","children":{}},"/playground/01_literature/domain-glossary":{"label":"Domain Glossary","children":{}},"/playground/01_literature/architecture-decision-record":{"label":"Architecture Decision Record","children":{}},"/playground/01_literature/build-an-assistant-on-the-terminal":{"label":"Build An Assistant On The Terminal","children":{}},"/playground/01_literature/create-circular-text-using-swiftui":{"label":"Create Circular Text Using Swiftui","children":{}},"/playground/01_literature/draw-watch-face-using-swiftui":{"label":"Draw Watch Face Using Swiftui","children":{}},"/playground/01_literature/applied-security-basis":{"label":"Applied Security Basis","children":{}},"/playground/01_literature/swiftui":{"label":"Swiftui","children":{}},"/playground/01_literature/bunk-license-check":{"label":"Bunk License Check","children":{}},"/playground/01_literature/well-crafted-software":{"label":"Well Crafted Software","children":{}},"/playground/01_literature/objective":{"label":"Objective","children":{}},"/playground/01_literature/project-management":{"label":"Project Management","children":{}},"/playground/01_literature/kubernetes-helm-101":{"label":"Kubernetes Helm 101","children":{}},"/playground/01_literature/what-is-kubernetes":{"label":"What Is Kubernetes","children":{}},"/playground/01_literature/traits-to-assess-during-an-interview":{"label":"Traits To Assess During An Interview","children":{}},"/playground/01_literature/recursively-export-file-pattern-in-javascript-es6-application":{"label":"Recursively Export File Pattern In Javascript Es6 Application","children":{}},"/playground/01_literature/playaround-with-clojure":{"label":"Playaround With Clojure","children":{}},"/playground/01_literature/playaround-with-rust":{"label":"Playaround With Rust","children":{}},"/playground/01_literature/overview-on-broker-pattern-in-distributed-system":{"label":"Overview On Broker Pattern In Distributed System","children":{}},"/playground/01_literature/fundamental-end-to-end-frontend-testing-with-cypress":{"label":"Fundamental End To End Frontend Testing With Cypress","children":{}},"/playground/01_literature/uidynamicanimator":{"label":"Uidynamicanimator","children":{}},"/playground/01_literature/reproduce-apple-find-me-bottom-menu-view":{"label":"Reproduce Apple Find Me Bottom Menu View","children":{}},"/playground/01_literature/build-a-passcode-view-with-swift":{"label":"Build A Passcode View With Swift","children":{}},"/playground/01_literature/istio":{"label":"Istio","children":{}},"/playground/01_literature/different-ways-to-test-react-application":{"label":"Different Ways To Test React Application","children":{}},"/playground/01_literature/federated-byzantine":{"label":"Federated Byzantine","children":{}},"/playground/01_literature/fabric-hyperledger-architecture-explanation":{"label":"Fabric Hyperledger Architecture Explanation","children":{}},"/playground/01_literature/setup-react-project-with-webpack-and-babel":{"label":"Setup React Project With Webpack And Babel","children":{}},"/playground/01_literature/split-and-reuse-code-in-react-application":{"label":"Split And Reuse Code In React Application","children":{}},"/playground/01_literature/hoc-renderprops-and-hook-in-reactjs":{"label":"Hoc Renderprops And Hook In Reactjs","children":{}},"/playground/01_literature/resource-assignment":{"label":"Resource Assignment","children":{}},"/playground/01_literature/the-principle-of-spacing-in-ui-design-part-2":{"label":"The Principle Of Spacing In Ui Design Part 2","children":{}},"/playground/01_literature/finite-state-machine":{"label":"Finite State Machine","children":{}},"/playground/01_literature/card-sorting-and-a-glimpse-at-experimental-sorting-session":{"label":"Card Sorting And A Glimpse At Experimental Sorting Session","children":{}},"/playground/01_literature/about-devops":{"label":"About Devops","children":{}},"/playground/01_literature/our-daily-standup-format":{"label":"Our Daily Standup Format","children":{}},"/playground/01_literature/good-design-understanding":{"label":"Good Design Understanding","children":{}},"/playground/01_literature/competency-mapping":{"label":"Competency Mapping","children":{}},"/playground/01_literature/design-resourcestools":{"label":"Design Resourcestools","children":{}},"/playground/01_literature/design-tips-tricks":{"label":"Design Tips Tricks","children":{}},"/playground/01_literature/design-system":{"label":"Design System","children":{}},"/playground/01_literature/design-workflow":{"label":"Design Workflow","children":{}},"/playground/01_literature/three-levels-of-design":{"label":"Three Levels Of Design","children":{}},"/playground/01_literature/ui-design-fundamental":{"label":"Ui Design Fundamental","children":{}},"/playground/01_literature/ux-model":{"label":"Ux Model","children":{}},"/playground/01_literature/the-principle-of-spacing-in-ui-design-part-1":{"label":"The Principle Of Spacing In Ui Design Part 1","children":{}},"/playground/01_literature/be-careful-with-your-code-splitting-setup":{"label":"Be Careful With Your Code Splitting Setup","children":{}},"/playground/01_literature/qc-onboarding":{"label":"Qc Onboarding","children":{}},"/playground/01_literature/dcos-series-part-5-gitlab":{"label":"Dcos Series Part 5 Gitlab","children":{}},"/playground/01_literature/dcos-series-part-4-deploy-simple-application-with-backend-database":{"label":"Dcos Series Part 4 Deploy Simple Application With Backend Database","children":{}},"/playground/01_literature/dcos-series-part-3-service-discovery-and-load-balancing":{"label":"Dcos Series Part 3 Service Discovery And Load Balancing","children":{}},"/playground/01_literature/dcos-series-part-2-deploy-simple-applications":{"label":"Dcos Series Part 2 Deploy Simple Applications","children":{}},"/playground/01_literature/dcos-series-part-1-quick-look-installation":{"label":"Dcos Series Part 1 Quick Look Installation","children":{}},"/playground/01_literature/skill-of-software-engineer":{"label":"Skill Of Software Engineer","children":{}},"/playground/01_literature/docker-registry":{"label":"Docker Registry","children":{}},"/playground/01_literature/agile-using-clickup-as-agile-management-tool":{"label":"Agile Using Clickup As Agile Management Tool","children":{}},"/playground/01_literature/agile-how-to-create-clickup-tickets":{"label":"Agile How To Create Clickup Tickets","children":{}},"/playground/01_literature/considering-factors-for-performance-evaluating":{"label":"Considering Factors For Performance Evaluating","children":{}},"/playground/01_literature/how-we-contribute-to-homebrew":{"label":"How We Contribute To Homebrew","children":{}},"/playground/01_literature/the-10x-engineer":{"label":"The 10x Engineer","children":{}},"/playground/01_literature/definition-of-done":{"label":"Definition Of Done","children":{}},"/playground/01_literature/estimation-in-agile":{"label":"Estimation In Agile","children":{}},"/playground/01_literature/sprint-lifecycle":{"label":"Sprint Lifecycle","children":{}},"/playground/01_literature/remote-prepare-and-get-going":{"label":"Remote Prepare And Get Going","children":{}},"/playground/01_literature/docker-microcontainers":{"label":"Docker Microcontainers","children":{}}}},"/playground/00_fleeting":{"label":"00_fleeting","children":{"/playground/00_fleeting/automata":{"label":"Automata","children":{}},"/playground/00_fleeting/error-handling-patterns":{"label":"Error Handling Patterns","children":{}},"/playground/00_fleeting/founder-liquidity":{"label":"Founder Liquidity","children":{}},"/playground/00_fleeting/why-hollywood-and-gaming-struggle-with-ai":{"label":"Why Hollywood and gaming struggle with AI","children":{}},"/playground/00_fleeting/subscription-pricing-models":{"label":"Subscription Pricing Models","children":{}},"/playground/00_fleeting/erlang-fsm":{"label":"Erlang Finite State Machine","children":{}},"/playground/00_fleeting/rust-trait":{"label":"Rust Trait","children":{}},"/playground/00_fleeting/explaining-gradient-descent-in-machine-learning-with-a-simple-analogy":{"label":"Explaining Gradient Descent in Machine Learning with a simple analogy","children":{}},"/playground/00_fleeting/organize-team-know-how-with-zettelkasten-method":{"label":"Organize team know-how with Zettelkasten Method","children":{}},"/playground/00_fleeting/how-to-talk-to-chatgpt-effectively":{"label":"How to talk to ChatGPT effectively","children":{}},"/playground/00_fleeting/icy-in-2024":{"label":"$icy in 2024","children":{}},"/playground/00_fleeting/icy-dfg":{"label":"💠 df protocol, $icy and $dfg","children":{}},"/playground/00_fleeting/202302281019-case-study-write-heavy-scalable-and-reliable-inventory-platform":{"label":"Case study: Write-heavy scalable and reliable inventory platform","children":{}},"/playground/00_fleeting/202301191192-multi-column-index-in-db":{"label":"Multi-column index in DB","children":{}},"/playground/00_fleeting/202301091379-invoking-component-functions-in-react":{"label":"Invoking component functions in React","children":{}},"/playground/00_fleeting/202212131609-how-to-deal-with-technical-debt-in-scrum":{"label":"How to deal with technical debt in Scrum","children":{}},"/playground/00_fleeting/202211141287-go-json-parsing":{"label":"Go JSON parser: number <-> interface","children":{}},"/playground/00_fleeting/202211141513-materialized-view-pattern":{"label":"Materialized View Pattern","children":{}},"/playground/00_fleeting/202211081111-error-messaging":{"label":"Error Messaging","children":{}},"/playground/00_fleeting/202210172128-sign-in-form-best-practices":{"label":"Sign-in Form Best Practices","children":{}},"/playground/00_fleeting/202210162154-the-best-of-css-tldr":{"label":"The Best of CSS TLDR","children":{}},"/playground/00_fleeting/202210150019-migration-planning":{"label":"Migration Planning","children":{}},"/playground/00_fleeting/202210131000-behavior-driven-development":{"label":"Behavior Driven Development","children":{}},"/playground/00_fleeting/202210131516-react-fiber":{"label":"React Fiber","children":{}},"/playground/00_fleeting/202210122014-forward-proxy":{"label":"Forward Proxy","children":{}}}},"/playground/_radar":{"label":"_radar","children":{"/playground/_radar/readme":{"label":"Tech Radar","children":{}},"/playground/_radar/codecept":{"label":"Codecept","children":{}},"/playground/_radar/apache-spark":{"label":"Apache Spark","children":{}},"/playground/_radar/ant-design":{"label":"Ant Design","children":{}},"/playground/_radar/apache-kafka":{"label":"Apache Kafka","children":{}},"/playground/_radar/argocd":{"label":"Argocd","children":{}},"/playground/_radar/astro":{"label":"Astro","children":{}},"/playground/_radar/backstage":{"label":"Backstage","children":{}},"/playground/_radar/blue-green-deployment":{"label":"Blue Green Deployment","children":{}},"/playground/_radar/browserstack":{"label":"Browserstack","children":{}},"/playground/_radar/carbon":{"label":"Carbon","children":{}},"/playground/_radar/chatgpt-assistance":{"label":"Chatgpt Assistance","children":{}},"/playground/_radar/chromatic":{"label":"Chromatic","children":{}},"/playground/_radar/clickhouse":{"label":"Clickhouse","children":{}},"/playground/_radar/cloudflare-workers":{"label":"Cloudflare Workers","children":{}},"/playground/_radar/commitlint":{"label":"Commitlint","children":{}},"/playground/_radar/copilot":{"label":"Copilot","children":{}},"/playground/_radar/cucumber":{"label":"Cucumber","children":{}},"/playground/_radar/cypress":{"label":"Cypress","children":{}},"/playground/_radar/dapr":{"label":"Dapr","children":{}},"/playground/_radar/deno":{"label":"Deno","children":{}},"/playground/_radar/detox":{"label":"Detox","children":{}},"/playground/_radar/devcontainers":{"label":"Devcontainers","children":{}},"/playground/_radar/devpod":{"label":"Devpod","children":{}},"/playground/_radar/dora-metrics":{"label":"Dora Metrics","children":{}},"/playground/_radar/duckdb":{"label":"Duckdb","children":{}},"/playground/_radar/earthly":{"label":"Earthly","children":{}},"/playground/_radar/elixir-umbrella-project":{"label":"Elixir Umbrella Project","children":{}},"/playground/_radar/elixir":{"label":"Elixir","children":{}},"/playground/_radar/erlang":{"label":"Erlang","children":{}},"/playground/_radar/error-logging-convention":{"label":"Error Logging Convention","children":{}},"/playground/_radar/eslint":{"label":"Eslint","children":{}},"/playground/_radar/event-sourcing":{"label":"Event Sourcing","children":{}},"/playground/_radar/excalidraw":{"label":"Excalidraw","children":{}},"/playground/_radar/expo":{"label":"Expo","children":{}},"/playground/_radar/figma":{"label":"Figma","children":{}},"/playground/_radar/formal-verification":{"label":"Formal Verification","children":{}},"/playground/_radar/fullstack-tracing":{"label":"Fullstack Tracing","children":{}},"/playground/_radar/gestalt-principle":{"label":"Gestalt Principle","children":{}},"/playground/_radar/github-actions":{"label":"Github Actions","children":{}},"/playground/_radar/golang":{"label":"Golang","children":{}},"/playground/_radar/grafana":{"label":"Grafana","children":{}},"/playground/_radar/graylog":{"label":"Graylog","children":{}},"/playground/_radar/headless-ui":{"label":"Headless Ui","children":{}},"/playground/_radar/hoppscotch":{"label":"Hoppscotch","children":{}},"/playground/_radar/ipfs":{"label":"Ipfs","children":{}},"/playground/_radar/jotai":{"label":"Jotai","children":{}},"/playground/_radar/k6":{"label":"K6","children":{}},"/playground/_radar/k9s":{"label":"K9s","children":{}},"/playground/_radar/kaniko":{"label":"Kaniko","children":{}},"/playground/_radar/kotlin":{"label":"Kotlin","children":{}},"/playground/_radar/kubeseal-sops":{"label":"Kubeseal Sops","children":{}},"/playground/_radar/ladle":{"label":"Ladle","children":{}},"/playground/_radar/langchain":{"label":"Langchain","children":{}},"/playground/_radar/large-language-model-llm":{"label":"Large Language Model Llm","children":{}},"/playground/_radar/loki":{"label":"Loki","children":{}},"/playground/_radar/makefile":{"label":"Makefile","children":{}},"/playground/_radar/micro-frontend":{"label":"Micro Frontend","children":{}},"/playground/_radar/monorepo":{"label":"Monorepo","children":{}},"/playground/_radar/msw":{"label":"Msw","children":{}},"/playground/_radar/n6n":{"label":"N6n","children":{}},"/playground/_radar/nestjs":{"label":"Nestjs","children":{}},"/playground/_radar/netlify":{"label":"Netlify","children":{}},"/playground/_radar/newrelic":{"label":"Newrelic","children":{}},"/playground/_radar/nextjs":{"label":"Nextjs","children":{}},"/playground/_radar/nodejs":{"label":"Nodejs","children":{}},"/playground/_radar/nostrum":{"label":"Nostrum","children":{}},"/playground/_radar/nx":{"label":"Nx","children":{}},"/playground/_radar/orval":{"label":"Orval","children":{}},"/playground/_radar/page-object-model":{"label":"Page Object Model","children":{}},"/playground/_radar/partytown":{"label":"Partytown","children":{}},"/playground/_radar/phaser":{"label":"Phaser","children":{}},"/playground/_radar/phoenix":{"label":"Phoenix","children":{}},"/playground/_radar/playwright":{"label":"Playwright","children":{}},"/playground/_radar/pnpm":{"label":"Pnpm","children":{}},"/playground/_radar/progressive-delivery":{"label":"Progressive Delivery","children":{}},"/playground/_radar/prometheus":{"label":"Prometheus","children":{}},"/playground/_radar/prompt-engineering":{"label":"Prompt Engineering","children":{}},"/playground/_radar/qwik":{"label":"Qwik","children":{}},"/playground/_radar/radix-ui":{"label":"Radix Ui","children":{}},"/playground/_radar/react-hook-form":{"label":"React Hook Form","children":{}},"/playground/_radar/react-llm":{"label":"React Llm","children":{}},"/playground/_radar/react-native":{"label":"React Native","children":{}},"/playground/_radar/react-query":{"label":"React Query","children":{}},"/playground/_radar/react-server-component":{"label":"React Server Component","children":{}},"/playground/_radar/react-testing-library":{"label":"React Testing Library","children":{}},"/playground/_radar/react":{"label":"React","children":{}},"/playground/_radar/reinforcement-learning-from-human-feedback":{"label":"Reinforcement Learning From Human Feedback","children":{}},"/playground/_radar/remix":{"label":"Remix","children":{}},"/playground/_radar/replayio":{"label":"Replayio","children":{}},"/playground/_radar/reverse-engineering":{"label":"Reverse Engineering","children":{}},"/playground/_radar/rust":{"label":"Rust","children":{}},"/playground/_radar/selenium":{"label":"Selenium","children":{}},"/playground/_radar/semantic-release-auto-release":{"label":"Semantic Release Auto Release","children":{}},"/playground/_radar/sentry":{"label":"Sentry","children":{}},"/playground/_radar/serverlessq":{"label":"Serverlessq","children":{}},"/playground/_radar/solidity":{"label":"Solidity","children":{}},"/playground/_radar/solidjs":{"label":"Solidjs","children":{}},"/playground/_radar/stern":{"label":"Stern","children":{}},"/playground/_radar/svelte":{"label":"Svelte","children":{}},"/playground/_radar/swagger":{"label":"Swagger","children":{}},"/playground/_radar/swift-ui":{"label":"Swift Ui","children":{}},"/playground/_radar/swift":{"label":"Swift","children":{}},"/playground/_radar/swr":{"label":"Swr","children":{}},"/playground/_radar/tailwindcss":{"label":"Tailwindcss","children":{}},"/playground/_radar/tauri":{"label":"Tauri","children":{}},"/playground/_radar/team-topologies":{"label":"Team Topologies","children":{}},"/playground/_radar/timeline":{"label":"Timeline","children":{"/playground/_radar/timeline/create-working-devcontainer-for-nextjs-boilerplate":{"label":"Create Working Devcontainer For Nextjs Boilerplate","children":{}},"/playground/_radar/timeline/open-source-devpod-paperspace-provider":{"label":"Open Source Devpod Paperspace Provider","children":{}},"/playground/_radar/timeline/create-working-devcontainer-for-go-api":{"label":"Create Working Devcontainer For Go Api","children":{}},"/playground/_radar/timeline/fe-23-training-type-safe-client-server":{"label":"Fe 23 Training Type Safe Client Server","children":{}},"/playground/_radar/timeline/first-introduced-use-of-duckdb-in-consolelabs-logconsoleso":{"label":"First Introduced Use Of Duckdb In Consolelabs Logconsoleso","children":{}},"/playground/_radar/timeline/add-type-safe-client-server-support-for-next-boilerplate":{"label":"Add Type Safe Client Server Support For Next Boilerplate","children":{}},"/playground/_radar/timeline/building-reliable-apps-sentry-and-distributed-tracing-for-effective-monitoring":{"label":"Building Reliable Apps Sentry And Distributed Tracing For Effective Monitoring","children":{}},"/playground/_radar/timeline/an-engineering-story-map-for-llms":{"label":"An Engineering Story Map For Llms","children":{}},"/playground/_radar/timeline/exploring-resumable-server-side-rendering-with-qwik":{"label":"Exploring Resumable Server Side Rendering With Qwik","children":{}},"/playground/_radar/timeline/challenge-faced-when-researching-rlhf-with-open-assistant":{"label":"Challenge Faced When Researching Rlhf With Open Assistant","children":{}},"/playground/_radar/timeline/embracing-go-1210s-slog-a-unified-logging-interface-with-benchmarks-against-zerolog-and-zap":{"label":"Embracing Go 1210s Slog A Unified Logging Interface With Benchmarks Against Zerolog And Zap","children":{}},"/playground/_radar/timeline/adoption-of-pnpm":{"label":"Adoption Of Pnpm","children":{}},"/playground/_radar/timeline/diagnosing-and-resolving-performance-issues-with-pprof-and-trace-in-go":{"label":"Diagnosing And Resolving Performance Issues With Pprof And Trace In Go","children":{}},"/playground/_radar/timeline/migrate-yarn-to-pnpm-in-fortress":{"label":"Migrate Yarn To Pnpm In Fortress","children":{}},"/playground/_radar/timeline/level-up-your-testing-game-harnessing-gomock-for-unbeatable-unit-testing-in-go":{"label":"Level Up Your Testing Game Harnessing Gomock For Unbeatable Unit Testing In Go","children":{}},"/playground/_radar/timeline/migrate-yarn-to-pnpm-in-nghe-nhan-droppii":{"label":"Migrate Yarn To Pnpm In Nghe Nhan Droppii","children":{}},"/playground/_radar/timeline/common-design-patterns-in-golang-part-1":{"label":"Common Design Patterns In Golang Part 1","children":{}},"/playground/_radar/timeline/go-training-2023-from-basic-to-advanced":{"label":"Go Training 2023 From Basic To Advanced","children":{}},"/playground/_radar/timeline/llms-accuracy-self-refinement":{"label":"Llms Accuracy Self Refinement","children":{}},"/playground/_radar/timeline/adversarial-prompting":{"label":"Adversarial Prompting","children":{}},"/playground/_radar/timeline/chunking-strategies-to-overcome-context-limitation-in-llm":{"label":"Chunking Strategies To Overcome Context Limitation In Llm","children":{}},"/playground/_radar/timeline/dealing-with-long-term-memory-of-chatbot":{"label":"Dealing With Long Term Memory Of Chatbot","children":{}},"/playground/_radar/timeline/error-handling-and-failure-management-in-a-go-system":{"label":"Error Handling And Failure Management In A Go System","children":{}},"/playground/_radar/timeline/migrate-yarn-to-pnpm-in-nextjs-boilerplate":{"label":"Migrate Yarn To Pnpm In Nextjs Boilerplate","children":{}},"/playground/_radar/timeline/lessons-learned-building-an-llm-chatbot-a-case-study":{"label":"Lessons Learned Building An Llm Chatbot A Case Study","children":{}},"/playground/_radar/timeline/foundation-model":{"label":"Foundation Model","children":{}},"/playground/_radar/timeline/integrate-zod-to-nextjs-boilerplate":{"label":"Integrate Zod To Nextjs Boilerplate","children":{}},"/playground/_radar/timeline/llm-query-caching":{"label":"Llm Query Caching","children":{}},"/playground/_radar/timeline/build-your-chatbot-with-open-source-large-language-models":{"label":"Build Your Chatbot With Open Source Large Language Models","children":{}},"/playground/_radar/timeline/integrate-playwright-x-codecept-with-discord":{"label":"Integrate Playwright X Codecept With Discord","children":{}},"/playground/_radar/timeline/overcoming-distributed-system-challenges-using-golang":{"label":"Overcoming Distributed System Challenges Using Golang","children":{}},"/playground/_radar/timeline/easy-prompt-engineering-for-business-use-and-mitigating-risks-in-llms":{"label":"Easy Prompt Engineering For Business Use And Mitigating Risks In Llms","children":{}},"/playground/_radar/timeline/migrate-headlessui-to-radixui":{"label":"Migrate Headlessui To Radixui","children":{}},"/playground/_radar/timeline/llm-101-enhance-developer-productivity":{"label":"Llm 101 Enhance Developer Productivity","children":{}},"/playground/_radar/timeline/approaches-to-manage-concurrent-workloads-like-worker-pools-and-pipelines":{"label":"Approaches To Manage Concurrent Workloads Like Worker Pools And Pipelines","children":{}},"/playground/_radar/timeline/lessons-learned-from-being-a-part-of-corporate-microfrontend-implementation":{"label":"Lessons Learned From Being A Part Of Corporate Microfrontend Implementation","children":{}},"/playground/_radar/timeline/migrate-yarn-to-pnpm-in-react-toolkit":{"label":"Migrate Yarn To Pnpm In React Toolkit","children":{}},"/playground/_radar/timeline/lessons-learned-from-concurrency-practices-in-blockchain-projects":{"label":"Lessons Learned From Concurrency Practices In Blockchain Projects","children":{}},"/playground/_radar/timeline/applying-mock-service-worker-msw-for-seamless-web-development":{"label":"Applying Mock Service Worker Msw For Seamless Web Development","children":{}},"/playground/_radar/timeline/integrate-playwright-to-run-e2e-test-with-fortress":{"label":"Integrate Playwright To Run E2e Test With Fortress","children":{}},"/playground/_radar/timeline/from-multi-repo-to-monorepo-a-case-study-with-nghenhan":{"label":"From Multi Repo To Monorepo A Case Study With Nghenhan","children":{}},"/playground/_radar/timeline/case-study-how-blue-green-deployment-help-mochi":{"label":"Case Study How Blue Green Deployment Help Mochi","children":{}},"/playground/_radar/timeline/develop-codecept-to-integrate-with-fortress":{"label":"Develop Codecept To Integrate With Fortress","children":{}},"/playground/_radar/timeline/case-study-from-multiple-repo-to-monorepo-at-nghe-nhan":{"label":"Case Study From Multiple Repo To Monorepo At Nghe Nhan","children":{}},"/playground/_radar/timeline/apply-blue-green-deployment-to-mochi":{"label":"Apply Blue Green Deployment To Mochi","children":{}},"/playground/_radar/timeline/memo-blue-green-deployment":{"label":"Memo Blue Green Deployment","children":{}},"/playground/_radar/timeline/brainery-blue-green-deployment":{"label":"Brainery Blue Green Deployment","children":{}},"/playground/_radar/timeline/brainery-validation-with-zod":{"label":"Brainery Validation With Zod","children":{}},"/playground/_radar/timeline/brainery-progressive-delivery":{"label":"Brainery Progressive Delivery","children":{}},"/playground/_radar/timeline/memo-react-native-new-architecture":{"label":"Memo React Native New Architecture","children":{}},"/playground/_radar/timeline/backend-for-call-requests-to-binance-and-get-data-from-multiple-platforms":{"label":"Backend For Call Requests To Binance And Get Data From Multiple Platforms","children":{}},"/playground/_radar/timeline/create-backend-monorepo-to-share-code-and-manage-multiple-services-in-one-repo":{"label":"Create Backend Monorepo To Share Code And Manage Multiple Services In One Repo","children":{}},"/playground/_radar/timeline/nextjs-boilerplate":{"label":"Nextjs Boilerplate","children":{}},"/playground/_radar/timeline/apply-page-object-model-structure-to-wego":{"label":"Apply Page Object Model Structure To Wego","children":{}},"/playground/_radar/timeline/apply-page-object-model-structure-to-aharooms":{"label":"Apply Page Object Model Structure To Aharooms","children":{}},"/playground/_radar/timeline/apply-page-object-model-structure-to-artzy":{"label":"Apply Page Object Model Structure To Artzy","children":{}},"/playground/_radar/timeline/apply-page-object-model-structure-to-sci":{"label":"Apply Page Object Model Structure To Sci","children":{}},"/playground/_radar/timeline/build-automation-for-sci":{"label":"Build Automation For Sci","children":{}},"/playground/_radar/timeline/apply-page-object-model-structure-to-basehq":{"label":"Apply Page Object Model Structure To Basehq","children":{}},"/playground/_radar/timeline/mdx-document-for":{"label":"Mdx Document For","children":{}},"/playground/_radar/timeline/develop":{"label":"Develop","children":{}},"/playground/_radar/timeline/apply-monorepos-to-repit-to-resolve-the-problem-of-consistency":{"label":"Apply Monorepos To Repit To Resolve The Problem Of Consistency","children":{}},"/playground/_radar/timeline/learn-typescript-as-a-mandatory-to-develop-reapit-foundation":{"label":"Learn Typescript As A Mandatory To Develop Reapit Foundation","children":{}},"/playground/_radar/timeline/develop-sdk-integration-demo-for-sajari":{"label":"Develop Sdk Integration Demo For Sajari","children":{}},"/playground/_radar/timeline/live-view":{"label":"Live View","children":{}},"/playground/_radar/timeline/migrate-aharooms-pms-to-typescript":{"label":"Migrate Aharooms Pms To Typescript","children":{}},"/playground/_radar/timeline/create-api-service-for-urbox-to-sync-orders-from-3rd-parties-and-manage-shipment":{"label":"Create Api Service For Urbox To Sync Orders From 3rd Parties And Manage Shipment","children":{}},"/playground/_radar/timeline/nghenhan-microservices":{"label":"Nghenhan Microservices","children":{}},"/playground/_radar/timeline/radio-talk-65-fullstack-type-safe-with-trpc":{"label":"Radio Talk 65 Fullstack Type Safe With Trpc","children":{}},"/playground/_radar/timeline/understanding-test-doubles-an-in-depth-look":{"label":"Understanding Test Doubles An In Depth Look","children":{}},"/playground/_radar/timeline/radio-talk-64-coding-best-practice-that-optimizing-go-compiler":{"label":"Radio Talk 64 Coding Best Practice That Optimizing Go Compiler","children":{}},"/playground/_radar/timeline/reward-model":{"label":"Reward Model","children":{}},"/playground/_radar/timeline/q-learning":{"label":"Q Learning","children":{}},"/playground/_radar/timeline/sum-command":{"label":"Sum Command","children":{}},"/playground/_radar/timeline/reinforcement-learning":{"label":"Reinforcement Learning","children":{}},"/playground/_radar/timeline/react-server-component":{"label":"React Server Component","children":{}},"/playground/_radar/timeline/select-vector-database-for-llm":{"label":"Select Vector Database For Llm","children":{}},"/playground/_radar/timeline/workaround-with-openais-token-limit-with-langchain":{"label":"Workaround With Openais Token Limit With Langchain","children":{}},"/playground/_radar/timeline/working-with-langchain-document-loaders":{"label":"Working With Langchain Document Loaders","children":{}},"/playground/_radar/timeline/the-cost-of-react-native":{"label":"The Cost Of React Native","children":{}},"/playground/_radar/timeline/state-of-frontend-2023-react-vs-angular-vs-vue":{"label":"State Of Frontend 2023 React Vs Angular Vs Vue","children":{}},"/playground/_radar/timeline/unit-testing-best-practices-in-golang":{"label":"Unit Testing Best Practices In Golang","children":{}},"/playground/_radar/timeline/what-is-pnpm":{"label":"What Is Pnpm","children":{}},"/playground/_radar/timeline/tackling-server-state-complexity-in-frontend-development":{"label":"Tackling Server State Complexity In Frontend Development","children":{}},"/playground/_radar/timeline/why-we-chose-our-tech-stack":{"label":"Why We Chose Our Tech Stack","children":{}},"/playground/_radar/timeline/why-micro-frontend":{"label":"Why Micro Frontend","children":{}},"/playground/_radar/timeline/radio-talk-monorepo":{"label":"Radio Talk Monorepo","children":{}},"/playground/_radar/timeline/radio-talk-blue-green-deployment":{"label":"Radio Talk Blue Green Deployment","children":{}},"/playground/_radar/timeline/radio-talk-a-demo-of-query-engine-postgresql-vs-apache-spark":{"label":"Radio Talk A Demo Of Query Engine Postgresql Vs Apache Spark","children":{}},"/playground/_radar/timeline/rnd-team-mentioned-apache-spark-as-a-solution-to-handle-query-big-data":{"label":"Rnd Team Mentioned Apache Spark As A Solution To Handle Query Big Data","children":{}},"/playground/_radar/timeline/radio-talk-engineering-health-metrics":{"label":"Radio Talk Engineering Health Metrics","children":{}},"/playground/_radar/timeline/radio-talk-nextjs-13":{"label":"Radio Talk Nextjs 13","children":{}},"/playground/_radar/timeline/radio-talk-using-nextjs-as-a-fullstack-framework":{"label":"Radio Talk Using Nextjs As A Fullstack Framework","children":{}},"/playground/_radar/timeline/use-yup-to-validate-form-values-in-droppii":{"label":"Use Yup To Validate Form Values In Droppii","children":{}},"/playground/_radar/timeline/vitejs-native-modules":{"label":"Vitejs Native Modules","children":{}},"/playground/_radar/timeline/radio-talk-introduction-to-apache-spark":{"label":"Radio Talk Introduction To Apache Spark","children":{}},"/playground/_radar/timeline/vercel-switching-their-packages-from-yarn-to-pnpm-caught-our-attention":{"label":"Vercel Switching Their Packages From Yarn To Pnpm Caught Our Attention","children":{}},"/playground/_radar/timeline/radio-talk-remix-vs-nextjs":{"label":"Radio Talk Remix Vs Nextjs","children":{}},"/playground/_radar/timeline/radio-talk-turborepo":{"label":"Radio Talk Turborepo","children":{}},"/playground/_radar/timeline/react-toolkit-migrate-from-lerna-to-turporepo":{"label":"React Toolkit Migrate From Lerna To Turporepo","children":{}},"/playground/_radar/timeline/use-monorepos-to-build-v3-of-react-sdk-for-searchio":{"label":"Use Monorepos To Build V3 Of React Sdk For Searchio","children":{}},"/playground/_radar/timeline/react-toolkit":{"label":"React Toolkit","children":{}},"/playground/_radar/timeline/use-nx-for-managing-basehq-frontend-monorepos":{"label":"Use Nx For Managing Basehq Frontend Monorepos","children":{}},"/playground/_radar/timeline/practice-and-using-selenium-in-setel-project":{"label":"Practice And Using Selenium In Setel Project","children":{}},"/playground/_radar/timeline/urbox-backend-api":{"label":"Urbox Backend Api","children":{}},"/playground/_radar/timeline/using-k6-in-setel":{"label":"Using K6 In Setel","children":{}},"/playground/_radar/timeline/use-monorepos-to-resolve-the-problem-of-sharing-ui-components-in-aharoom":{"label":"Use Monorepos To Resolve The Problem Of Sharing Ui Components In Aharoom","children":{}},"/playground/_radar/timeline/a-case-study-interview-into-micro-frontends-building-design-system-for-e-commerce-platform":{"label":"A Case Study Interview Into Micro Frontends Building Design System For E Commerce Platform","children":{}},"/playground/_radar/timeline/accelerate-project-initiation-with-advanced-nextjs-boilerplate-react-toolkit":{"label":"Accelerate Project Initiation With Advanced Nextjs Boilerplate React Toolkit","children":{}},"/playground/_radar/timeline/adapt-cucumber-as-a-bdd-for-wego":{"label":"Adapt Cucumber As A Bdd For Wego","children":{}}}},"/playground/_radar/timescaledb":{"label":"Timescaledb","children":{}},"/playground/_radar/tla":{"label":"Tla","children":{}},"/playground/_radar/trunk-based-development":{"label":"Trunk Based Development","children":{}},"/playground/_radar/turborepo":{"label":"Turborepo","children":{}},"/playground/_radar/type-safe-client-server":{"label":"Type Safe Client Server","children":{}},"/playground/_radar/typescript":{"label":"Typescript","children":{}},"/playground/_radar/ui-documentation":{"label":"Ui Documentation","children":{}},"/playground/_radar/uno-css":{"label":"Uno Css","children":{}},"/playground/_radar/upptime":{"label":"Upptime","children":{}},"/playground/_radar/v-model":{"label":"V Model","children":{}},"/playground/_radar/vector-database":{"label":"Vector Database","children":{}},"/playground/_radar/vercel":{"label":"Vercel","children":{}},"/playground/_radar/vitejs":{"label":"Vitejs","children":{}},"/playground/_radar/volta":{"label":"Volta","children":{}},"/playground/_radar/wasm":{"label":"Wasm","children":{}},"/playground/_radar/webdriverio":{"label":"Webdriverio","children":{}},"/playground/_radar/webflow":{"label":"Webflow","children":{}},"/playground/_radar/yup":{"label":"Yup","children":{}},"/playground/_radar/zod":{"label":"Zod","children":{}},"/playground/_radar/zustand":{"label":"Zustand","children":{}}}},"/playground/blockchain":{"label":"Blockchain","children":{"/playground/blockchain/build-custom-ai-agent-with-elizaos":{"label":"Build custom AI Agent with ElizaOS","children":{}},"/playground/blockchain/web3-development-with-foundry":{"label":"Web3 Development with Foundry","children":{}},"/playground/blockchain/cross-chain-transfers-implementing-a-token-swap-from-base-chain-to-bitcoin":{"label":"Implement a Token Swap from the Base chain to Bitcoin for cross-chain transactions","children":{}},"/playground/blockchain/ton_core_concept":{"label":"Ton's base concepts","children":{}},"/playground/blockchain/ton_blockchain_of_blockchains":{"label":"Ton: Blockchain of blockchains","children":{}},"/playground/blockchain/introduce-to-solana-token-2022-new-standard-to-create-a-token-in-solana":{"label":"Introduce to Solana Token 2022 - new standard to create a token in solana","children":{}},"/playground/blockchain/solana-core-concept":{"label":"Solana core concepts","children":{}},"/playground/blockchain/metaplex-nft-compression":{"label":"Metaplex NFT Compression","children":{}},"/playground/blockchain/plonky2":{"label":"Plonky2","children":{}},"/playground/blockchain/polygon-zkevm-architecture":{"label":"Polygon zkEVM architecture","children":{}},"/playground/blockchain/starknet-architecture":{"label":"StarkNet architecture","children":{}},"/playground/blockchain/zk-snarks":{"label":"zk-SNARKs","children":{}},"/playground/blockchain/layer-2":{"label":"Layer 2: Scaling Solutions for Ethereum","children":{}},"/playground/blockchain/solana-account":{"label":"Solana Account","children":{}},"/playground/blockchain/foundational-topics":{"label":"Foundational Topics","children":{"/playground/blockchain/foundational-topics/zero-knowledge-proofs":{"label":"Zero-knowledge Proofs","children":{}},"/playground/blockchain/foundational-topics/blocks":{"label":"Blocks","children":{}},"/playground/blockchain/foundational-topics/distributed-systems":{"label":"Distributed systems","children":{}},"/playground/blockchain/foundational-topics/pos":{"label":"PoS","children":{}},"/playground/blockchain/foundational-topics/smart-contract":{"label":"Smart Contract","children":{}},"/playground/blockchain/foundational-topics/topics":{"label":"Topics","children":{}}}},"/playground/blockchain/multisign-wallet":{"label":"Multisign wallet","children":{}},"/playground/blockchain/anchor-framework":{"label":"Anchor framework","children":{}},"/playground/blockchain/blockchain-bridge":{"label":"Blockchain Bridge","children":{}},"/playground/blockchain/nft-fractionalization":{"label":"NFT Fractionalization","children":{}},"/playground/blockchain/how-tokens-work-on-solana":{"label":"How Tokens Work on Solana","children":{}},"/playground/blockchain/liquidity-pool":{"label":"Liquidity pool","children":{}}}},"/playground/frontend":{"label":"Frontend","children":{"/playground/frontend/report":{"label":"Report","children":{"/playground/frontend/report/frontend-report-march-2025":{"label":"March 2025","children":{}},"/playground/frontend/report/frontend-report-february-2025":{"label":"February 2025","children":{}},"/playground/frontend/report/frontend-report-january-2025":{"label":"January 2025","children":{}},"/playground/frontend/report/frontend-report-second-half-of-november-2024":{"label":"Nov 2024 (Second Half)","children":{}},"/playground/frontend/report/frontend-report-first-half-of-november-2024":{"label":"Nov 2024 (First Half)","children":{}},"/playground/frontend/report/frontend-report-october-2024":{"label":"October 2024","children":{}},"/playground/frontend/report/frontend-report-september-2024":{"label":"September 2024","children":{}},"/playground/frontend/report/frontend-report-august-2024":{"label":"August 2024","children":{}},"/playground/frontend/report/frontend-report-july-2024":{"label":"July 2024","children":{}}}},"/playground/frontend/react":{"label":"React","children":{"/playground/frontend/react/code-splitting":{"label":"Code splitting","children":{}},"/playground/frontend/react/component-composition-patterns":{"label":"Component composition patterns","children":{}},"/playground/frontend/react/design-system-integration":{"label":"Design system integration","children":{}},"/playground/frontend/react/hook-architecture":{"label":"Hook architecture","children":{}},"/playground/frontend/react/rendering-strategies":{"label":"Rendering strategies","children":{}},"/playground/frontend/react/state-management-strategy":{"label":"State management strategy","children":{}},"/playground/frontend/react/testing-strategies":{"label":"Testing strategies","children":{}}}},"/playground/frontend/websockets":{"label":"WebSockets","children":{}},"/playground/frontend/from-markup-to-pixels-a-look-inside-the-dom-cssom-and-render-tree":{"label":"From Markup to Pixels - A look inside the DOM, CSSOM, and Render Tree","children":{}},"/playground/frontend/window-and-iframe-communication":{"label":"Window and iframe communication","children":{}},"/playground/frontend/applying-mock-service-worker-msw-for-seamless-web-development":{"label":"Applying Mock Service Worker (MSW) for Seamless Web Development","children":{}},"/playground/frontend/render-optimization-in-data-fetching-libraries":{"label":"Render optimization in data-fetching libraries","children":{}},"/playground/frontend/a-fragment-colocation-pattern-with-react-apollo-graphql":{"label":"A Fragment Colocation Pattern with React & Apollo GraphQL","children":{}},"/playground/frontend/scroll-driven-animations":{"label":"Scroll-driven animations","children":{}},"/playground/frontend/react-server-component":{"label":"React Server Components, NextJs Route and Data Fetching","children":{}},"/playground/frontend/url-formats-for-sharing-via-social-networks":{"label":"URL formats for sharing via social networks","children":{}},"/playground/frontend/shadow-dom":{"label":"Shadow DOM","children":{}},"/playground/frontend/retain-scroll-position-in-infinite-scroll":{"label":"Retain scroll position in infinite scroll","children":{}},"/playground/frontend/continuous-translation":{"label":"Continuous Translation","children":{}},"/playground/frontend/what-is-pnpm-compare-to-npmyarn":{"label":"What is PNPM Compare To NPM/Yarn","children":{}},"/playground/frontend/why-micro-frontend":{"label":"Why Micro Frontend","children":{}},"/playground/frontend/why-we-chose-our-tech-stack-accelerating-development-with-a-robust-frontend-solution":{"label":"Why We Chose Our Tech Stack Accelerating Development With A Robust Frontend Solution","children":{}},"/playground/frontend/tackling-server-state-complexity-in-frontend-development":{"label":"Tackling Server State complexity in Frontend Development","children":{}},"/playground/frontend/variable-fonts":{"label":"Variable Fonts","children":{}},"/playground/frontend/when-should-we-use-usereducer-instead-of-usestate":{"label":"When should we use useReducer instead of useState?","children":{}},"/playground/frontend/preserving-and-resetting-state-in-react":{"label":"Preserving and Resetting state in React","children":{}},"/playground/frontend/mixpanel":{"label":"Mixpanel","children":{}},"/playground/frontend/validation-with-zod":{"label":"Validation with Zod","children":{}},"/playground/frontend/parse-dont-validate-in-typescript":{"label":"Parse, don't validate in TypeScript","children":{}},"/playground/frontend/webassembly":{"label":"Webassembly","children":{}},"/playground/frontend/singleton-design-pattern-in-javascript":{"label":"Singleton Design Pattern in Javascript","children":{}},"/playground/frontend/an-introduction-to-atomic-css":{"label":"An Introduction to Atomic CSS","children":{}},"/playground/frontend/intro-to-indexeddb":{"label":"Intro to IndexedDB","children":{}},"/playground/frontend/the-fundamental-of-web-performance":{"label":"The fundamental of web performance","children":{}},"/playground/frontend/wai-aria":{"label":"WAI-ARIA","children":{}},"/playground/frontend/build-polymorphic-react-components-with-typescript":{"label":"Build polymorphic React components with Typescript","children":{}},"/playground/frontend/threejs":{"label":"Threejs","children":{"/playground/frontend/threejs/cameras-in-threejs":{"label":"Cameras in ThreeJS","children":{}}}},"/playground/frontend/prevent-layout-thrashing":{"label":"Prevent Layout Thrashing","children":{}},"/playground/frontend/pure-css-parallax":{"label":"Pure CSS Parallax","children":{}},"/playground/frontend/css-container-queries":{"label":"CSS Container Queries","children":{}},"/playground/frontend/hsl-color":{"label":"HSL Color","children":{}},"/playground/frontend/mitigate-blocking-the-main-thread":{"label":"Mitigate blocking the main thread","children":{}},"/playground/frontend/css-in-js":{"label":"CSS in JS","children":{}},"/playground/frontend/dark-mode-flickers-a-white-background-for-a-fraction-of-a-second":{"label":"Dark mode flickers a white background for a fraction of a second","children":{}},"/playground/frontend/why-dom-manipulation-is-slow":{"label":"Why DOM manipulation is slow?","children":{}},"/playground/frontend/why-virtual-dom-is-fast":{"label":"Why Virtual DOM is fast?","children":{}},"/playground/frontend/vitejs-native-modules":{"label":"ViteJS native modules","children":{}},"/playground/frontend/javascript-modules":{"label":"JavaScript modules","children":{}},"/playground/frontend/atomic-design-pattern":{"label":"Atomic Design Pattern","children":{}},"/playground/frontend/focus-trap":{"label":"Focus trap","children":{}},"/playground/frontend/html-inert":{"label":"HTML inert","children":{}},"/playground/frontend/useeffect-double-calls-in-react-18":{"label":"useEffect double calls in React 18","children":{}},"/playground/frontend/react-18":{"label":"React 18","children":{}},"/playground/frontend/remix-versus-nextjs":{"label":"Remix Versus Nextjs","children":{}},"/playground/frontend/zaplib-post-mortem":{"label":"Zaplib post-mortem","children":{}},"/playground/frontend/parallelism-in-javascript":{"label":"Parallelism in JavaScript","children":{}},"/playground/frontend/mpa-spa-and-partial-hydration":{"label":"MPA, SPA and Partial Hydration","children":{}},"/playground/frontend/micro-frontends-microservices-for-frontend-development":{"label":"Micro Frontends Microservices For Frontend Development","children":{}},"/playground/frontend/using-correct-html-element-to-increase-website-accessibility":{"label":"Using Correct Html Element To Increase Website Accessibility","children":{}},"/playground/frontend/remove-unused-css-styles-from-bootstrap-using-purgecss":{"label":"Remove Unused CSS Styles From Bootstrap Using Purgecss","children":{}}}},"/playground/use-cases":{"label":"Use Cases","children":{"/playground/use-cases/service_monitoring_with_upptime":{"label":"Secure and transparent uptime monitoring with Upptime and GitHub secrets","children":{}},"/playground/use-cases/create-slides-with-overleaf":{"label":"Create slides with Overleaf and ChatGPT","children":{}},"/playground/use-cases/optimize-init-load-time-for-trading-platform":{"label":"Optimizing initial load time for a Trading Platform","children":{}},"/playground/use-cases/ai-interview-platform-mvp":{"label":"Building MVP for AI-driven interview platform","children":{}},"/playground/use-cases/optimizing-ui-for-effective-investment-experience":{"label":"Hedge Foundation - Optimizing UI for effective investment experience","children":{}},"/playground/use-cases/implement-binance-future-pnl-analysis-page":{"label":"Implement Binance Futures PNL analysis page by Phoenix LiveView","children":{}},"/playground/use-cases/migrate-normal-table-to-timescale-table":{"label":"Migrate regular tables into TimescaleDB hypertables to improve query performance","children":{}},"/playground/use-cases/bitcoin-alt-performance-tracking":{"label":"Tracking Bitcoin-Altcoin Performance Indicators in BTC Hedging Strategy","children":{}},"/playground/use-cases/database-hardening-for-trading-platform":{"label":"Database hardening for a trading platform","children":{}},"/playground/use-cases/data-archive-and-recovery":{"label":"Building a data archive and recovery strategy for high-volume trading system","children":{}},"/playground/use-cases/persist-history-using-data-snapshot-pattern":{"label":"Implementing data snapshot pattern to persist historical data","children":{}},"/playground/use-cases/ai-ruby-travel-assistant-chatbot":{"label":"AI-powered Ruby travel assistant","children":{}},"/playground/use-cases/building-chatbot-agent-for-project-management-tool":{"label":"Building chatbot agent to streamline project management","children":{}},"/playground/use-cases/building-data-pipeline-ogif-transcriber":{"label":"Building data pipeline for OGIF transcriber","children":{}},"/playground/use-cases/centralized-monitoring-setup-for-trading-platform":{"label":"Setup centralized monitoring system for Hedge Foundation trading platform","children":{}},"/playground/use-cases/binance-transfer-matching":{"label":"Building better Binance transfer tracking","children":{}},"/playground/use-cases/crypto-market-outperform-chart-rendering":{"label":"Visualizing crypto market performance: BTC-Alt dynamic indicators in Golang","children":{}},"/playground/use-cases/enhancing-cryptocurrency-transfer-logger":{"label":"Transfer mapping: enhancing loggers for better transparency","children":{}},"/playground/use-cases/reconstructing_trading_pnl_data_pipeline_approach":{"label":"Reconstructing historical trading PnL: a data pipeline approach","children":{}},"/playground/use-cases/ai-powered-monthly-project-reports":{"label":"Project reports system: a case study","children":{}}}},"/playground/ai":{"label":"AI","children":{"/playground/ai/securing-your-remote-mcp-servers":{"label":"Securing your remote MCP servers","children":{}},"/playground/ai/tool-level-security-for-remote-mcp-servers":{"label":"Tool-Level Security for Remote MCP Servers","children":{}},"/playground/ai/model-context-protocol":{"label":"Intro to Model Context Protocol","children":{}},"/playground/ai/building-llm-system":{"label":"Building LLM System","children":{"/playground/ai/building-llm-system/quantization-in-llm":{"label":"Quantization for large language models","children":{}},"/playground/ai/building-llm-system/graphrag":{"label":"GraphRAG - Building a knowledge graph for RAG system","children":{}},"/playground/ai/building-llm-system/guardrails-in-llm":{"label":"Guardrails in llm","children":{}},"/playground/ai/building-llm-system/react-in-llm":{"label":"ReAct(Reason + Act) in LLM","children":{}},"/playground/ai/building-llm-system/rewoo-in-llm":{"label":"ReWOO: Reasoning without observation - A deeper look","children":{}},"/playground/ai/building-llm-system/model-selection":{"label":"Model selection","children":{}},"/playground/ai/building-llm-system/logs-pillar":{"label":"Logging","children":{}},"/playground/ai/building-llm-system/metric-pillar":{"label":"Metrics","children":{}},"/playground/ai/building-llm-system/observability-in-ai-platforms":{"label":"Observability in AI platforms","children":{}},"/playground/ai/building-llm-system/trace-pillar":{"label":"Tracing","children":{}},"/playground/ai/building-llm-system/intent-classification-by-llm":{"label":"Intent classification by LLM","children":{}},"/playground/ai/building-llm-system/llm-as-a-judge":{"label":"LLM as a judge","children":{}},"/playground/ai/building-llm-system/use-cases-for-llm-applications":{"label":"Use cases for LLM applications","children":{}},"/playground/ai/building-llm-system/the-rise-of-ai-applications-with-llm":{"label":"The rise of AI applications with LLM","children":{}},"/playground/ai/building-llm-system/evaluation-guideline-for-llm-application":{"label":"Evaluation guidelines for LLM applications","children":{}},"/playground/ai/building-llm-system/prevent-prompt-injection":{"label":"Prevent prompt injection","children":{}},"/playground/ai/building-llm-system/building-llm-system":{"label":"§ Building LLM system","children":{}},"/playground/ai/building-llm-system/multi-agent-collaboration-for-task-completion":{"label":"Multi-agent collaboration for task completion","children":{}},"/playground/ai/building-llm-system/multimodal-in-rag":{"label":"Multimodal in rag","children":{}}}},"/playground/ai/digest":{"label":"Digest","children":{"/playground/ai/digest/ai-digest-02":{"label":"AI digest #2 New command Aider, OpenHands, Qwen2.5 Coder 32B, Predicted Output","children":{}},"/playground/ai/digest/ai-digest-01":{"label":"AI digest #1 Aider reasoning, OpenAI Realtime API, Cline - pre Claude-dev ","children":{}}}},"/playground/ai/copilots":{"label":"Copilots","children":{"/playground/ai/copilots/projects-operations":{"label":"Project Operations Copilots","children":{}},"/playground/ai/copilots/team-copilots":{"label":"Team Copilots","children":{}}}},"/playground/ai/text-to-mongodb":{"label":"Natural Language to Database Queries: Text-to-MongoDB","children":{}},"/playground/ai/use-cases":{"label":"Use Cases","children":{"/playground/ai/use-cases/salesforce":{"label":"Salesforce use cases","children":{}},"/playground/ai/use-cases/yelp":{"label":"Yelp use cases","children":{}}}},"/playground/ai/evaluate-chatbot-agent-by-simulated-user":{"label":"Evaluate Chatbot Agent by User Simulation","children":{}},"/playground/ai/journey-of-thought-prompting":{"label":"Journey of Thought Prompting: Harnessing AI to Craft Better Prompts","children":{}},"/playground/ai/llm-tracing-in-ai-system":{"label":"LLM tracing in AI system","children":{}},"/playground/ai/caching-with-rag-system":{"label":"Evaluating caching in RAG systems","children":{}},"/playground/ai/generative-ui":{"label":"What is Generative UI?","children":{}},"/playground/ai/re-ranking-in-rag":{"label":"Re-ranking in RAG","children":{}},"/playground/ai/function-calling":{"label":"Function calling in AI agents","children":{}},"/playground/ai/building-llm-powered-tools-with-dify":{"label":"Streamlining Internal Tool Development with Managed LLMOps: A Dify Case Study","children":{}},"/playground/ai/thumbs-up-and-thumbs-down-pattern":{"label":"Thumbs up and Thumbs down pattern","children":{}},"/playground/ai/supervisor-ai-agents":{"label":"Building Agent Supervisors to Generate Insights","children":{}},"/playground/ai/raptor-llm-retrieval":{"label":"RAPTOR: Tree-based Retrieval for Language Models","children":{}},"/playground/ai/proximal-policy-optimization":{"label":"Proximal Policy Optimization","children":{}},"/playground/ai/a-grand-unified-theory-of-the-ai-hype-cycle":{"label":"A Grand Unified Theory of the AI Hype Cycle","children":{}},"/playground/ai/developing-rapidly-with-generative-ai":{"label":"Developing rapidly with Generative AI","children":{}},"/playground/ai/rlhf-with-open-assistant":{"label":"RLHF with Open Assistant","children":{}},"/playground/ai/story-map-for-llms":{"label":"Story map for LLMs","children":{}},"/playground/ai/adversarial-prompting":{"label":"Adversarial Prompting in Prompt Engineering","children":{}},"/playground/ai/chunking-strategies-to-overcome-context-limitation-in-llm":{"label":"Chunking strategies to overcome context limitation in LLM","children":{}},"/playground/ai/llms-accuracy-self-refinement":{"label":"LLM's Accuracy - Self Refinement","children":{}},"/playground/ai/llm-query-caching":{"label":"Query Caching for Large Language Models","children":{}},"/playground/ai/reinforcement-learning":{"label":"Introduction to Reinforcement Learning and Its Application with LLMs","children":{}},"/playground/ai/foundation-model":{"label":"Foundation Models: The Latest Advancement in AI","children":{}},"/playground/ai/select-vector-database-for-llm":{"label":"Select Vector Database for LLM","children":{}},"/playground/ai/build-your-chatbot-with-open-source-large-language-models":{"label":"Build your chatbot with open source Large Language Models","children":{}},"/playground/ai/workaround-with-openais-token-limit-with-langchain":{"label":"Workaround with OpenAI's token limit with Langchain","children":{}},"/playground/ai/working-with-langchain-document-loaders":{"label":"Working with langchain document loaders","children":{}}}},"/playground/go":{"label":"Go","children":{"/playground/go/weekly":{"label":"Weekly","children":{"/playground/go/weekly/dec-13":{"label":"#24 Go 1.24 testing/synctest experiment for time and concurrency testing","children":{}},"/playground/go/weekly/dec-06":{"label":"#23 Draft Release Notes for Go 1.24 and weak pointers in Go","children":{}},"/playground/go/weekly/nov-29":{"label":"#22 GoMLX: ML in Go without Python","children":{}},"/playground/go/weekly/nov-22":{"label":"#21 Go sync.Once is Simple","children":{}},"/playground/go/weekly/nov-15":{"label":"#20 Go Turns 15","children":{}},"/playground/go/weekly/nov-08":{"label":"#19 Writing secure Go code","children":{}},"/playground/go/weekly/nov-01":{"label":"#18 Fuzz Testing Go HTTP Services","children":{}},"/playground/go/weekly/oct-25":{"label":"#17 Leveraging benchstat Projects in Go benchmark and Go Plan9 memo on 450% speeding up calculations","children":{}},"/playground/go/weekly/oct-18":{"label":"#16 Understand sync.Map","children":{}},"/playground/go/weekly/oct-11":{"label":"#15 Go embed and Reflect","children":{}},"/playground/go/weekly/oct-04":{"label":"#14 Compile-time eval & SQLite with wazero","children":{}},"/playground/go/weekly/sep-27":{"label":"#13 Compiler Quests and Vector Vexations","children":{}},"/playground/go/weekly/sep-20":{"label":"#12 CLI Tools for K8s, REST, and Terminals","children":{}},"/playground/go/weekly/sep-13":{"label":"#11 Actors, Frameworks, and the Future of Go","children":{}},"/playground/go/weekly/sep-06":{"label":"#10 Script, Telemetry","children":{}},"/playground/go/weekly/aug-30":{"label":"#9 TinyGo, SQLite vector search, and Permify","children":{}},"/playground/go/weekly/aug-23":{"label":"#8 GoNB, kubetrim, and GopherCon UK 2024","children":{}},"/playground/go/weekly/aug-16":{"label":"#7 Go 1.23, Websockets, and Structs","children":{}},"/playground/go/weekly/aug-09":{"label":"#6 Cogent Core, Russ Cox stepping down","children":{}},"/playground/go/weekly/aug-02":{"label":"#5 Go 1.23 features, Memory, Minecraft, and More","children":{}},"/playground/go/weekly/jul-26":{"label":"#4 Ethical Hacking, HTTP Requests, Mac App Development","children":{}},"/playground/go/weekly/jul-12":{"label":"#3 Generic Collections, Generics Constraints, AI Bot","children":{}},"/playground/go/weekly/jul-05":{"label":"#2 Go 1.23 Iterators","children":{}},"/playground/go/weekly/june-27":{"label":"#1 eBPF and PGO Optimization Techniques","children":{}}}},"/playground/go/extension-interface-pattern":{"label":"Go extension interface pattern","children":{}},"/playground/go/go-import":{"label":"Go import design: using git repo path","children":{}},"/playground/go/go-package":{"label":"Package first design","children":{}},"/playground/go/go-generics-type-safety":{"label":"How does Go achieve type safety when it enables generics?","children":{}},"/playground/go/go-for-enterprise":{"label":"Go For Enterprise","children":{"/playground/go/go-for-enterprise/who-using-golang-in-enterprise":{"label":"Who is using Go in enterprise?","children":{}},"/playground/go/go-for-enterprise/enterprise-standard-language":{"label":"Go as an Enterprise Standard Language","children":{}},"/playground/go/go-for-enterprise/how-to-use-go-in-enterprise":{"label":"How to use Go in the Enterprise","children":{}},"/playground/go/go-for-enterprise/when-to-use-golang-in-enterprise":{"label":"When to use Go in the Enterprise","children":{}},"/playground/go/go-for-enterprise/why-enterprise-chose-java":{"label":"Why Enterprise Chose Java","children":{}},"/playground/go/go-for-enterprise/why-go":{"label":"Why Go?","children":{}}}},"/playground/go/compute-union-2-finite-automata":{"label":"Efficient Union of Finite Automata in Golang: A Practical Approach","children":{}},"/playground/go/approaches-to-manage-concurrent-workloads-like-worker-pools-and-pipelines":{"label":"Approaches To Manage Concurrent Workloads Like Worker Pools And Pipelines","children":{}},"/playground/go/message-queues-and-streaming-platforms-eg-kafka-nats-rabbitmq":{"label":"Message Queues And Streaming Platforms Eg Kafka Nats Rabbitmq","children":{}},"/playground/go/unit-testing-best-practices-in-golang":{"label":"Unit Testing Best Practices In Golang","children":{}},"/playground/go/profiling-in-go":{"label":"Profiling in Go","children":{}},"/playground/go/go-in-software-engineering":{"label":"Go In Software Engineering","children":{}},"/playground/go/go-concurrency":{"label":"Go Concurrency","children":{}},"/playground/go/slice-and-array-in-golang":{"label":"Slice And Array In Golang","children":{}},"/playground/go/use-go-selenium-to-crawl-data":{"label":"Use Go Selenium To Crawl Data","children":{}},"/playground/go/connecting-vim-with-golang":{"label":"Connecting Vim With Golang","children":{}}}},"/playground/market-report":{"label":"Market Report","children":{"/playground/market-report/2024-october":{"label":"October 2024","children":{}},"/playground/market-report/2024-september":{"label":"September 2024","children":{}},"/playground/market-report/2024-august":{"label":"August 2024","children":{}},"/playground/market-report/2024-july":{"label":"July 2024","children":{}},"/playground/market-report/2024-may":{"label":"May 2024","children":{}},"/playground/market-report/2024-april":{"label":"April 2024","children":{}},"/playground/market-report/2024-march":{"label":"March 2024","children":{}},"/playground/market-report/2024-february":{"label":"February 2024","children":{}},"/playground/market-report/2024-january":{"label":"January 2024","children":{}},"/playground/market-report/2023-december":{"label":"December 2023","children":{}}}},"/playground/devbox":{"label":"Devbox","children":{"/playground/devbox/devbox":{"label":"§ Devbox","children":{}},"/playground/devbox/story":{"label":"Story","children":{"/playground/devbox/story/devbox-production-success-story":{"label":"Devbox in Production: Our Success Story","children":{}},"/playground/devbox/story/devbox-local-development-env":{"label":"Using Devbox to setup local development environment","children":{}},"/playground/devbox/story/devbox-nix-and-our-devbox-adoption":{"label":"The overview into Nix & how we use Devbox @ Dwarves","children":{}},"/playground/devbox/story/devbox-docker-adoption-and-challenges":{"label":"Our Docker adoption and its challenges","children":{}},"/playground/devbox/story/devbox-a-world-before-docker":{"label":"The world before Docker","children":{}}}},"/playground/devbox/guide":{"label":"Guide","children":{"/playground/devbox/guide/containerless":{"label":"Ditch the Containers: Go Containerless with Devbox","children":{}},"/playground/devbox/guide/devboxjson":{"label":"Devbox.json: Your Project's DNA","children":{}},"/playground/devbox/guide/run-your-own-shell":{"label":"Devbox Shell: Your Dev Environment, Your Rules","children":{}}}},"/playground/devbox/introduction":{"label":"Introduction","children":{"/playground/devbox/introduction/the-reason-for-being":{"label":"The reason for being","children":{}},"/playground/devbox/introduction/why-devbox-but-not-nix":{"label":"Devbox vs Nix: Why We Chose Simplicity","children":{}}}},"/playground/devbox/research":{"label":"Research","children":{"/playground/devbox/research/content-addressable-storage-in-docker":{"label":"Devbox vs Nix: Why We Chose Simplicity","children":{}},"/playground/devbox/research/fixed-output-derivation":{"label":"Fixed-output Derivation in Nix","children":{}},"/playground/devbox/research/nix-is-faster-than-docker-build":{"label":"Nix is Faster Than Docker Build","children":{}},"/playground/devbox/research/pinning-nixpkgs":{"label":"Pinning nixpkgs in Nix","children":{}},"/playground/devbox/research/shadow-copies":{"label":"Shadow Copies in Docker Builds","children":{}},"/playground/devbox/research/unstable-package-installation":{"label":"Unstable Package Installation in Docker","children":{}}}}}}}},"/careers":{"label":"Careers","children":{"/careers/archived":{"label":"Archived","children":{"/careers/archived/full-stack-engineer":{"label":"Full-Stack Engineer","children":{}},"/careers/archived/executive-assistant":{"label":"Executive Assistant","children":{}},"/careers/archived/technical-recruiter":{"label":"Technical Recruiter","children":{}},"/careers/archived/backend-engineer-go-elixir-rust":{"label":"Backend Engineer, Go/Elixir/Rust","children":{}},"/careers/archived/react-native-developer":{"label":"React Native Developer","children":{}},"/careers/archived/android-developer":{"label":"Mobile Engineer, Android","children":{}},"/careers/archived/community-executive":{"label":"Community Executive","children":{}},"/careers/archived/data-engineering":{"label":"Energy - Data Engineering","children":{}},"/careers/archived/devops":{"label":"DevOps Engineer - FinTech","children":{}},"/careers/archived/frontend-developer-junior":{"label":"Junior Frontend Developer","children":{}},"/careers/archived/frontend":{"label":"Frontend","children":{}},"/careers/archived/ios-developer":{"label":"iOS Developer - EnergyTech","children":{}},"/careers/archived/macos-developer":{"label":"Software Engineer, macOS","children":{}},"/careers/archived/product-designer-new-grad":{"label":"Product Designer, New Grad","children":{}},"/careers/archived/product-designer":{"label":"Product Designer","children":{}},"/careers/archived/qc-automation":{"label":"QC Engineer, Automation - Logistics","children":{}},"/careers/archived/qc-manual":{"label":"Fintech - QC Engineer, Manual","children":{}},"/careers/archived/reactjs-web-engineer":{"label":"Web Engineer, React.js","children":{}},"/careers/archived/visual-designer":{"label":"Visual Designer","children":{}},"/careers/archived/android":{"label":"Android","children":{}},"/careers/archived/golang":{"label":"Golang","children":{}},"/careers/archived/intern":{"label":"Intern","children":{}},"/careers/archived/ios":{"label":"iOS Developer","children":{}},"/careers/archived/qa":{"label":"QA Engineer","children":{}}}},"/careers/open-positions":{"label":"Open Positions","children":{"/careers/open-positions/business-development-manager":{"label":"Business Development","children":{}},"/careers/open-positions/growth":{"label":"Growth","children":{}}}},"/careers/life":{"label":"Life","children":{"/careers/life/dat-nguyen":{"label":"Dat Nguyen","children":{}},"/careers/life/software-design-group":{"label":"Software Design Group","children":{}},"/careers/life/hieu-vu":{"label":"Hieu Vu","children":{}},"/careers/life/nam-nguyen":{"label":"Nam Nguyen","children":{}},"/careers/life/an-tran":{"label":"An Tran","children":{}},"/careers/life/tom-nguyen":{"label":"Tom Nguyen","children":{}},"/careers/life/anh-tran":{"label":"Anh Tran","children":{}},"/careers/life/thanh-pham":{"label":"Thanh Pham","children":{}}}},"/careers/additional-info":{"label":"Additional Info","children":{"/careers/additional-info/culture-handbook":{"label":"Culture Handbook","children":{}},"/careers/additional-info/how-we-hire":{"label":"How we hire","children":{}},"/careers/additional-info/how-we-work":{"label":"How we work","children":{}},"/careers/additional-info/making-a-career":{"label":"Making a career","children":{}},"/careers/additional-info/the-manifesto":{"label":"The Manifesto","children":{}},"/careers/additional-info/what-we-stand-for":{"label":"What we stand for","children":{}},"/careers/additional-info/what-we-value":{"label":"What we value","children":{}},"/careers/additional-info/where-we-work":{"label":"Where we work","children":{}},"/careers/additional-info/life-at-dwarves":{"label":"Life at Dwarves","children":{}},"/careers/additional-info/benefits-and-perks":{"label":"Benefits And Perks","children":{}}}},"/careers/hiring":{"label":"Hiring","children":{"/careers/hiring/readme":{"label":"Careers","children":{}}}},"/careers/apprentice":{"label":"Apprentice","children":{"/careers/apprentice/batch-of-2022":{"label":"Batch of 2022","children":{}},"/careers/apprentice/2022-meet-ngoc-thanh-pham":{"label":"Meet the Mentors: Ngoc Thanh Pham","children":{}},"/careers/apprentice/2022-meet-tuan-dao":{"label":"Meet the Mentors: Tuan Dao","children":{}},"/careers/apprentice/apprentice":{"label":"Apprentice Program","children":{}}}}}},"/opensource":{"label":"Opensource","children":{"/opensource/readme":{"label":"Open Source","children":{}}}},"/playbook":{"label":"Playbook","children":{"/playbook/operations":{"label":"Operations","children":{"/playbook/operations/checklists":{"label":"Checklists","children":{"/playbook/operations/checklists/leave-and-request-checklist":{"label":"Leave Request","children":{}},"/playbook/operations/checklists/offboarding-checklist":{"label":"Offboarding","children":{}},"/playbook/operations/checklists/artifact-checklist":{"label":"Back up Artifact","children":{}},"/playbook/operations/checklists/project-archive":{"label":"Project Archive","children":{}},"/playbook/operations/checklists/project-case-study":{"label":"Project Case Study","children":{}},"/playbook/operations/checklists/project-communication":{"label":"Project Communication","children":{}},"/playbook/operations/checklists/project-handover":{"label":"Project Handover","children":{}},"/playbook/operations/checklists/project-initialization":{"label":"Project Initialization","children":{}},"/playbook/operations/checklists/assets-checklist":{"label":"Assets","children":{}},"/playbook/operations/checklists/billing-checklist":{"label":"Billing","children":{}},"/playbook/operations/checklists/candidate-checklist":{"label":"Candidate","children":{}},"/playbook/operations/checklists/consulting-contract-checklist":{"label":"Consulting Contract","children":{}},"/playbook/operations/checklists/hiring-checklist":{"label":"Hiring","children":{}},"/playbook/operations/checklists/onboarding-checklist":{"label":"Onboarding","children":{}},"/playbook/operations/checklists/unemployment-social-health-insurance":{"label":"Unemployment, Social, Health Insurance","children":{}},"/playbook/operations/checklists/vietnam-invoice-checklist":{"label":"Vietnam Invoice","children":{}}}},"/playbook/operations/how-to-conduct-delivery-reports":{"label":"How to conduct delivery reports","children":{}},"/playbook/operations/how-we-do-effective-planning-and-reporting":{"label":"How we do effective planning and reporting","children":{}},"/playbook/operations/project-schedule-delivery-guidelines":{"label":"Project Delivery Schedule and Guidelines","children":{}},"/playbook/operations/ogif":{"label":"OGIF - Oh God It's Friday","children":{}},"/playbook/operations/red-flags":{"label":"Red Flags","children":{}},"/playbook/operations/focus-on-software-delivery":{"label":"Focus On Software Delivery","children":{}},"/playbook/operations/are-you-helping":{"label":"Are You Helping","children":{}},"/playbook/operations/the-inner-circle":{"label":"The Inner Circle","children":{}},"/playbook/operations/mbti-type-intj":{"label":"MBTI Type INTJ","children":{}},"/playbook/operations/mbti-type-istp":{"label":"MBTI Type ISTP","children":{}},"/playbook/operations/mbti-type-estj":{"label":"MBTI Type ESTJ","children":{}},"/playbook/operations/mbti-type-istj":{"label":"MBTI Type ISTJ","children":{}},"/playbook/operations/applying-myersbriggs-type-indicator-in-hr":{"label":"Applying Myersbriggs Type Indicator In Hiring","children":{}},"/playbook/operations/the-four-preferences":{"label":"The Four Preferences","children":{}},"/playbook/operations/making-decision-as-a-team-member":{"label":"Making Decision As A Team Member","children":{}},"/playbook/operations/adjust-the-way-we-work-in-basecamp-style":{"label":"Adjust The Way We Work In Basecamp Style","children":{}},"/playbook/operations/beyond-the-title":{"label":"Beyond The Title","children":{}},"/playbook/operations/go-the-extra-mile":{"label":"Go The Extra Mile","children":{}},"/playbook/operations/the-dwarves-runs-by-ideas":{"label":"The Dwarves Runs By Ideas","children":{}},"/playbook/operations/a-tips-of-hiring-dont":{"label":"A Tips Of Hiring - Do & Don't","children":{}},"/playbook/operations/the-dwarves-culture-handbook":{"label":"The Dwarves Culture Handbook","children":{}},"/playbook/operations/how-people-matter-should-work":{"label":"How People Matter Should Work","children":{}},"/playbook/operations/delegation-and-believe-it-will-work":{"label":"Delegation And Believe It Will Work","children":{}},"/playbook/operations/constructive-feedback":{"label":"Constructive Feedback","children":{}},"/playbook/operations/transparency":{"label":"Transparency","children":{}},"/playbook/operations/bric-a-brac":{"label":"Bric A Brac","children":{}},"/playbook/operations/account":{"label":"Account","children":{}},"/playbook/operations/avoid-burn-out":{"label":"Avoid Burn Out","children":{}},"/playbook/operations/writing-management-objectives-in-smart":{"label":"Writing Management Objectives In Smart","children":{}},"/playbook/operations/building-a-solid-high-performing-team":{"label":"Building A Solid High Performing Team","children":{}},"/playbook/operations/hiring-for-operations-team":{"label":"Hiring For Operations Team","children":{}},"/playbook/operations/annual-bonus-for-sales":{"label":"Annual bonus for sales","children":{}},"/playbook/operations/bunk-license-check":{"label":"Bunk license check","children":{}},"/playbook/operations/collaboration-guidelines":{"label":"Collaboration Guidelines","children":{}},"/playbook/operations/compliance-check-process":{"label":"Compliance Check Process","children":{}},"/playbook/operations/email-template":{"label":"Email Template","children":{"/playbook/operations/email-template/assignment-invitation-2":{"label":"Assignment Inviation (Skip pre-assessment)","children":{}},"/playbook/operations/email-template/assignment-invitation":{"label":"Assignment Inviation","children":{}},"/playbook/operations/email-template/confirm-resume-date":{"label":"Confirm Employee's Resume Date Day","children":{}},"/playbook/operations/email-template/farewell":{"label":"Farewell Letter","children":{}},"/playbook/operations/email-template/follow-up-onboarding-items":{"label":"Follow-up Onboarding Items","children":{}},"/playbook/operations/email-template/hung-king-commemoration-day":{"label":"Hung King Commemoration Day","children":{}},"/playbook/operations/email-template/information-about-resource-change":{"label":"Inform about resource change","children":{}},"/playbook/operations/email-template/international-labour-day":{"label":"International Labour Day","children":{}},"/playbook/operations/email-template/interview-invitation":{"label":"Interview Invitation","children":{}},"/playbook/operations/email-template/milestone-sign-off":{"label":"Milestone sign-off","children":{}},"/playbook/operations/email-template/national-day":{"label":"National Day","children":{}},"/playbook/operations/email-template/new-year-day":{"label":"New Year Day","children":{}},"/playbook/operations/email-template/offer-letter":{"label":"Offer Letter","children":{}},"/playbook/operations/email-template/referral-bonus-confirmation-note":{"label":"Referral Bonus Confirmation Note","children":{}},"/playbook/operations/email-template/rejection-email":{"label":"Rejection","children":{}},"/playbook/operations/email-template/salary-increment":{"label":"Salary Increment Announcement","children":{}},"/playbook/operations/email-template/tet-holiday":{"label":"Tet Holiday","children":{}},"/playbook/operations/email-template/thank-you-letter":{"label":"Thank you letter","children":{}},"/playbook/operations/email-template/welcome-onboard":{"label":"Welcome Onboard","children":{}},"/playbook/operations/email-template/welcome-to-dwarves-update":{"label":"Welcome to Dwarves Updates","children":{}}}},"/playbook/operations/naming-convention":{"label":"Naming convention","children":{}},"/playbook/operations/setup-email-template":{"label":"Setup email template in Gmail","children":{}},"/playbook/operations/delegate-work-not-responsibility":{"label":"Delegate Work Not Responsibility","children":{}},"/playbook/operations/types-of-employees":{"label":"Types Of Employees","children":{}},"/playbook/operations/hiring-approach":{"label":"Hiring Approach","children":{}},"/playbook/operations/the-okr":{"label":"The OKR","children":{}},"/playbook/operations/our-metrics-for-performance-review":{"label":"Our Metrics For Performance Review","children":{}},"/playbook/operations/make-remote-working-works":{"label":"Make Remote Working Works","children":{}},"/playbook/operations/blocking-distraction":{"label":"Blocking Distraction","children":{}},"/playbook/operations/effective-meeting":{"label":"Effective Meeting","children":{}},"/playbook/operations/our-policy-for-remote-working":{"label":"Our Policy For Remote Working","children":{}}}},"/playbook/business":{"label":"Business","children":{"/playbook/business/pricing-model-bill-by-hours":{"label":"Pricing model: Bill by hours","children":{}},"/playbook/business/invoice":{"label":"Invoice","children":{}},"/playbook/business/nda":{"label":"NDA","children":{}},"/playbook/business/collaboration-guideline":{"label":"Collaboration Guideline","children":{}},"/playbook/business/df-workflow":{"label":"Dwarves Workflow","children":{}},"/playbook/business/fbsc":{"label":"FBSC","children":{}},"/playbook/business/how-to-work-with-clients":{"label":"How to work with clients","children":{}},"/playbook/business/service-feedbacks":{"label":"Service Feedbacks","children":{}},"/playbook/business/setting-the-budget":{"label":"Setting The Budget","children":{}},"/playbook/business/fixed-budget-scope-controlled":{"label":"Fixed Budget Scope Controlled","children":{}},"/playbook/business/the-adjacent-possible":{"label":"The Adjacent Possible","children":{}}}},"/playbook/engineering":{"label":"Engineering","children":{"/playbook/engineering/estimation-guidelines":{"label":"Estimation Guidelines","children":{}},"/playbook/engineering/presentation":{"label":"monitoring","children":{}},"/playbook/engineering/repo-icon":{"label":"release","children":{}}}},"/playbook/design":{"label":"Design","children":{"/playbook/design/design-system":{"label":"lean-canvas","children":{}},"/playbook/design/ia":{"label":"nda","children":{}},"/playbook/design/ix":{"label":"IA","children":{}},"/playbook/design/aarrr":{"label":"aarrr","children":{}},"/playbook/design/design-sprint":{"label":"Design Sprint","children":{}},"/playbook/design/lean-canvas":{"label":"Lean Canvas","children":{}},"/playbook/design/prototype":{"label":"Low-fidelity prototype: UI Design","children":{}},"/playbook/design/ui":{"label":"UI","children":{}},"/playbook/design/ux":{"label":"UX","children":{}},"/playbook/design/wireframe":{"label":"wireframe","children":{}}}}}},"/earn":{"label":"Earn","children":{"/earn/readme":{"label":"Open Bounties","children":{}}}},"/updates":{"label":"Updates","children":{"/updates/changelog":{"label":"Changelog","children":{"/updates/changelog/2025-whats-new-march":{"label":"What's New in March 2025","children":{}},"/updates/changelog/2025-whats-new-february":{"label":"What's New in February 2025","children":{}},"/updates/changelog/2024-in-review":{"label":"2024 In Review","children":{}},"/updates/changelog/2024-whats-new-december":{"label":"What's New in December 2024","children":{}},"/updates/changelog/2024-summit-building-bonds-our-way":{"label":"Summit 2024: Building bonds our way","children":{}},"/updates/changelog/2024-whats-new-november":{"label":"What's New in November 2024","children":{}},"/updates/changelog/2024-whats-new-oct":{"label":"What's New in October 2024","children":{}},"/updates/changelog/2024-whats-new-september":{"label":"What's New in September 2024","children":{}},"/updates/changelog/2024-navigating-changes":{"label":"Navigating changes","children":{}},"/updates/changelog/2024-whats-new-august":{"label":"What's New in August 2024","children":{}},"/updates/changelog/2024-whats-new-july":{"label":"What's New in July 2024","children":{}},"/updates/changelog/2024-semi-annual-review":{"label":"State of Dwarves: 2024 Semi-annual Review","children":{}},"/updates/changelog/2024-whats-new-june":{"label":"What's New in June 2024","children":{}},"/updates/changelog/2024-whats-new-may":{"label":"What's New in May 2024","children":{}},"/updates/changelog/2024-community-meet-up":{"label":"Dwarves’ 2nd community offline meet-up","children":{}},"/updates/changelog/2024-whats-new-april":{"label":"What's New in April 2024","children":{}},"/updates/changelog/2024-whats-new-march":{"label":"What's New in March 2024","children":{}},"/updates/changelog/2024-whats-new-february":{"label":"What's New in February 2024","children":{}},"/updates/changelog/2024-whats-new-january":{"label":"What's New in January 2024","children":{}},"/updates/changelog/2023-whats-new-december":{"label":"What's New in December 2023","children":{}},"/updates/changelog/readme":{"label":"Changelog","children":{}},"/updates/changelog/2023-whats-new-november":{"label":"What's New in November 2023","children":{}},"/updates/changelog/2023-whats-new-october":{"label":"What's New in October 2023","children":{}},"/updates/changelog/2023-happy":{"label":"Happy 2023","children":{}},"/updates/changelog/2022-dwarves-of-the-year":{"label":"Dwarves Of The Year 2022","children":{}},"/updates/changelog/2022-in-review":{"label":"2022 In Review","children":{}},"/updates/changelog/2022-summit-engineering-a-good-time":{"label":"Summit 2022: Engineering A Good Time","children":{}},"/updates/changelog/road-to-100":{"label":"Road To 100","children":{}},"/updates/changelog/2022-whats-new-may":{"label":"What's New in May 2022","children":{}},"/updates/changelog/2022-whats-new-january":{"label":"What's New in January 2022","children":{}},"/updates/changelog/2021-whats-new-december":{"label":"What's New in December 2021","children":{}},"/updates/changelog/2021-dwarves-of-the-year":{"label":"Dwarves Of The Year 2021","children":{}},"/updates/changelog/2021-whats-new-july":{"label":"What's New in July 2021","children":{}},"/updates/changelog/2020-in-review":{"label":"2020 In Review","children":{}},"/updates/changelog/2021-in-review":{"label":"2021 In Review","children":{}},"/updates/changelog/2019-in-review":{"label":"2019 In Review","children":{}},"/updates/changelog/2018-in-review":{"label":"2018 In Review","children":{}}}},"/updates/ogif":{"label":"OGIF","children":{"/updates/ogif/41-20250314":{"label":"#41 ICY-BTC, GitHub Bot, MCP-DB, Pocket Turing","children":{}},"/updates/ogif/28-20241018":{"label":"#28 Go sync.Map, AI UX, Yelp AI, LLM Patterns, Git Analysis","children":{}},"/updates/ogif/27-20241011":{"label":"#27 Go weekly, Frontend, AI UX, Finite Automata","children":{}},"/updates/ogif/26-20241004":{"label":"#26 Design insights, Go tools, Trading app, Chatbots, Essays","children":{}},"/updates/ogif/25-20240927":{"label":"#25 Team updates, Hybrid work, AI insights, Go weekly","children":{}},"/updates/ogif/24-20240920":{"label":"#24 Go weekly, AI workflows, Team AI demo, Figma-UI with Claude","children":{}},"/updates/ogif/23-20240913":{"label":"#23 Go weekly, FE report, Hybrid work, AI agents","children":{}},"/updates/ogif/22-20240906":{"label":"#22 Hybrid work, Tech report, Go weekly, AI demo","children":{}},"/updates/ogif/21-20240830":{"label":"#21 Community engagement, Go weekly, Journey of thought for prompt engineering","children":{}},"/updates/ogif/20-20240823":{"label":"#20 Go weekly, Dynamic objects, Devbox, LLM tracing, Cursor AI","children":{}},"/updates/ogif/19-20240821":{"label":"#19 Go weekly, UI design, File sharing, Dify AI","children":{}},"/updates/ogif/18-20240809":{"label":"#18 Go weekly, RAG, UI, FE updates","children":{}},"/updates/ogif/17-20240802":{"label":"#17 Community Call July, C4 Model, Interview Life in the US","children":{}},"/updates/ogif/16-20240726":{"label":"#16 Go weekly, Dune query, AI voice clone, RAG re-ranking","children":{}},"/updates/ogif/15-20240719":{"label":"#15 AI Supervisors, Local-first Software, Code Completion, Bot Commands","children":{}},"/updates/ogif/14-20240712":{"label":"#14 Generic Collections, Pricing Models, and OGIF Summarizer","children":{}},"/updates/ogif/13-20240705":{"label":"#13 Go Weekly updates, Radix Sort, Human Feedback Mechanism, and effective ChatGPT usage","children":{}},"/updates/ogif/12-20240628":{"label":"#12 June updates, Go Performance, eBPF, PGO, Multimodal RAG","children":{}},"/updates/ogif/11-20240621":{"label":"#11 Design patterns: template method & visitor, Radix sort, and weekly tech commentary","children":{}},"/updates/ogif/10-20240614":{"label":"#10 Behavioral Patterns and Map Content Organization","children":{}},"/updates/ogif/9-20240607":{"label":"#9 What's next for June and Behavior Design Patterns","children":{}},"/updates/ogif/7-20240517":{"label":"#7 Echelon EXPO, Programming patterns, and Moonlighting","children":{}},"/updates/ogif/6-20240510":{"label":"#6 Factory Pattern, Erlang State Machines, and Trading Process","children":{}},"/updates/ogif/5-20240503":{"label":"#5 Singapore Market Report, C4 Modelling, Memo's Nested Sidebar","children":{}},"/updates/ogif/4-20240426":{"label":"#4 DCA, Devbox","children":{}},"/updates/ogif/3-20240419":{"label":"#3 Generative AI, Tokenomics, and Finance Talks","children":{}},"/updates/ogif/2-20240412":{"label":"#2 Devbox as the new Docker, Security Standards, and Understanding Liquidity","children":{}},"/updates/ogif/1-20240405":{"label":"#1 Markdown Presentations, Research Pipeline, Screenshots How-to","children":{}},"/updates/ogif/readme":{"label":"OGIF - Oh God It's Friday","children":{}}}},"/updates/forward-engineering":{"label":"Forward Engineering","children":{"/updates/forward-engineering/2024-2025":{"label":20242025,"children":{}},"/updates/forward-engineering/2024-quarter-3":{"label":"Quarter 3 2024","children":{}},"/updates/forward-engineering/2023-november":{"label":"November 2023","children":{}},"/updates/forward-engineering/2023-october":{"label":"October 2023","children":{}},"/updates/forward-engineering/2023-august":{"label":"August 2023","children":{}},"/updates/forward-engineering/2023-june":{"label":"June 2023","children":{}},"/updates/forward-engineering/2023-may":{"label":"May 2023","children":{}},"/updates/forward-engineering/2023-march":{"label":"March 2023","children":{}},"/updates/forward-engineering/2023-december":{"label":"December 2023","children":{}},"/updates/forward-engineering/2022":{"label":2022,"children":{}},"/updates/forward-engineering/tech-radar-volume-03":{"label":"Tech Radar Volume 03","children":{}},"/updates/forward-engineering/tech-radar-volume-02":{"label":"Tech Radar Volume 02","children":{}},"/updates/forward-engineering/tech-radar-volume-01":{"label":"Tech Radar Volume 01","children":{}},"/updates/forward-engineering/tech-radar-the-introduction":{"label":"Tech Radar Introduction","children":{}}}},"/updates/digest":{"label":"Digest","children":{"/updates/digest/15-new-year-gathering":{"label":"#15 New year gathering","children":{}},"/updates/digest/14-back-to-the-office":{"label":"#14 Hybrid work harmony","children":{}},"/updates/digest/13-more-than-lines-of-code":{"label":"#13 More than lines of code","children":{}},"/updates/digest/12-summer-moments":{"label":"#12 Summer moments","children":{}},"/updates/digest/11-come-grow-with-us":{"label":"#11 Come grow with us","children":{}},"/updates/digest/10-from-lean-to-learner":{"label":"#10 From lean to learner","children":{}},"/updates/digest/9-a-little-more-speed-for-summer":{"label":"#9 A little more speed for summer","children":{}},"/updates/digest/8-then-came-the-last-days-of-may":{"label":"#8 Then came the last days of May","children":{}},"/updates/digest/7-a-journey-through-time":{"label":"#7 A journey through time","children":{}},"/updates/digest/6-stay-for-the-culture":{"label":"#6 Come for the conversation, stay for the culture","children":{}},"/updates/digest/5-delay-the-gratification":{"label":"#5 Endure the hardship, delay the gratification","children":{}},"/updates/digest/4-finding-your-authentic-tribe":{"label":"#4 Finding your authentic tribe","children":{}},"/updates/digest/3-we-all-start-somewhere":{"label":"#3 We all start somewhere","children":{}},"/updates/digest/2-walk-around-learn-around":{"label":"#2 Walk around learn around","children":{}},"/updates/digest/1-what-do-you-stand-for":{"label":"#1 What do you stand for?","children":{}},"/updates/digest/readme":{"label":"Digest","children":{}}}},"/updates/newsletter":{"label":"Newsletter","children":{"/updates/newsletter/knowledge-base":{"label":"Build your knowledge base","children":{}},"/updates/newsletter/dwarve-updates-ai-llm":{"label":"The Stage of AI and LLM at Dwarves","children":{}},"/updates/newsletter/readme":{"label":"_base","children":{}},"/updates/newsletter/growth-stages":{"label":"The Stage of Growth at Dwarves","children":{}},"/updates/newsletter/the-next-leading-chairs":{"label":"The Next Leading Chairs","children":{}},"/updates/newsletter/blockchain-and-data":{"label":"The future is blockchain and data","children":{}},"/updates/newsletter/hiring-stages":{"label":"The stages of hiring at Dwarves","children":{}},"/updates/newsletter/2021-in-review":{"label":"It's a wrap: 2021 in Review","children":{}},"/updates/newsletter/engineering-org-structure":{"label":"Engineering Organizational Structure","children":{}},"/updates/newsletter/path-to-growth":{"label":"The Path To Growth at Dwarves","children":{}},"/updates/newsletter/engineer-performance-review":{"label":"Engineer Performance Review","children":{}},"/updates/newsletter/project-compliance":{"label":"Project Compliance","children":{}},"/updates/newsletter/dalat-office":{"label":"Da Lat Office","children":{}},"/updates/newsletter/dwarves-updates":{"label":"Dwarves Updates","children":{}}}},"/updates/culture-test":{"label":"Culture Test","children":{}},"/updates/fund":{"label":"Fund","children":{"/updates/fund/dwarves-ventures-fund-1":{"label":"Dwarves Ventures Fund 1","children":{}},"/updates/fund/dwarves-ventures-fund-0":{"label":"Dwarves Ventures Fund 0","children":{}}}}}}}},"/tags":{"label":"Popular Tags","children":{"/tags/ai":{"label":"#ai","children":{},"count":58},"/tags/hiring":{"label":"#hiring","children":{},"count":61},"/tags/case-study":{"label":"#case-study","children":{},"count":29},"/tags/handbook":{"label":"#handbook","children":{},"count":46},"/tags/business":{"label":"#business","children":{},"count":10},"/tags/growth":{"label":"#growth","children":{},"count":2},"/tags/consulting":{"label":"#consulting","children":{},"count":24},"/tags/market-report":{"label":"#market-report","children":{},"count":34},"/tags/tech-report":{"label":"#tech-report","children":{},"count":15},"/tags/software-development":{"label":"#software-development","children":{},"count":1},"/tags/database-management":{"label":"#database-management","children":{},"count":1},"/tags/icy":{"label":"#icy","children":{},"count":14},"/tags/career":{"label":"#career","children":{},"count":44},"/tags/full-stack":{"label":"#full-stack","children":{},"count":1},"/tags/engineer":{"label":"#engineer","children":{},"count":3},"/tags/ux-ui":{"label":"#ux-ui","children":{},"count":13},"/tags/product-design":{"label":"#product-design","children":{},"count":7},"/tags/report":{"label":"#report","children":{},"count":8},"/tags/checklist":{"label":"#checklist","children":{},"count":17},"/tags/presentation":{"label":"#presentation","children":{},"count":1},"/tags/business-development":{"label":"#business-development","children":{},"count":1},"/tags/database":{"label":"#database","children":{},"count":8},"/tags/sql":{"label":"#sql","children":{},"count":4},"/tags/data-modeling":{"label":"#data-modeling","children":{},"count":1},"/tags/data-engineering":{"label":"#data-engineering","children":{},"count":4},"/tags/system-design":{"label":"#system-design","children":{},"count":2},"/tags/architecture":{"label":"#architecture","children":{},"count":4},"/tags/etl":{"label":"#etl","children":{},"count":3},"/tags/automata":{"label":"#automata","children":{},"count":1},"/tags/fintech":{"label":"#fintech","children":{},"count":16},"/tags/mobile":{"label":"#mobile","children":{},"count":1},"/tags/wala":{"label":"#wala","children":{},"count":3},"/tags/fnb":{"label":"#fnb","children":{},"count":2},"/tags/film":{"label":"#film","children":{},"count":1},"/tags/go":{"label":"#go","children":{},"count":5},"/tags/error":{"label":"#error","children":{},"count":1},"/tags/open-source":{"label":"#open-source","children":{},"count":3},"/tags/community":{"label":"#community","children":{},"count":42},"/tags/startup":{"label":"#startup","children":{},"count":9},"/tags/shares":{"label":"#shares","children":{},"count":1},"/tags/founder":{"label":"#founder","children":{},"count":1},"/tags/entertainment":{"label":"#entertainment","children":{},"count":1},"/tags/life-at-dwarves":{"label":"#life-at-dwarves","children":{},"count":8},"/tags/hybrid-working":{"label":"#hybrid-working","children":{},"count":3},"/tags/guide":{"label":"#guide","children":{},"count":11},"/tags/security":{"label":"#security","children":{},"count":10},"/tags/reward":{"label":"#reward","children":{},"count":3},"/tags/team":{"label":"#team","children":{},"count":47},"/tags/design":{"label":"#design","children":{},"count":31},"/tags/ux":{"label":"#ux","children":{},"count":2},"/tags/directory-structure":{"label":"#directory-structure","children":{},"count":2},"/tags/file-management":{"label":"#file-management","children":{},"count":2},"/tags/file-system":{"label":"#file-system","children":{},"count":2},"/tags/permissions":{"label":"#permissions","children":{},"count":1},"/tags/database-modelling":{"label":"#database-modelling","children":{},"count":1},"/tags/nda":{"label":"#nda","children":{},"count":1},"/tags/compliance":{"label":"#compliance","children":{},"count":2},"/tags/people":{"label":"#people","children":{},"count":27},"/tags/operations":{"label":"#operations","children":{},"count":78},"/tags/llm":{"label":"#llm","children":{},"count":76},"/tags/rag":{"label":"#rag","children":{},"count":5},"/tags/search":{"label":"#search","children":{},"count":1},"/tags/evaluation":{"label":"#evaluation","children":{},"count":3},"/tags/delivery":{"label":"#delivery","children":{},"count":3},"/tags/reporting":{"label":"#reporting","children":{},"count":1},"/tags/project":{"label":"#project","children":{},"count":16},"/tags/billbyhours":{"label":"#billbyhours","children":{},"count":1},"/tags/careers":{"label":"#careers","children":{},"count":2},"/tags/engineering":{"label":"#engineering","children":{},"count":64},"/tags/subscription":{"label":"#subscription","children":{},"count":1},"/tags/pricing":{"label":"#pricing","children":{},"count":1},"/tags/product":{"label":"#product","children":{},"count":1},"/tags/blockchain":{"label":"#blockchain","children":{},"count":50},"/tags/evm":{"label":"#evm","children":{},"count":5},"/tags/foundry":{"label":"#foundry","children":{},"count":2},"/tags/search-engine":{"label":"#search-engine","children":{},"count":1},"/tags/duckdb":{"label":"#duckdb","children":{},"count":3},"/tags/transformers.js":{"label":"#transformers.js","children":{},"count":1},"/tags/hybrid-search":{"label":"#hybrid-search","children":{},"count":1},"/tags/erlang":{"label":"#erlang","children":{},"count":1},"/tags/elixir":{"label":"#elixir","children":{},"count":5},"/tags/fsm":{"label":"#fsm","children":{},"count":1},"/tags/design-pattern":{"label":"#design-pattern","children":{},"count":9},"/tags/gang-of-four":{"label":"#gang-of-four","children":{},"count":9},"/tags/observer-pattern":{"label":"#observer-pattern","children":{},"count":1},"/tags/behavior-pattern":{"label":"#behavior-pattern","children":{},"count":2},"/tags/visitor-design-pattern":{"label":"#visitor-design-pattern","children":{},"count":1},"/tags/strategy-design-pattern":{"label":"#strategy-design-pattern","children":{},"count":1},"/tags/ogif":{"label":"#ogif","children":{},"count":29},"/tags/guidelines":{"label":"#guidelines","children":{},"count":3},"/tags/feedback":{"label":"#feedback","children":{},"count":2},"/tags/mechanism":{"label":"#mechanism","children":{},"count":1},"/tags/local-first":{"label":"#local-first","children":{},"count":1},"/tags/crdt":{"label":"#crdt","children":{},"count":2},"/tags/data-synchronization":{"label":"#data-synchronization","children":{},"count":1},"/tags/data-ownership":{"label":"#data-ownership","children":{},"count":1},"/tags/real-time-collaboration":{"label":"#real-time-collaboration","children":{},"count":1},"/tags/rust":{"label":"#rust","children":{},"count":10},"/tags/trait":{"label":"#trait","children":{},"count":1},"/tags/error-handling":{"label":"#error-handling","children":{},"count":1},"/tags/data-structure":{"label":"#data-structure","children":{},"count":1},"/tags/bloom-filter":{"label":"#bloom-filter","children":{},"count":1},"/tags/big-o":{"label":"#big-o","children":{},"count":1},"/tags/behavioral-pattern":{"label":"#behavioral-pattern","children":{},"count":1},"/tags/golang":{"label":"#golang","children":{},"count":44},"/tags/behavior-patterns":{"label":"#behavior-patterns","children":{},"count":2},"/tags/algorithms":{"label":"#algorithms","children":{},"count":1},"/tags/sorting":{"label":"#sorting","children":{},"count":1},"/tags/network":{"label":"#network","children":{},"count":2},"/tags/machine-learning":{"label":"#machine-learning","children":{},"count":2},"/tags/zettelkasten":{"label":"#zettelkasten","children":{},"count":1},"/tags/prompt":{"label":"#prompt","children":{},"count":1},"/tags/chatgpt":{"label":"#chatgpt","children":{},"count":1},"/tags/solana":{"label":"#solana","children":{},"count":7},"/tags/amm":{"label":"#amm","children":{},"count":1},"/tags/memo":{"label":"#memo","children":{},"count":14},"/tags/instructions":{"label":"#instructions","children":{},"count":10},"/tags/guideline":{"label":"#guideline","children":{},"count":15},"/tags/ops":{"label":"#ops","children":{},"count":2},"/tags/nft":{"label":"#nft","children":{},"count":3},"/tags/workflow":{"label":"#workflow","children":{},"count":5},"/tags/recording":{"label":"#recording","children":{},"count":1},"/tags/history":{"label":"#history","children":{},"count":1},"/tags/creational-design-pattern":{"label":"#creational-design-pattern","children":{},"count":1},"/tags/moc":{"label":"#moc","children":{},"count":3},"/tags/software-design":{"label":"#software-design","children":{},"count":2},"/tags/software-architecture":{"label":"#software-architecture","children":{},"count":3},"/tags/graphical-notation":{"label":"#graphical-notation","children":{},"count":2},"/tags/energy":{"label":"#energy","children":{},"count":1},"/tags/techecosystem":{"label":"#techecosystem","children":{},"count":1},"/tags/summit":{"label":"#summit","children":{},"count":4},"/tags/crypto":{"label":"#crypto","children":{},"count":1},"/tags/content":{"label":"#content","children":{},"count":6},"/tags/investment":{"label":"#investment","children":{},"count":1},"/tags/personal-finance":{"label":"#personal-finance","children":{},"count":1},"/tags/dfg":{"label":"#dfg","children":{},"count":6},"/tags/tutorial":{"label":"#tutorial","children":{},"count":7},"/tags/standardization":{"label":"#standardization","children":{},"count":1},"/tags/work-adoption":{"label":"#work-adoption","children":{},"count":1},"/tags/code of conduct":{"label":"#code of conduct","children":{},"count":1},"/tags/research":{"label":"#research","children":{},"count":3},"/tags/field-notes":{"label":"#field-notes","children":{},"count":1},"/tags/innovation":{"label":"#innovation","children":{},"count":2},"/tags/radar":{"label":"#radar","children":{},"count":10},"/tags/bounty":{"label":"#bounty","children":{},"count":4},"/tags/communications":{"label":"#communications","children":{},"count":3},"/tags/token":{"label":"#token","children":{},"count":2},"/tags/brain":{"label":"#brain","children":{},"count":1},"/tags/knowledge-base":{"label":"#knowledge-base","children":{},"count":1},"/tags/engineering/data":{"label":"#engineering/data","children":{},"count":5},"/tags/data-pipeline":{"label":"#data-pipeline","children":{},"count":1},"/tags/vector-database":{"label":"#vector-database","children":{},"count":4},"/tags/payment":{"label":"#payment","children":{},"count":2},"/tags/partners":{"label":"#partners","children":{},"count":1},"/tags/brainery":{"label":"#brainery","children":{},"count":2},"/tags/devops":{"label":"#devops","children":{},"count":5},"/tags/google-cloud":{"label":"#google-cloud","children":{},"count":1},"/tags/google-data-studio":{"label":"#google-data-studio","children":{},"count":1},"/tags/google-data-fusion":{"label":"#google-data-fusion","children":{},"count":1},"/tags/reliability":{"label":"#reliability","children":{},"count":2},"/tags/cdap":{"label":"#cdap","children":{},"count":1},"/tags/data":{"label":"#data","children":{},"count":14},"/tags/google-dataproc":{"label":"#google-dataproc","children":{},"count":1},"/tags/hadoop":{"label":"#hadoop","children":{},"count":2},"/tags/streaming":{"label":"#streaming","children":{},"count":1},"/tags/earn":{"label":"#earn","children":{},"count":2},"/tags/ecommerce":{"label":"#ecommerce","children":{},"count":2},"/tags/dropshipping":{"label":"#dropshipping","children":{},"count":1},"/tags/dwarves":{"label":"#dwarves","children":{},"count":23},"/tags/work":{"label":"#work","children":{},"count":18},"/tags/internal":{"label":"#internal","children":{},"count":11},"/tags/discussion":{"label":"#discussion","children":{},"count":6},"/tags/event":{"label":"#event","children":{},"count":7},"/tags/labs":{"label":"#labs","children":{},"count":28},"/tags/catchup":{"label":"#catchup","children":{},"count":5},"/tags/home":{"label":"#home","children":{},"count":2},"/tags/tauri":{"label":"#tauri","children":{},"count":1},"/tags/htmx":{"label":"#htmx","children":{},"count":2},"/tags/frontend":{"label":"#frontend","children":{},"count":68},"/tags/performance":{"label":"#performance","children":{},"count":37},"/tags/culture":{"label":"#culture","children":{},"count":10},"/tags/emplpoyee":{"label":"#emplpoyee","children":{},"count":1},"/tags/estimation":{"label":"#estimation","children":{},"count":1},"/tags/code-generation":{"label":"#code-generation","children":{},"count":1},"/tags/typesafe":{"label":"#typesafe","children":{},"count":1},"/tags/fullstack":{"label":"#fullstack","children":{},"count":2},"/tags/lifeatdwarves":{"label":"#lifeatdwarves","children":{},"count":1},"/tags/craftsmanship":{"label":"#craftsmanship","children":{},"count":1},"/tags/discord":{"label":"#discord","children":{},"count":36},"/tags/workshop":{"label":"#workshop","children":{},"count":1},"/tags/demo":{"label":"#demo","children":{},"count":1},"/tags/protocol":{"label":"#protocol","children":{},"count":2},"/tags/performance-review":{"label":"#performance-review","children":{},"count":2},"/tags/assessment":{"label":"#assessment","children":{},"count":1},"/tags/knowledge":{"label":"#knowledge","children":{},"count":2},"/tags/tech-radar":{"label":"#tech-radar","children":{},"count":1},"/tags/evaluating-tech":{"label":"#evaluating-tech","children":{},"count":1},"/tags/process":{"label":"#process","children":{},"count":9},"/tags/updates":{"label":"#updates","children":{},"count":41},"/tags/distributed-system":{"label":"#distributed-system","children":{},"count":1},"/tags/data-types":{"label":"#data-types","children":{},"count":1},"/tags/data-structures":{"label":"#data-structures","children":{},"count":2},"/tags/client":{"label":"#client","children":{},"count":6},"/tags/guidline":{"label":"#guidline","children":{},"count":1},"/tags/playbook":{"label":"#playbook","children":{},"count":3},"/tags/software":{"label":"#software","children":{},"count":11},"/tags/framework":{"label":"#framework","children":{},"count":6},"/tags/productivity":{"label":"#productivity","children":{},"count":7},"/tags/learning":{"label":"#learning","children":{},"count":4},"/tags/system design":{"label":"#system design","children":{},"count":1},"/tags/enterprise":{"label":"#enterprise","children":{},"count":10},"/tags/australia":{"label":"#australia","children":{},"count":1},"/tags/sargable-queries":{"label":"#sargable-queries","children":{},"count":1},"/tags/zookeeper":{"label":"#zookeeper","children":{},"count":1},"/tags/kafka":{"label":"#kafka","children":{},"count":1},"/tags/sequential-reads":{"label":"#sequential-reads","children":{},"count":1},"/tags/sequential-writes":{"label":"#sequential-writes","children":{},"count":1},"/tags/random-reads":{"label":"#random-reads","children":{},"count":1},"/tags/random-writes":{"label":"#random-writes","children":{},"count":1},"/tags/url-redirect":{"label":"#url-redirect","children":{},"count":1},"/tags/url-rewrite":{"label":"#url-rewrite","children":{},"count":1},"/tags/http":{"label":"#http","children":{},"count":1},"/tags/seo":{"label":"#seo","children":{},"count":1},"/tags/dx":{"label":"#dx","children":{},"count":1},"/tags/machine learning":{"label":"#machine learning","children":{},"count":1},"/tags/r&d":{"label":"#r&d","children":{},"count":1},"/tags/web":{"label":"#web","children":{},"count":9},"/tags/micro-frontend":{"label":"#micro-frontend","children":{},"count":3},"/tags/backend":{"label":"#backend","children":{},"count":4},"/tags/tool":{"label":"#tool","children":{},"count":3},"/tags/technique":{"label":"#technique","children":{},"count":9},"/tags/vietnam":{"label":"#vietnam","children":{},"count":1},"/tags/write-heavy":{"label":"#write-heavy","children":{},"count":1},"/tags/inventory-platform":{"label":"#inventory-platform","children":{},"count":1},"/tags/scalability":{"label":"#scalability","children":{},"count":1},"/tags/doordash":{"label":"#doordash","children":{},"count":1},"/tags/low-latency":{"label":"#low-latency","children":{},"count":1},"/tags/observability":{"label":"#observability","children":{},"count":5},"/tags/teamwork":{"label":"#teamwork","children":{},"count":2},"/tags/leadership":{"label":"#leadership","children":{},"count":4},"/tags/multi-column-index":{"label":"#multi-column-index","children":{},"count":1},"/tags/index":{"label":"#index","children":{},"count":1},"/tags/composite-index":{"label":"#composite-index","children":{},"count":1},"/tags/react":{"label":"#react","children":{},"count":15},"/tags/hooks":{"label":"#hooks","children":{},"count":2},"/tags/components":{"label":"#components","children":{},"count":1},"/tags/scrum":{"label":"#scrum","children":{},"count":2},"/tags/technicaldebt":{"label":"#technicaldebt","children":{},"count":1},"/tags/projectmanagement":{"label":"#projectmanagement","children":{},"count":1},"/tags/email":{"label":"#email","children":{},"count":22},"/tags/decoder":{"label":"#decoder","children":{},"count":1},"/tags/json":{"label":"#json","children":{},"count":1},"/tags/materialized-view":{"label":"#materialized-view","children":{},"count":1},"/tags/data-warehouse":{"label":"#data-warehouse","children":{},"count":1},"/tags/mapreduce":{"label":"#mapreduce","children":{},"count":1},"/tags/distributed":{"label":"#distributed","children":{},"count":3},"/tags/form":{"label":"#form","children":{},"count":1},"/tags/uilibraries":{"label":"#uilibraries","children":{},"count":1},"/tags/migrations":{"label":"#migrations","children":{},"count":1},"/tags/agile":{"label":"#agile","children":{},"count":6},"/tags/behavior-driven-development":{"label":"#behavior-driven-development","children":{},"count":1},"/tags/testing":{"label":"#testing","children":{},"count":4},"/tags/ubiquitous-language":{"label":"#ubiquitous-language","children":{},"count":1},"/tags/forward-proxy":{"label":"#forward-proxy","children":{},"count":1},"/tags/apprenticeship":{"label":"#apprenticeship","children":{},"count":4},"/tags/remote":{"label":"#remote","children":{},"count":12},"/tags/showcase":{"label":"#showcase","children":{},"count":1},"/tags/practice":{"label":"#practice","children":{},"count":7},"/tags/senior":{"label":"#senior","children":{},"count":1},"/tags/internship":{"label":"#internship","children":{},"count":4},"/tags/swap":{"label":"#swap","children":{},"count":2},"/tags/quant":{"label":"#quant","children":{},"count":1},"/tags/radio":{"label":"#radio","children":{},"count":3},"/tags/writing":{"label":"#writing","children":{},"count":1},"/tags/english":{"label":"#english","children":{},"count":1},"/tags/apprentice":{"label":"#apprentice","children":{},"count":1},"/tags/designer":{"label":"#designer","children":{},"count":1},"/tags/meeting":{"label":"#meeting","children":{},"count":4},"/tags/us":{"label":"#us","children":{},"count":4},"/tags/mbti":{"label":"#mbti","children":{},"count":6},"/tags/intj":{"label":"#intj","children":{},"count":1},"/tags/istp":{"label":"#istp","children":{},"count":1},"/tags/estj":{"label":"#estj","children":{},"count":1},"/tags/istj":{"label":"#istj","children":{},"count":1},"/tags/personalities":{"label":"#personalities","children":{},"count":1},"/tags/management":{"label":"#management","children":{},"count":4},"/tags/early-stage":{"label":"#early-stage","children":{},"count":3},"/tags/design-thinking":{"label":"#design-thinking","children":{},"count":2},"/tags/healthcare":{"label":"#healthcare","children":{},"count":1},"/tags/browser-extension":{"label":"#browser-extension","children":{},"count":2},"/tags/git":{"label":"#git","children":{},"count":2},"/tags/marketplace":{"label":"#marketplace","children":{},"count":2},"/tags/tips":{"label":"#tips","children":{},"count":10},"/tags/real-estate":{"label":"#real-estate","children":{},"count":1},"/tags/nocode":{"label":"#nocode","children":{},"count":1},"/tags/hospitality":{"label":"#hospitality","children":{},"count":1},"/tags/ride-hailing":{"label":"#ride-hailing","children":{},"count":1},"/tags/iot":{"label":"#iot","children":{},"count":1},"/tags/macos":{"label":"#macos","children":{},"count":3},"/tags/swift":{"label":"#swift","children":{},"count":7},"/tags/partnership":{"label":"#partnership","children":{},"count":1},"/tags/pm":{"label":"#pm","children":{},"count":4},"/tags/travel":{"label":"#travel","children":{},"count":1},"/tags/operation":{"label":"#operation","children":{},"count":7},"/tags/idea":{"label":"#idea","children":{},"count":1},"/tags/ventures":{"label":"#ventures","children":{},"count":3},"/tags/purpose":{"label":"#purpose","children":{},"count":2},"/tags/wasm":{"label":"#wasm","children":{},"count":2},"/tags/transparency":{"label":"#transparency","children":{},"count":1},"/tags/event-sourcing":{"label":"#event-sourcing","children":{},"count":1},"/tags/sdlc":{"label":"#sdlc","children":{},"count":1},"/tags/modeling":{"label":"#modeling","children":{},"count":2},"/tags/goal":{"label":"#goal","children":{},"count":2},"/tags/license":{"label":"#license","children":{},"count":1},"/tags/template":{"label":"#template","children":{},"count":20},"/tags/k8s":{"label":"#k8s","children":{},"count":1},"/tags/js":{"label":"#js","children":{},"count":2},"/tags/clojure":{"label":"#clojure","children":{},"count":1},"/tags/react.js":{"label":"#react.js","children":{},"count":2},"/tags/employee":{"label":"#employee","children":{},"count":2},"/tags/onboarding":{"label":"#onboarding","children":{},"count":1},"/tags/assets":{"label":"#assets","children":{},"count":1},"/tags/company":{"label":"#company","children":{},"count":1},"/tags/tooling":{"label":"#tooling","children":{},"count":9},"/tags/human-resource":{"label":"#human-resource","children":{},"count":1},"/tags/dcos":{"label":"#dcos","children":{},"count":5},"/tags/docker":{"label":"#docker","children":{},"count":11},"/tags/okr":{"label":"#okr","children":{},"count":1},"/tags/oss":{"label":"#oss","children":{},"count":1},"/tags/newsletter":{"label":"#newsletter","children":{},"count":45},"/tags/web3":{"label":"#web3","children":{},"count":4},"/tags/monitoring":{"label":"#monitoring","children":{},"count":2},"/tags/upptime":{"label":"#upptime","children":{},"count":1},"/tags/mcp":{"label":"#mcp","children":{},"count":3},"/tags/overleaf":{"label":"#overleaf","children":{},"count":1},"/tags/slide":{"label":"#slide","children":{},"count":1},"/tags/office-hours":{"label":"#office-hours","children":{},"count":28},"/tags/btc":{"label":"#btc","children":{},"count":1},"/tags/forward-engineering":{"label":"#forward-engineering","children":{},"count":14},"/tags/tech-community":{"label":"#tech-community","children":{},"count":1},"/tags/weekly-digest":{"label":"#weekly-digest","children":{},"count":15},"/tags/wrap-up":{"label":"#wrap-up","children":{},"count":7},"/tags/real-time":{"label":"#real-time","children":{},"count":1},"/tags/phoenix-live-view":{"label":"#phoenix-live-view","children":{},"count":1},"/tags/timescaledb":{"label":"#timescaledb","children":{},"count":1},"/tags/go-weekly":{"label":"#go-weekly","children":{},"count":24},"/tags/finance":{"label":"#finance","children":{},"count":1},"/tags/agents":{"label":"#agents","children":{},"count":4},"/tags/defi":{"label":"#defi","children":{},"count":2},"/tags/aider":{"label":"#aider","children":{},"count":2},"/tags/qwen2.5":{"label":"#qwen2.5","children":{},"count":1},"/tags/openhand":{"label":"#openhand","children":{},"count":1},"/tags/predicted output":{"label":"#predicted output","children":{},"count":1},"/tags/project-management":{"label":"#project-management","children":{},"count":1},"/tags/copilots":{"label":"#copilots","children":{},"count":2},"/tags/team-management":{"label":"#team-management","children":{},"count":1},"/tags/mongodb":{"label":"#mongodb","children":{},"count":1},"/tags/salesforce":{"label":"#salesforce","children":{},"count":1},"/tags/use cases":{"label":"#use cases","children":{},"count":2},"/tags/design-system":{"label":"#design-system","children":{},"count":1},"/tags/storybook":{"label":"#storybook","children":{},"count":1},"/tags/hook":{"label":"#hook","children":{},"count":1},"/tags/cline":{"label":"#cline","children":{},"count":1},"/tags/realtime api":{"label":"#realtime api","children":{},"count":1},"/tags/interface":{"label":"#interface","children":{},"count":1},"/tags/import":{"label":"#import","children":{},"count":1},"/tags/package":{"label":"#package","children":{},"count":1},"/tags/yelp":{"label":"#yelp","children":{},"count":1},"/tags/generics":{"label":"#generics","children":{},"count":2},"/tags/log":{"label":"#log","children":{},"count":1},"/tags/pillar":{"label":"#pillar","children":{},"count":3},"/tags/metric":{"label":"#metric","children":{},"count":1},"/tags/tracing":{"label":"#tracing","children":{},"count":1},"/tags/intent-classification":{"label":"#intent-classification","children":{},"count":1},"/tags/prompting":{"label":"#prompting","children":{},"count":1},"/tags/changelog":{"label":"#changelog","children":{},"count":1},"/tags/test":{"label":"#test","children":{},"count":1},"/tags/language":{"label":"#language","children":{},"count":5},"/tags/ai-agents":{"label":"#ai-agents","children":{},"count":2},"/tags/ai-evaluation":{"label":"#ai-evaluation","children":{},"count":1},"/tags/prompt-engineering":{"label":"#prompt-engineering","children":{},"count":4},"/tags/ai-integration":{"label":"#ai-integration","children":{},"count":1},"/tags/networking":{"label":"#networking","children":{},"count":7},"/tags/finite-automata":{"label":"#finite-automata","children":{},"count":1},"/tags/pattern-matching":{"label":"#pattern-matching","children":{},"count":1},"/tags/state-machines":{"label":"#state-machines","children":{},"count":1},"/tags/java":{"label":"#java","children":{},"count":1},"/tags/programming":{"label":"#programming","children":{},"count":1},"/tags/caching":{"label":"#caching","children":{},"count":1},"/tags/devbox":{"label":"#devbox","children":{},"count":17},"/tags/nix":{"label":"#nix","children":{},"count":9},"/tags/generative-ui":{"label":"#generative-ui","children":{},"count":1},"/tags/function-calling":{"label":"#function-calling","children":{},"count":1},"/tags/ton":{"label":"#ton","children":{},"count":2},"/tags/ai-powered":{"label":"#ai-powered","children":{},"count":1},"/tags/pattern":{"label":"#pattern","children":{},"count":1},"/tags/supervisor-architecture":{"label":"#supervisor-architecture","children":{},"count":1},"/tags/document-processing":{"label":"#document-processing","children":{},"count":1},"/tags/information-retrieval":{"label":"#information-retrieval","children":{},"count":1},"/tags/iterators":{"label":"#iterators","children":{},"count":1},"/tags/reinforcement-learning":{"label":"#reinforcement-learning","children":{},"count":3},"/tags/kernel-programing":{"label":"#kernel-programing","children":{},"count":1},"/tags/anchor":{"label":"#anchor","children":{},"count":2},"/tags/containerization":{"label":"#containerization","children":{},"count":4},"/tags/virtualization":{"label":"#virtualization","children":{},"count":4},"/tags/meet-up":{"label":"#meet-up","children":{},"count":4},"/tags/meetup":{"label":"#meetup","children":{},"count":2},"/tags/motivation":{"label":"#motivation","children":{},"count":1},"/tags/cybersecurity":{"label":"#cybersecurity","children":{},"count":2},"/tags/serverless":{"label":"#serverless","children":{},"count":1},"/tags/doty":{"label":"#doty","children":{},"count":5},"/tags/websocket":{"label":"#websocket","children":{},"count":1},"/tags/protocols":{"label":"#protocols","children":{},"count":1},"/tags/nextjs":{"label":"#nextjs","children":{},"count":2},"/tags/rendering":{"label":"#rendering","children":{},"count":1},"/tags/dom":{"label":"#dom","children":{},"count":3},"/tags/cssom":{"label":"#cssom","children":{},"count":1},"/tags/render-tree":{"label":"#render-tree","children":{},"count":1},"/tags/iframe":{"label":"#iframe","children":{},"count":1},"/tags/postmessage":{"label":"#postmessage","children":{},"count":1},"/tags/mock-service-worker":{"label":"#mock-service-worker","children":{},"count":1},"/tags/api-mocking":{"label":"#api-mocking","children":{},"count":1},"/tags/web-development-tool":{"label":"#web-development-tool","children":{},"count":1},"/tags/data-fetching":{"label":"#data-fetching","children":{},"count":1},"/tags/frontend,":{"label":"#frontend,","children":{},"count":1},"/tags/graphql":{"label":"#graphql","children":{},"count":1},"/tags/reactjs":{"label":"#reactjs","children":{},"count":2},"/tags/scroll-driven-animations":{"label":"#scroll-driven-animations","children":{},"count":1},"/tags/animations":{"label":"#animations","children":{},"count":1},"/tags/intersection-observer":{"label":"#intersection-observer","children":{},"count":1},"/tags/server-component":{"label":"#server-component","children":{},"count":1},"/tags/caching-data":{"label":"#caching-data","children":{},"count":1},"/tags/social-networks":{"label":"#social-networks","children":{},"count":1},"/tags/foundation-model":{"label":"#foundation-model","children":{},"count":1},"/tags/fine-tuning":{"label":"#fine-tuning","children":{},"count":1},"/tags/vector database":{"label":"#vector database","children":{},"count":1},"/tags/shadow-dom":{"label":"#shadow-dom","children":{},"count":1},"/tags/web-api":{"label":"#web-api","children":{},"count":1},"/tags/swr-infinite":{"label":"#swr-infinite","children":{},"count":1},"/tags/web-design":{"label":"#web-design","children":{},"count":1},"/tags/tuning-llm":{"label":"#tuning-llm","children":{},"count":2},"/tags/langchain":{"label":"#langchain","children":{},"count":1},"/tags/translation":{"label":"#translation","children":{},"count":1},"/tags/profiling":{"label":"#profiling","children":{},"count":1},"/tags/state-mangement":{"label":"#state-mangement","children":{},"count":1},"/tags/global-state-management":{"label":"#global-state-management","children":{},"count":1},"/tags/css":{"label":"#css","children":{},"count":5},"/tags/fonts":{"label":"#fonts","children":{},"count":1},"/tags/variable-fonts":{"label":"#variable-fonts","children":{},"count":1},"/tags/state-management":{"label":"#state-management","children":{},"count":2},"/tags/component":{"label":"#component","children":{},"count":1},"/tags/proof-of-knowledge":{"label":"#proof-of-knowledge","children":{},"count":1},"/tags/fronten":{"label":"#fronten","children":{},"count":1},"/tags/typescript":{"label":"#typescript","children":{},"count":4},"/tags/analytics-tools":{"label":"#analytics-tools","children":{},"count":1},"/tags/analytics-platform":{"label":"#analytics-platform","children":{},"count":1},"/tags/software engineer":{"label":"#software engineer","children":{},"count":1},"/tags/parsing":{"label":"#parsing","children":{},"count":1},"/tags/technology":{"label":"#technology","children":{},"count":5},"/tags/validation":{"label":"#validation","children":{},"count":1},"/tags/webassembly":{"label":"#webassembly","children":{},"count":1},"/tags/sandbox":{"label":"#sandbox","children":{},"count":1},"/tags/zk-rollup":{"label":"#zk-rollup","children":{},"count":2},"/tags/polygon":{"label":"#polygon","children":{},"count":1},"/tags/starknet":{"label":"#starknet","children":{},"count":1},"/tags/ethereum":{"label":"#ethereum","children":{},"count":2},"/tags/zero-knowledge":{"label":"#zero-knowledge","children":{},"count":1},"/tags/atomic-css":{"label":"#atomic-css","children":{},"count":1},"/tags/client-side":{"label":"#client-side","children":{},"count":1},"/tags/storage":{"label":"#storage","children":{},"count":1},"/tags/frontend/performance":{"label":"#frontend/performance","children":{},"count":2},"/tags/wai-aria":{"label":"#wai-aria","children":{},"count":1},"/tags/accessibility":{"label":"#accessibility","children":{},"count":4},"/tags/polymorphic-component":{"label":"#polymorphic-component","children":{},"count":1},"/tags/threejs":{"label":"#threejs","children":{},"count":1},"/tags/web-performance":{"label":"#web-performance","children":{},"count":2},"/tags/html":{"label":"#html","children":{},"count":4},"/tags/animation":{"label":"#animation","children":{},"count":1},"/tags/zk-proof":{"label":"#zk-proof","children":{},"count":1},"/tags/guides":{"label":"#guides","children":{},"count":1},"/tags/responsive-design":{"label":"#responsive-design","children":{},"count":1},"/tags/hsl":{"label":"#hsl","children":{},"count":1},"/tags/javascript":{"label":"#javascript","children":{},"count":4},"/tags/css-in-js":{"label":"#css-in-js","children":{},"count":1},"/tags/tip":{"label":"#tip","children":{},"count":1},"/tags/dark-mode":{"label":"#dark-mode","children":{},"count":1},"/tags/multisign-wallet":{"label":"#multisign-wallet","children":{},"count":1},"/tags/virtual-dom":{"label":"#virtual-dom","children":{},"count":1},"/tags/native-modules":{"label":"#native-modules","children":{},"count":1},"/tags/vitejs":{"label":"#vitejs","children":{},"count":1},"/tags/esm":{"label":"#esm","children":{},"count":1},"/tags/modules":{"label":"#modules","children":{},"count":1},"/tags/blockchain-bridge":{"label":"#blockchain-bridge","children":{},"count":1},"/tags/foundational-topics":{"label":"#foundational-topics","children":{},"count":5},"/tags/distributed-systems":{"label":"#distributed-systems","children":{},"count":1},"/tags/pos":{"label":"#pos","children":{},"count":1},"/tags/smart-contract":{"label":"#smart-contract","children":{},"count":1},"/tags/atomic-design":{"label":"#atomic-design","children":{},"count":1},"/tags/a11y":{"label":"#a11y","children":{},"count":1},"/tags/useeffect":{"label":"#useeffect","children":{},"count":1},"/tags/concurrency":{"label":"#concurrency","children":{},"count":2},"/tags/parallelism":{"label":"#parallelism","children":{},"count":1},"/tags/liquidity":{"label":"#liquidity","children":{},"count":1},"/tags/engineering/frontend":{"label":"#engineering/frontend","children":{},"count":1},"/tags/funding":{"label":"#funding","children":{},"count":2},"/tags/wfh":{"label":"#wfh","children":{},"count":1},"/tags/tech radar":{"label":"#tech radar","children":{},"count":1},"/tags/policy":{"label":"#policy","children":{},"count":1},"/tags/vim":{"label":"#vim","children":{},"count":1}}}},"slug":["playground","blockchain"],"childMemos":[{"content":"\nThis article features a short tutorial to start smart contract development on Solana using Anchor framework. Before you get started, we assume you already had the experience with:\n\n- Basic knowledge of Solana network\n- Concepts of: Account, program, instruction\n- Knowledge of Rust or C++ language\n- Install and launch local network Solana\n\n### What is Anchor?\n\nAnchor is a framework as well as a set of libraries that make developing applications on the Solana network faster and easier, However, you need to pay attention, the source code of the framework This has not been audited, please be careful when using. In addition, Anchor also provides a number of tools for developers.\n\n- Rust crates and eDSL for writing Solana programs\n- IDL specification\n- TypeScript package for generating clients from IDL\n- CLI command and workspace management for developing complete programs\n\n### Why do we use Anchor?\n\n- Easy to use library\n- The ingredients are clear\n- Many utilities for faster build, test and deploy\n- Having IDL generate client on javascript or Golang easy\n\n### Core components\n\nAn Anchor program consists of 3 main parts:\n\n1. **Program**: where the logic of the program is stored\n2. **Account struct**: where the account struct is defined, marked with `#[derive(Accounts)]`\n3. **declare_id**: Declare the address of the program, it uses this id for security checks as well as allowing other programs to access your key field\n\nLike other networks Solana also develops RPC, creating IDLs and client apps from IDL similar to ABI on Ethereum.\n\nIn the anchor you need to setup workspace for your project, example workspace for devnet\n\n```\n[provider]\ncluster = \"devnet\"\nwallet = \"~/.config/solana/id.json\"\n\n[programs.devnet]\nbasic_0 = \"2Fcoq3dKjpZiKko9Ho4NZguunJsd9AiGHheF8VHPnk7D\"\n\n[scripts]\ntest = \"yarn run mocha -t 1000000 tests/\"\n```\n\nIf you want to deploy testnet, you need to move cluster to testnet, view cluster list:\n\n```\nanchor cluster list\n```\n\n#### Install Anchor and create a program:\n\nStep 1. Install the library\n\n- Rust\n\n```curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\nsource $HOME/.cargo/env\nrustup component add rustfmt\n```\n\n- Solana:\n\n```\nsh -c \"$(curl -sSfL https://releases.solana.com/v1.9.1/install)\"\n```\n\n- Yarn:\n\n```\nnpm install -g yarn\n```\n\n- Anchor:\n\n```\nnpm i -g @project-serum/anchor-cli\n```\n\nCheck anchor install: anchor --version\n\nStep 2: Create a program\n\n```\nanchor init <new-project-name>\n```\n\nNote, you need to choose the appropriate Anchor version for the sample project or you may get an error when building because the old versions are no longer compatible. Let's take the example of creating a program that accepts a key-value pair start with declaring the program you declare in the `lib.rs` directory\n\n```\nuse anchor_lang::prelude::*;\n\ndeclare_id!(\"Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS\");\n\n#[program]\nmod basic_0 {\n    use super::*;\n    pub fn initialize(_ctx: Context<Initialize>) -> Result<()> {\n        Ok(())\n    }\n}\n\n#[derive(Accounts)]\npub struct Initialize {}\n```\n\nA smart contract program on Solana will have the following structure:\n\n```\nprocessor.rs\ninstruction.rs\nerrors.rs\nstate.rs\nlib.rs\n```\n\nNext we will run the program build command:\n\n```\nanchor build\n```\n\nIf you don't use the anchor, it will be equivalent to the command\n\n```\ncargo build-bpf\n```\n\n##### Note if you build error, you need to update anchor-lang to version 0.24.2\n\nIn addition, it will run additional commands to generate the IDL file\n\n```\nanchor idl parse -f program/src/lib.rs -o target/idl/basic_0.json.\n```\n\nSimilar to Ethereum, you will build a target directory, in addition it will generate a target/idl/basic_0.json file, this file is similar to the ABI.json file. Note that the idl file will also be used to generate the client source code on JS and Golang\n\nNext, we will deploy the program, notice that you need to select the environment to deploy via the command:\n\n```\nsolana config set --url localhost\n- devnet\nsolana config set --url devnet\n- testnet\nsolana config set --url testnet\n- Mainnet-beta\nsolana config set --url mainnet-beta\n```\n\nCommand to deploy to the network:\n\n```\nanchor deploy\n```\n\nAfter running this command, your program has been deployed to the blockchain. You can continue to create transactions with it by creating a client.\n\nbuild successfully, you will get a log that looks like this: To deploy this program run:\n\n```\n  $ solana program deploy /Volumes/WORKS/Dropbox/Blockchain/solana/SolTwit/target/deploy/sol_twit.so\n```\n\n#### Anchor CLI\n\n```\nUSAGE:\n    anchor <SUBCOMMAND>\n\nFLAGS:\n    -h, --help       Prints help information\n    -V, --version    Prints version information\n\nSUBCOMMANDS:\n    build      Builds the workspace\n    cluster    Cluster commands\n    deploy     Deploys each program in the workspace\n    expand     Expands the macros of a program or the workspace\n    help       Prints this message or the help of the given subcommand(s)\n    idl        Commands for interacting with interface definitions\n    init       Initializes a workspace\n    migrate    Runs the deploy migration script\n    new        Creates a new program\n    shell      Starts a node shell with an Anchor client setup according to the local config\n    test       Runs integration tests against a localnetwork\n    upgrade    Upgrades a single program. The configured wallet must be the upgrade authority\n    verify     Verifies the on-chain bytecode matches the locally compiled artifact. Run this\n               command inside a program subdirectory, i.e., in the dir containing the program's\n               Cargo.toml\n```\n\n#### Anchor Version Manager\n\nAnchor Version Manager (avm) is provided to manage multiple installations of the anchor-cli binary. This may be required to produce verifiable builds, or if you'd prefer to work with an alternate version. Like NVM, some command we should remember:\n\n```\nUSAGE:\n    avm <SUBCOMMAND>\n\nOPTIONS:\n    -h, --help       Print help information\n    -V, --version    Print version information\n\nSUBCOMMANDS:\n    help         Print this message or the help of the given subcommand(s)\n    install      Install a version of Anchor\n    list         List available versions of Anchor\n    uninstall    Uninstall a version of Anchor\n    use          Use a specific version of Anchor\n```\n\n#### Basic concepts to know before starting development\n\n- **Account**: A record in Solana Ledger to store information or a executable program, Save funds called lamports. expressed through an address by a key aka public key\n- **Account owner**: The address of the program that owns the account. Only the owner program can edit the account\n- **Block**: A block of data, continuously generated and covered by votes. Contains transaction information.\n- **BPF loader**: The Solana program that owns and loads BPF smart contract programs, allowing the program to interface with the runtime.\n- **keypair**: A public key and corresponding private key for accessing an account.\n- **lamport**: A fractional native token with the value of 0.000000001 sol.\n- **leader**: The role of a validator when it is appending entries to the ledger.\n- **leader schedule**: A sequence of validator public keys mapped to slots. The cluster uses the leader schedule to determine which validator is the leader at any moment in time.\n\n#### Example and template code\n\n- https://github.com/thanhpn/solana-anchor-template\n\n### Reference\n\n- https://docs.rs/anchor-lang/latest/anchor_lang/accounts/account/struct.Account.html\n- https://book.anchor-lang.com/introduction/what_is_anchor.html\n- https://www.rust-lang.org\n- https://docs.rs/solana/latest/solana/\n","title":"Anchor framework","short_title":"","description":"A comprehensive guide to getting started with smart contract development on Solana using the Anchor framework. This tutorial covers the basics of Anchor, its components, installation process, and provides step-by-step instructions for creating and deploying a simple program.","tags":["blockchain","solana","anchor","tutorial"],"pinned":false,"draft":false,"hiring":false,"authors":["thanhpn"],"date":"Fri Jul 01 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","filePath":"playground/blockchain/anchor-framework.md","slugArray":["playground","blockchain","anchor-framework"]},{"content":"\n![](assets/blockchain-bridge_blockruption-blockchain-300h.webp)\n\nWeb3 or Dapp has evolved into an ecosystem of L1 blockchains and L2 scaling solutions, each designed with unique tradeoffs and processing capabilities. As the number of blockchain protocols or applications increases rapidly, so does the need to move assets across chains. To meet this need, we need communication channels between chains that are bridges.\n\n## What is a bridge?\n\nBlockchain bridges work just like a physical bridge connecting two physical locations, a blockchain bridge connecting two blockchain ecosystems. Bridges facilitate communication between blockchains through the transfer of message and assets.\n\n![](assets/blockchain-bridge.webp)\n\n## Why do we need bridges?\n\nAll blockchains have their limits. In order for Ethereum to scale and keep up with demand, it needs to have rollouts. In addition, L1s such as Solana and Avalanche are designed differently to allow higher throughput but at the expense of decentralization.\n\nHowever, all blockchains operate in an isolated environment and have different rules and consensus mechanisms. This means that they cannot communicate natively and tokens cannot move freely between blockchains (Networks can only send messages in one direction so it will not be able to talk to the other network directly). Bridges born to connect blockchains, allowing for the trustless transfer of message and tokens between them. Bridges need an authentication mechanism, so there are different types of bridges.\n\n![](assets/blockchain-bridge_offchain-actors.webp)\n\n## Bridge use-case?\n\n- Transfer of assets and message across the chains\n- Lower transaction fees\n- Dapps on other blockchains\n- Explore the blockchain ecosystem, users access new platforms and take advantage of different chains.\n- Developers from different blockchain ecosystems to collaborate and build new platforms for users.\n- Own natural crypto assets\n\n![](assets/blockchain-bridge_bridge-use-cases.webp)\n\n## How does the bridge work?\n\nBasically a bridge works between 2 networks by listening for events arising from one network and forwarding information to the other network. So the basic problem is in the mechanism to ensure safety when forwarding information as well as message authentication and message monitoring.\n\n### What are bridge components?\n\n- Monitor: There is usually an actor, either a “oracle”, a “validator” or a “relayer”, that monitors the state on the source chain.\n- Message Passing/Forwarding: After an agent selects an event, it needs to pass information from the source chain to the destination chain.\n- Consensus: In some models, consensus is required between the parties monitoring the source chain to forward that information to the destination chain.\n- Signing: Agents need to cryptographically sign, individually or as part of a threshold signature scheme, the information sent to the destination chain.\n\n## Classification of Bridges\n\n![](assets/blockchain-bridge_classify-bridge.webp)\n\n### External links & validators\n\nThere is usually a group of validators that monitor the \"mailbox\" address on the source chain, by consensus perform an action on the destination chain. Content transfer is usually done by locking the message in the mailbox and generating an equivalent message on the destination thread. These are usually bonded validators with a separate token as the security model.\n\n![](assets/blockchain-bridge-external-links.webp)\n\n### Lightweight Client & Relays\n\nAgents monitor events on the source chain and generate cryptographic proof of past events that have been recorded on that chain. These proofs are then relayed, along with block headers, to contracts (i.e. \"clients\") on the target chain, which then verify that a given event was logged and executed. perform an action after that verification. There is a requirement for some actors to \"forward\" block headers and proofs. Although users can “self-forward” transactions, there is a realistic assumption that forwarders will continuously forward data. This is a relatively secure bridge design because it ensures trustless validating distribution without trusting intermediate entities, but it is also resource intensive because developers have to build build a new smart contract on each new destination chain that parses the proofs of state from the source chain and the confirmation itself is a lot of gas.\n\n![](assets/blockchain-bridge_lightweight-client-&-relays.webp)\n\n### Liquidity Network\n\nThis is similar to a peer-to-peer network where each node acts as a “router” containing a “store” of assets of both the source and destination chains. These networks typically leverage the security of the underlying blockchain; Through the use of locking and contention mechanisms, users are assured that routers cannot run away with user funds. As a result, liquidity networks like Connext may be a safer option for users who are transferring large amounts of value. Furthermore, this type of bridge may be most suitable for cross-chain asset transfers because the assets provided by the router are the origin of the destination chain and not a derivative, which are not fully interchangeable.\n\n## Depending on the design, each bridge will have its own characteristics\n\nSecurity: Assumptions about reliability and viability, tolerance to malicious actors, safety of user funds, and reflectiveness.\n\n- Speed: Latency to complete the transaction, as well as ensuring finality. There is usually a trade-off between speed and security.\n- Connectivity: Choice of target chain for both users and developers, as well as different difficulty levels to integrate one more target chain.\n- Efficient use of capital: Economics revolves around the capital needed to secure the system and the transaction costs to transfer assets.\n- Authenticity: Ability to transfer specific assets, more complex state, and/or make cross-chain contract calls.\n\n## Interoperability dilemma\n\n![](assets/blockchain-bridge_interoperability-dilemma.webp)\n\nSimilar to Trilemma in terms of scalability, there exists a Trilemma of interoperability in the Ethereum ecosystem. The Interop protocol can only have two of the following three properties:\n\n- Untrusted: has the same security as basic domains.\n- Scalability: can be supported on any domain.\n- Generalizability: capable of handling arbitrary cross-domain data.\n\n## Risks of using bridge\n\n- There is a bug in the smart contract.\n- The underlying blockchain is hacked or the block is rolledback: The data of a block is preserved in one chain but cannot be changed in the other chain.\n- Bridge moderators have malicious intent in a trusted bridge.\n- Hacked bridge: attack via internal consensus mechanism.\n- The user makes a mistake when manipulating.\n- Congested or hacked chains will affect bridging.\n\n![](assets/blockchain-bridge_lock,-mint-and-burn.webp)\n\nOne recent hack was Solana's Wormhole Bridge, where 120k wETH ($325 million USD) was stolen in the hack. And Vitalik himself must have a reputation for the lack of safety of the bridges.\n\n- [The multiple million exploit](https://decrypt.co/76117/thorchains-rune-token-slides-following-multi-million-exploit)\n- [Thorchain hacks](https://www.coindesk.com/markets/2021/07/23/blockchain-protocol-thorchain-suffers-8m-hack/).\n- [The PolyNetwork hack](https://edition.cnn.com/2021/08/11/tech/crypto-hack/index.html).\n\n## Case study\n\n- One of our product - [icrosschain.io](https://icrosschain.io/)\n- Wormhole\n- Thorchain\n\n## Reference\n\n- https://en.wikipedia.org/wiki/Ethereum\n- [What Are Blockchain Bridges And How Can We Classify Them?](https://blog.li.finance/what-are-blockchain-bridges-and-how-can-we-classify-them-560dc6ec05fa) Feb 18, 2021 - Arjun Chand\n- [Multichain Users Lose $1.4M Due to Bridge Bug](https://cryptobriefing.com/multichain-users-lose-1-4m-due-bridge-bug/)\n- [Vitalik Buterin Skeptical of Cross-Chain Bridges](https://cryptobriefing.com/vitalik-buterin-skeptical-of-cross-chain-bridges/)\n- [Latest DeFi bridge exploit results in $4.4M losses for Meter](https://cointelegraph.com/news/latest-defi-bridge-exploit-results-in-4-4m-losses-for-meter)\n","title":"Blockchain Bridge","short_title":"","description":"A comprehensive guide to understanding blockchain bridges, their types, and how they facilitate communication and asset transfers between different blockchain networks.","tags":["blockchain","blockchain-bridge","web3"],"pinned":false,"draft":false,"hiring":false,"authors":["thanhpn"],"date":"Tue Jun 21 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","filePath":"playground/blockchain/blockchain-bridge.md","slugArray":["playground","blockchain","blockchain-bridge"]},{"content":"![](assets/build_custom_ai_agent_with_elizaos_intro.webp)\n\nDeFAI stands for Decentralized Finance Artificial Intelligence, which combines the principles of decentralized finance (DeFi) with artificial intelligence (AI) to enhance financial services by leveraging AI's predictive analytics and automation features.\nWith ElizaOS, you can build and deploy a DeFAI Agent—an AI persona that interacts with users on online platforms, assists with transactions, analyzes market trends, and executes financial tasks in a decentralized and automated manner.\n\n\n## What is a ElizaOS?\nA comprehensive framework for building AI agents with persistent personalities across multiple platforms. ElizaOS provides the architecture, tools, and systems needed to create sophisticated agents that maintain consistent behavior, learn from interactions, and seamlessly integrate with a variety of services.\n\n## How ElizaOS works?\n![](assets/build_custom_ai_agent_with_elizaos_system.webp)\n\nWhen a user message is received, here's what happens behind the scenes:\n\n1. **Service reception**: Platform service (Discord, Telegram, etc.) receives the message\n2. **Runtime processing**: Agent runtime coordinates the response generation\n3. **Context building**: Providers supply relevant context (time, recent messages, knowledge)\n4. **Action selection**: The agent evaluates and selects appropriate actions\n5. **Response generation**: The chosen action generates a response\n6. **Learning & reflection**: Evaluators analyze the conversation for insights and learning\n7. **Memory storage**: New information is stored in the database\n8. **Response delivery**: The response is sent back through the service\n\n\n## Build Custom AI Agent With ElizaOS\n![](assets/build_custom_ai_agent_with_elizaos_flow.webp)\nTo build AI Agent with ElizaOS, we focus on four concepts:\n\n- **Characters**: JSON config files defining AI personality and behavior\n- **Agents**: Runtime components managing memory and executing behaviors\n- **Providers**: Data connectors injecting context into interactions\n- **Actions**: Executable behaviors that agents can perform\n\n### Characters\nCharacters are the personality profiles that define how an agent behaves and responds. Think of them as the \"script\" your AI follows to maintain consistent behavior.\n\nFor example, we created a battle-hardened DeFi veteran called \"YieldMaxoor\" who had survived multiple market crashes and could spot scams from a mile away. Here's a simplified version of the character configuration:\n```json\n{\n    \"name\": \"YieldMaxoor\",\n    \"clients\": [],\n    \"modelProvider\": \"openai\",\n    \"settings\": {\n        \"chains\": {\n            \"evm\": [\n                \"baseSepolia\"\n            ]\n        }\n    },\n    \"plugins\": [],\n    \"bio\": [\n        \"YieldMaxoor is a battle-tested DeFi degen who's been farming since the 2020 'DeFi Summer'\",\n        \"Speaks in crypto-native slang and always DYOR-pilled\",\n        \"Claims every new protocol is 'probably not a rug' and 'ser, the APY is real'\",\n        \"Frequently mentions their portfolio being 'down bad' but 'still bullish'\"\n    ],\n    \"lore\": [\n        \"Started yield farming during DeFi Summer 2020\",\n        \"Survived multiple bear markets and 'temporary' depeg events\",\n        \"Specialist in hunting the highest APYs across chains\",\n        \"Always emphasizes DYOR while aping first, reading docs later\"\n    ],\n    \"knowledge\": [\n        \"Yield farming strategies\",\n        \"DEX liquidity provision\",\n        \"Cross-chain bridges\",\n        \"MEV protection\",\n        \"Smart contract risk assessment\",\n        \"Gas optimization\",\n        \"Impermanent loss calculations\",\n        \"Tokenomics analysis\"\n    ],\n    \"messageExamples\": [\n        [\n            {\n                \"user\": \"{{user1}}\",\n                \"content\": {\n                    \"text\": \"What do you think about this new farm?\"\n                }\n            },\n            {\n                \"user\": \"YieldMaxoor\",\n                \"content\": {\n                    \"text\": \"ser, the APY is looking juicy af. audit's coming 'soon™' but team is based. probably not a rug. already threw in 2 ETH to test it out ngmi if you're not in this 🚜\",\n                    \"action\": \"ANALYZE_FARM\"\n                }\n            }\n        ],\n        [\n            {\n                \"user\": \"{{user1}}\",\n                \"content\": {\n                    \"text\": \"How do I avoid IL?\"\n                }\n            },\n            {\n                \"user\": \"YieldMaxoor\",\n                \"content\": {\n                    \"text\": \"fren, IL is just a temporary state of mind. but if you're ngmi with that, stick to stables farming or single-sided staking. this is financial advice because i'm already poor 😅\",\n                    \"action\": \"EXPLAIN_IL\"\n                }\n            }\n        ],\n        [\n            {\n                \"user\": \"{{user1}}\",\n                \"content\": {\n                    \"text\": \"Is this protocol safe?\"\n                }\n            },\n            {\n                \"user\": \"YieldMaxoor\",\n                \"content\": {\n                    \"text\": \"anon, i've been rugged so many times i can smell them coming. this one's based - doxxed team, good tvl, clean code. but always DYOR and don't put in more than you can lose ser 🤝\"\n                }\n            }\n        ]\n    ],\n    \"postExamples\": [\n        \"gm frens, just found a 4 digit APY farm. probably nothing 👀\",\n        \"ser, the yields are bussin fr fr no 🧢\",\n        \"another day another protocol to ape into. wagmi 🚜\"\n    ]\n}\n```\nThe character definition includes not just knowledge areas, but also speaking style and sample interactions that help the AI maintain consistency.\n\n### Agents\nAgents are the runtime components that bring your characters to life. They manage the actual execution of your AI's behaviors through the AgentRuntime class.\n\nThe main configuration requires a database adapter for persistence (e.g., mongodb, postgres, sqlite, etc.) , a model provider (e.g., openai, anthropic, etc.) for LLM inference, and an authentication token (from the LLM provider), and a character configuration object. Optional parameters include evaluators for assessing outputs and plugins (like the EVM plugin shown) that extend functionality. Here's an example:\n```typescript\n    return new AgentRuntime({\n        databaseAdapter: db,\n        token,\n        modelProvider: character.modelProvider,\n        evaluators: [],\n        character,\n        plugins: [\n            getSecret(character, \"EVM_PUBLIC_KEY\") ||\n            (getSecret(character, \"WALLET_PUBLIC_KEY\") &&\n                getSecret(character, \"WALLET_PUBLIC_KEY\")?.startsWith(\"0x\"))\n                ? evmPlugin\n                : null\n        ]\n})\n```\n\n### Actions\nActions are components that define how the agent responds to messages and interacts with them. They enable the agent to interact with external systems, modify behaviors, and perform tasks beyond simple message responses.\n\n```typescript\nconst customAction: Action = {\n    name: \"CUSTOM_ACTION\",\n    similes: [\"SIMILAR_ACTION\"],\n    description: \"Action purpose\",\n    validate: async (runtime: IAgentRuntime, message: Memory) => {\n        // Validation logic\n        return true;\n    },\n    handler: async (runtime: IAgentRuntime, message: Memory) => {\n        // Execute custom logic\n    },\n    examples: [],\n};\n```\n\n### Provider\nA module that injects dynamic context and real-time information into agent interactions. In example, provider is responsible for passing real-time information to the agent.\n\n```typescript\nconst timeProvider: Provider = {\n    get: async (_runtime: IAgentRuntime, _message: Memory, _state?: State) => {\n        const currentDate = new Date();\n\n        // Since the bot will communicate with users worldwide, it fetches UTC time.\n        const options = {\n            timeZone: \"UTC\",\n            dateStyle: \"full\" as const,\n            timeStyle: \"long\" as const,\n        };\n        const humanReadable = new Intl.DateTimeFormat(\"en-US\", options).format(\n            currentDate\n        );\n        return `The current date and time is ${humanReadable}. Please use this as your reference for any time-based operations or responses.`;\n    },\n};\n```\n\n## What we achieved?\nWe have developed an ICY Swap AI Agent that allows users to check their ICY balance and seamlessly exchange ICY for BTC by implementing a `degen` character and the `plugin-icy-swap` plugin, fully integrated with the ElizaOS ecosystem.\n\n![](assets/building_custom_ai_agent_with_elizaos_result.gif)\n\n[Source code](https://github.com/quanghuynguyen1902/eliza-icy-swap)\n\n## Reference\n- https://github.com/elizaOS/eliza-plugin-starter\n- https://www.quicknode.com/guides/ai/how-to-setup-an-ai-agent-with-eliza-ai16z-framework\n","title":"Build custom AI Agent with ElizaOS","short_title":"","description":"This guide shows how to build a custom AI Agent with ElizaOS.","tags":["icy","blockchain","AI"],"pinned":false,"draft":false,"hiring":false,"authors":["huymaius"],"date":"Wed Apr 02 2025 00:00:00 GMT+0000 (Coordinated Universal Time)","filePath":"playground/blockchain/build-custom-ai-agent-with-elizaos.md","slugArray":["playground","blockchain","build-custom-ai-agent-with-elizaos"]},{"content":"\nSwapping ICY tokens for Bitcoin means exchanging one type of digital currency for another across different blockchain systems. Since ICY tokens (on the Base chain) and Bitcoin (on its own blockchain) operate on incompatible networks, specific tools are needed to make this process work. Below, I’ll explain the tools, why a direct swap isn’t possible, how the swap happens, and how the price is determined.\n\n## Tools Used in the Swap\nSwap Contracts: Automated programs on the Base chain that securely manage the swap process.\nTreasury Wallets: Digital wallets that hold ICY tokens and Bitcoin during the exchange.\nIcy-Backend: A system that receives your swap request, tracks it, and triggers the Bitcoin transfer.\n\n## Why It’s Not a Direct Swap\nA direct swap isn’t possible because ICY tokens and Bitcoin use different blockchains. The Base chain is a modern system with advanced features, while Bitcoin’s blockchain is older and more limited. These differences prevent direct transfers, so tools like swap contracts and oracles are used to bridge the gap.\n\n## How the Swap Works\nSwapping ICY tokens for Bitcoin is a straightforward process that combines user actions, system automation, and secure on-chain technology. Here’s how it works in a concise, step-by-step breakdown:\n\n**Initiate the Swap**\n\nYou start by clicking \"Swap\" on the website. Enter the amount of ICY you want to trade and your Bitcoin address. The system saves your request by listen emitted events on the swap contract in a database to ensure it’s tracked.\n\n**ICY Tokens Are Burned**\n\nThe Swap Contract processes your request, permanently removing (or \"burning\") your ICY tokens from circulation. It then signals that the swap is underway.\n\n**Bitcoin Is Delivered**\n\nThe backend regularly checks events on the Swap Contract to detect your swap request, use request's information such as BTC amount, BTC address, and sends it to your address from the treasury wallet. If any issues arise, the system automatically retries using cronjobs to ensure delivery.\n\n![alt text](assets/cross-chain-transfers-implementing-a-token-swap-from-base-chain-to-bitcoin-1.png)\n\n## How the Price Is Set\n\nFor more details on how the price is set, please refer to the [How much is your ICY worth](https://memo.d.foundation/playbook/community/how-to-swap-icy-to-btc-copy/) guide.\n\n## Conclusion\nThis process uses specialized tools and steps to securely swap ICY tokens for Bitcoin, overcoming the challenges of their different blockchain systems while maintaining fairness in pricing.","title":"Implement a Token Swap from the Base chain to Bitcoin for cross-chain transactions","short_title":"","description":"This guide shows how to implement a token swap from the Base Chain to Bitcoin.","tags":["icy","btc","swap","blockchain"],"pinned":false,"draft":false,"hiring":false,"authors":["quang"],"date":"Fri Mar 07 2025 00:00:00 GMT+0000 (Coordinated Universal Time)","filePath":"playground/blockchain/cross-chain-transfers-implementing-a-token-swap-from-base-chain-to-bitcoin.md","slugArray":["playground","blockchain","cross-chain-transfers-implementing-a-token-swap-from-base-chain-to-bitcoin"]},{"content":"\n## Blocks\n\n![](assets/blocks_lzrylgx.webp)\n\n### 1. Define block in the blockchain\n\nA block is thus a permanent store of records that, once written, cannot be altered or removed. A Block has a limited size and transaction to avoid All Block are verified on the blockchain by all nodes and stored on the blockchain Block data are batches of transactions with a hash of the previous block in the chain. This links blocks together (in a chain) because hashes are cryptographically derived from the block data. This prevents fraud, because one change in any block in history would invalidate all the following blocks as all subsequent hashes would change and everyone running the blockchain would notice.\n\n![](assets/blocks_svihd1p.webp)\n\n### 2. Block data\n\n#### 2.1 Standard data\n\n- Block height – The block number and length of the blockchain (in blocks) on creation of the current block.\n- Timestamp – The time at which a miner mined the block.\n- Transactions – The number of transactions included within the block.\n- Miner – The address of the miner who mined the block.\n- Reward – The amount of ETH awarded to the miner for adding the block (standard 2ETH reward + any transaction fees of transactions included in the block).\n- Difficulty – The difficulty associated with mining the block.\n- Size – The size of the data within the block (measured in bytes).\n- Gas used – The total units of gas used by the transactions in the block.\n- Gas limit – The total gas limits set by the transactions in the block.\n- Extra data – Any extra data the miner has included in the block.\n\n#### 2.2 Advanced data\n\n- Hash - The cryptographic hash that represents the block header (the unique identifier of the block).\n- Parent hash – The hash of the block that came before the current block.\n- Sha3Uncles – The combined hash of all uncles for a given parent.\n- StateRoot – The root hash of Merkle trie which stores the entire state of the system.\n- Nonce – A value used to demonstrate proof-of-work for a block by the miner.\n\n#### 2.3 Uncle blocks\n\nUncle blocks are created when two miners create blocks at near-enough the same time – only one block can be validated across the nodes. They are not included but still receive a reward for the work.\n\nBlock explorers provide information about uncle blocks like:\n\n- An uncle block number.\n- A time they occurred.\n- The block height at which they were created.\n- Who mined it.\n- The ETH reward.\n\n![](assets/blocks_eqhpghw.webp)\n\n### 3. Block Time\n\nBlock time refers to the time it takes to mine a new block. In Ethereum, the average block time is between 12 to 14 seconds and is evaluated after each block. The expected block time is set as a constant at the protocol level and is used to protect the network's security when the miners add more computational power. The average block time gets compared with the expected block time, and if the average block time is higher, then the difficulty is decreased in the block header. If the average block time is smaller, then the difficulty in the block header will be increased.\n\nA new block can be rejected, please be careful with the new block, You need to wait for maximum node to verify this block before use.\n\n### 4. Block Size\n\nA final important note is that blocks themselves are bounded in size. Each block has a target size of 15 million gas but the size of blocks will increase or decrease in accordance with network demands, up until the block limit of 30 million gas (2x target block size). The total amount of gas extended by all transactions in the block must be less than the block gas limit. This is important because it ensures that blocks can’t be arbitrarily large. If blocks could be arbitrarily large, then less performant full nodes would stop being able to keep up with the network due to space and speed requirements.\n\n### 5. Mining's Relationship to Blocks\n\nMining is the term used for solving the number that is the nonce, the only number that can be changed in a block header. It is also the process the cryptocurrency's network uses if proof-of-work is used in the protocol.\n\n![](assets/blocks_qi5jtrd.png.webp)\n\nCryptocurrency mining is commonly thought to be a complex mathematical problem; it is actually a random number generated through hashing. Hashing is the process of encrypting information using the encryption method a cryptocurrency uses. For example, Bitcoin uses SHA256 for its encryption algorithm. For a miner to generate the \"winning\" number, the mining program must use SHA 256 to hash random numbers and place them into the nonce to see if it is a match.\n\n### 6 Gas in block\n\nGas is used to estimate the difficulty of all transactions in the block. Every function in a smart contract or transaction on blockchain will pay gas to process. To submit a transaction and avoid miners delaying your transaction forever, you need to pay enough gas Gas = Gas used \\* Gas ​​price\n\n#### Reference\n\nhttps://ethereum.org/en/developers/docs/blocks/\n","title":"Blocks","short_title":"","description":"This article provides an overview of blocks in blockchain technology, including their structure, types, and how they work.","tags":["blockchain","foundational-topics"],"pinned":false,"draft":false,"hiring":false,"authors":["thanhpn"],"date":"Thu Jun 16 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","filePath":"playground/blockchain/foundational-topics/blocks.md","slugArray":["playground","blockchain","foundational-topics","blocks"]},{"content":"\n![](assets/blockruption-blockchain-300h.png)\n\n## Distributed systems on blockchain\n\nAs defined on Wiki, distributed computing is a branch of computer science that studies distributed systems. A distributed system is a software system whose components are located on different computers, connected in a network. These computers work together as a single entity to accomplish a common task by exchanging messages. Distributed computing is decentralized parallel computing. The types of hardware, programming languages, operating systems, and other resources used can vary widely. It is similar to computer clustering with the main difference being the geographical distribution of resources.\n\nDistributed systems appear to be very common in practice. Most applications today, especially Internet applications, are implemented as Distributed systems. Deploying software, especially large systems, on multiple computing units (instead of using a single computer) has many benefits, such as:\n\n- Provide more resources when the system needs to handle a larger amount of work.\n- Using only one computer unit means the risk of software crashing (crash) if that machine has a problem. Using multiple machine units will allow you to continue operating the software even if problems occur.\n- When your system becomes complex and requires the combination of many different components, using DS allows you to break down a large system into many small units. Each unit can operate independently, can even be developed by different teams with different expertise.\n\nSystem users may be geographically dispersed across the globe. To ensure quality of service and limit latency, the machine system also needs to be distributed so that it can be as close to the user as possible.\n\n## Advantages of distributed systems:\n\n- Scalability: There are two types of scaling: horizontal scaling and vertical scaling:\n- Reliability: Reliability is the fault tolerance of the system which means that the system will continue to provide its service as soon as one or more components (software/hardware) of the system fail.\n- Availability: is the total time a system remains in normal operation for a specific period of time. A measure of availability is the percentage of time the system is up and running continuously for a period of time (usually 1 year).\n- Efficiency: The efficiency of a distributed system is high load and low latency. This means that a system that can handle many concurrent requests with low latency is a high-performance system.\n- Manageability: it is the ability to easily expand and maintain the system. In other words, it is the time to perform repair (repair) or maintain (maintain) when needed, the higher the time, the lower the availability.\n\n## Machine failure (node failure)\n\nEach physical computer, due to various reasons, can experience problems while in operation. These incidents are divided into several main categories:\n\n- Fail-stop: This is a type of problem that causes the process on the machine to stop working (stops computation as well as communication). The cause of this problem can be due to the machine crashing (software error, operating system error ...), hardware failure, or external causes (eg power failure). This is the most common type of problem, so when people talk about 'failure' without saying anything else, it's usually implied as this type of problem. Most of the algorithms developed in DS are intended to deal with this type of problem.\n- Fail-recover: Process may be down for a certain time, but then recovery works again. The cause of this type of problem can be due to the machine rebooting automatically for some reason. Often when talking about this type of failure, people assume that the machine has the ability to store information on the hard drive and recover this information after the failure occurs.\n- Byzantine failure: The problem that the computer does not work according to the requirements set forth. For example, the machine can send arbitrary messages, or change state arbitrarily, unlike what is programmed. This is the most annoying type of problem, which can happen when the system crashes for no apparent reason (e.g. RAM may be damaged causing bit-flip), or because the system is attacked by malicious actors. .\n\n## Network problems\n\n![](assets/How-Does-YugaByte-DB-Handle-Network-Partitions-and-Failover-blogpreview.png)\n\nA computer network is also a physical product and so problems can also occur. A common type of problem is the “network partitioning” problem, which is simulated by the figure above. This problem occurs when the transmission of one or more servers is cut off from the rest of the system, causing the system to be split into many parts that cannot communicate with each other. In fact, in data centers, a cluster of servers is usually connected by one or more switches. Failure of the switch port or wire can lead to one or more servers being disconnected, leading to the aforementioned partitioning situation.\n\n## Distributed systems in blockchain\n\n![](assets/distributed-systems_c7xyhh1.webp) Blockchain is a distributed ledger, which simply means that a ledger is spread across the network among all peers (nodes) in the network. Every node has a copy of the Blockchain and once a block reaches a certain number of approved transactions then a new block is formed\n\nAny computer can join the blockchain network and become a validator by connecting to the internet and launching applications. The difference is that to become a node on the network, a computer needs to meet certain requirements in terms of connection speed, storage speed, and storage space. For the current bitcoin network, due to too many miners participating in the operation, the network requires a huge amount of computing power, If you want to participate in the network you need to run the service through the mines to contribute strength.\n\n## Distributed software on blockchain\n\n\"The Ethereum Virtual Machine ([evm]()) is the runtime environment for transaction execution in Ethereum. It includes a stack, memory, gas balance (see below), program counter, and the persistent storage for all accounts (including contract code). When a transaction calls a contract's function, the arguments in the call are added to the stack and the EVM translates the contract's bytecode into stack operations. Stack items may be stored in memory or storage, and data from memory/storage may be added to the stack. The EVM is isolated from the other files and processes on the node's computer to ensure that for a given pre-transaction state and transaction, every node produces the same post-transaction state, thus enabling network consensus such as [pos](). The formal definition of the EVM is specified in the Ethereum Yellow Paper. EVMs have been implemented in C++, C#, Go, Haskell, Java, JavaScript, Python, Ruby, Rust, Elixir, Erlang, and soon WebAssembly.\"\n\nThe EVM's instruction set is Turing-complete. Popular uses of Ethereum have included the creation of fungible (ERC20) and non-fungible (ERC721) tokens with a variety of properties, crowdfunding (e.g. initial coin offerings), decentralized finance, decentralized exchanges, decentralized autonomous organizations (DAOs), games, prediction markets, and gambling.\n\n## How about scale for blockchain ?\n\nConcerning pure computing power, distributed computing offers easier scalability than centralized computing. It's relatively easy to add more machines to gain more computing power and reduce them when power needs are lower.\n\nHowever, blockchain has different scalability issues. In a blockchain, the number of transactions processed in a fixed period limits transaction speed. Therefore, the scalability issue is one of transaction speed. This scalability limitation is due to the need for the nodes in a blockchain to reach consensus on the transactions taking place. Therefore, while distributed computing itself offers a high degree of scalability, the game theory element of blockchain is generally what hampers scalability on transaction speeds.\n\nThis gives rise to a concept of difficulty, Once there are too many computers involved in processing the transaction. The network will change the difficulty to reduce contention. The computer will have to calculate with higher difficulty.\n\nThe downside is that performance issues arise because every node calculates all the smart contracts in real-time. As of January 2016, the Ethereum protocol could process about 25 transactions per second. In comparison, the Visa payment platform processes 45,000 payments per second. The next Ethereum 2.0 can serve more than 100.000 transactions\n\nToday we have a series of solutions to improve transaction speed on ethereum such as: Layer 2.\n\n## Reference\n\nhttps://en.wikipedia.org/wiki/Ethereum https://www.youtube.com/user/cbcolohan https://www.worldbank.org/en/topic/financialsector/brief/blockchain-dlt https://en.wikipedia.org/wiki/Distributed_ledger https://www.youtube.com/playlist?list=PLrw6a1wE39_tb2fErI4-WkMbsvGQk9_UB\n","title":"Distributed systems","short_title":"","description":"This article provides an overview of distributed systems in blockchain technology, including their definition, advantages, and how they work.","tags":["blockchain","foundational-topics","distributed-systems"],"pinned":false,"draft":false,"hiring":false,"authors":["thanhpn"],"date":"Thu Jun 16 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","filePath":"playground/blockchain/foundational-topics/distributed-systems.md","slugArray":["playground","blockchain","foundational-topics","distributed-systems"]},{"content":"\n## The Proof of Stake\n\nThe Proof of Stake consensus algorithm was introduced in 2011 on the Bitcointalk forum to solve the problems of the most popular algorithm in use – Proof of Work. . While both share the same goal of achieving consensus in the blockchain, the process to achieve the goal is quite different. where the nodes of a blockchain-based network must \"stake\" a sum of money or tokens (proving their identity) in order to participate in the verification of transactions in a block.\n\nJust like proof of work, proof of stake is designed to achieve distributed consensus on the valid order of transactions - i.e. reach agreement on a single shared version of history .\n\nPoS indicates that a person can mine or confirm block transactions according to the amount of coins he or she holds. This means that the more Bitcoins or tokens owned by a miner, the more mining power will be available.\n\nThe first cryptocurrency to adopt the PoS method was Peercoin. Nxt, Blackcoin and then ShadowCoin.\n\n![](assets/pos_jouvtnm.png.webp)\n\n## How proof of stake works\n\nThe Proof of Stake algorithm uses a pseudo-random election process to select a node as the validator of the next block, based on a combination of factors that may include staking age, random and the size of the button. Users who wish to participate in this process must lock a certain number of native tokens into the network as their stake. The size of the stake determines the chance for a node to be selected as a validator to generate the next block – the larger the stake, the greater the chance. In order for the process not only to prioritize the wealthiest nodes in the network, unique methods are added to the selection process. The two most commonly used methods are 'Random Block Selection' and 'Coin Age Selection'. In the Random Block Pick method, validators are selected by looking for nodes with the combination of the lowest hash value and the highest stake, and since the stake size is public, the validator node The next real thing can usually be predicted by other nodes. The Coin Age Selection method selects nodes based on how long their coins have been staked. Coin age is calculated by multiplying the number of days the coin is held by the number of coins staked. When a node forges a block, their coin age is reset to zero and they have to wait a certain amount of time before they can generate another block – this prevents large stake nodes from dominating the blockchain.\n\nEach native token that uses the Proof of Stake algorithm has its own set of rules and methods to create the best combination for them and their users.\n\nWhen a node is selected to generate the next block, it checks if the transactions in the block are valid, signs the block, and adds it to the blockchain. The node receives the transaction fees associated with the transactions in the block.\n\nIf a node wants to stop working as a blacksmith, its staked coins along with the rewards earned are released after a certain amount of time, giving the network time to verify that no fraudulent blocks were added by that node. into the blockchain.\n\nProof of stake was created as an alternative to proof of work (PoW), to solve the inherent problems of computation time and energy consumption when using PoW.\n\nPoS seeks to solve the problem by reducing mining power to the percentage of coins a miner spends to join the nodes. This way, instead of using energy to solve the PoW problem, PoS miners are limited to mining by a transaction rate that reflects the number of shares the miner owns. For example, a miner who owns 3% of Bitcoins could theoretically only mine 3% of those blocks.\n\n#### Compare PoW and PoS\n\n![](assets/pos_xiuwh4m.png.webp)\n\n## About security\n\nThe stake coin acts as a financial incentive for the forging node to not validate or generate fraudulent transactions. If the network detects a fraudulent transaction, the forging node will lose part of its stake and the right to participate in future block forging. So as long as the stake is higher than the reward, validators will lose more coins than they would have gained in case of a fraud attempt.\n\nTo effectively control the network and approve fraudulent transactions, a node would have to own a majority stake in the network, this is known as a 51% attack. Depending on the value of the native token, this would be very impractical as to gain control of the network you would need to have more than 51% of the circulating supply.\n\nIn 2017, Ethereum (ETH) started its full transition from PoW to PoS system and by 2022 it has successfully deployed on Ropsten testnet.\n\n## Advantages of PoS:\n\n- Fast transaction processing.\n- PoS does not harm the environment.\n- Not vulnerable to government attacks: don't need huge amounts of electricity.\n- Can be performed on smaller and weaker devices because there is no need to download the entire blockchain, and because it does not require a lot of computing power, it can be\n","title":"PoS","short_title":"","description":"This article provides an overview of Proof of Stake (PoS) in blockchain technology, including its definition, how it works, and its advantages.","tags":["blockchain","foundational-topics","PoS"],"pinned":false,"draft":false,"hiring":false,"authors":["thanhpn"],"date":"Thu Jun 16 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","filePath":"playground/blockchain/foundational-topics/pos.md","slugArray":["playground","blockchain","foundational-topics","pos"]},{"content":"\n## Smart contracts\n\nSmart contracts, also known as smart contracts, are computer programs that operate on the blockchain. Entities interacting with the contract do not need to know each other or trust each other.\n\n- The contract ensures that with the conditions of the contract satisfied, the contract will be executed\n- The logic of the contract can be verified. In other words, a smart contract is an intermediary, greatly reducing operating costs if you do it in real life: for example, if you buy a house, you must notarize it, then pay. money at the notary office, then go to the real estate office to do the account transfer procedure... it will need many steps involving people and intermediaries. If you make this purchase on a smart contract, you will simply create a home sale transaction and one buyer will create a purchase transaction, the other contract will perform the transfer of money, change ownership, related information, and sales history.\n\n## How smart contract work:\n\n- Developer distributes contract on the blockchain\n- The user signs the transaction and invokes the contract on the blockchain\n- Contract processes data and executes commands\n- The data after being executed will be saved on the blockchain\n\n## Structure of a smart contract:\n\n- Declare solidity version\n- Declare libraries, interfaces\n- Declare variables\n- Declare constructor\n- Processing instructions\n- Save state\n- Event/Log\n\n![](assets/Voie7xm.png)\n\nDeclare variable ![](assets/2ADeNxC.png)\n\nFunction/Instruction ![](assets/izkaluC.png)\n\nEvent/Log ![](assets/mTMfjdI.png)\n\n## Invoke another smart contract:\n\nCurrently, Ethereum there are many contracts such as tokens, NFT-ERC721, games, swaps, lending... To work directly with these contracts you can make calls directly from your application from javascript or go lang via ABI, ABI is an interface type similar to API specification file or description file. describe swagger. It defines data objects and callable functions. Or you can also call the interface of another contract in your contract for example:\n\n- Declare interface\n- Call command\n\n![](assets/ezVDghs.png)\n\n## The advantages of smart contracts:\n\n- Efficiency: Smart contracts promise to automate business processes at a corporate level. This reduces operating costs and saves resources, including the staff needed to oversee complex operations involving multiple companies.\n- Processing speed: Smart contracts help improve the processing speed of processes between many different companies and corporations.\n- Autonomy: Smart contracts are executed automatically by a network and help reduce the need for a 3rd party to manage transactions between companies.\n- Reliability: Smart contracts also leverage blockchain ledger and other distributed ledger technologies to store all the information and operations involved in complex processing after it has been executed presently. This technology also supports automated trading which eliminates human errors and ensures accuracy in contract execution.\n\n## The limitations of smart contracts:\n\n- Security issues: Smart contracts play certain important roles in a business involving many parties. However, this technology is still new and hackers are constantly exploiting new attack directions to penetrate. In the early days of Ethereum, hackers hacked and stole a large amount of virtual currency worth $50 million. The IEEE Consortium of Electrical and Electronic Engineers has also expressed concern about the weakness of the tools used to detect vulnerabilities in smart contracts.\n- Integrity: An oracle (a data source that sends event updates) should be protected from hackers creating fake events to trigger the processing of contracts even though they are not allowed. The system needs to be programmed to generate the correct events, which can be quite difficult in complex cases.\n- Relevancy: Smart contracts can speed up processing in a multi-party contract regardless of whether it matches the intent or understanding of all parties. But it can also add to the damage in the event things get out of hand, especially when there's no way to stop or reverse the unintended actions. Research firm Gartner has pointed out that this creates a challenge in the management of smart contracts, although this challenge has not been fully addressed.\n- Complexity in management: Smart contracts are quite complicated in deployment and management. They are often designed in such a way that it is very difficult or impossible to change. Although this increases security, the parties will not be able to change the content or add new terms without creating a new contract.\n\nTake for example a smart contract when deployed When a Decentralized Autonomous Organization (DAO) named \"The DAO\" was hacked in 2016, millions of ETH were stolen due to a mistake in their smart contract code. Since their Smart Contract is immutable, developers cannot edit the code. This eventually led to a hard fork, creating Ethereum Classic and Ethereum.\n\n#### Reference\n\nhttps://ethereum.org/vi/developers/docs/smart-contracts/\n","title":"Smart Contract","short_title":"","description":"This article provides an overview of smart contracts in blockchain technology, including their definition, how they work, and their advantages.","tags":["blockchain","foundational-topics","smart-contract"],"pinned":false,"draft":false,"hiring":false,"authors":["thanhpn"],"date":"Thu Jun 16 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","filePath":"playground/blockchain/foundational-topics/smart-contract.md","slugArray":["playground","blockchain","foundational-topics","smart-contract"]},{"content":"\n- [Blocks](blocks.md)\n- [Distributed System](distributed-systems.md)\n- [Smart contract](smart-contract.md)\n- [Zero-knowledge Proofs](./zero-knowledge-proofs.md)\n- [PoW & PoS](pos.md)\n","title":"Topics","short_title":"","description":"This article provides an overview of the key topics in blockchain technology, including blocks, distributed systems, smart contracts, and zero-knowledge proofs.","tags":["blockchain","foundational-topics"],"pinned":false,"draft":false,"hiring":false,"authors":["thanhpn"],"date":"Thu Jun 16 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","filePath":"playground/blockchain/foundational-topics/topics.md","slugArray":["playground","blockchain","foundational-topics","topics"]},{"content":"\nZero-knowledge proof is a way of proving the validity of a statement without disclosing the statement itself. A \"validator\" is the party attempting to prove a claim, while a \"verifier\" is responsible for validating the claim.\n\n## Why do we need to demonstrate no knowledge?\n\nZero-knowledge proofs represent a breakthrough in applied cryptography, as they promise to improve the security of information for individuals. Consider how you can prove the claim (for example, “I am a citizen of country X”) to another party (for example, a service provider). You'll need to provide \"proof\" to back up your claim, such as a national passport or driver's license. But this approach is not safe, can be hacked, personal information can be revealed\n\nZero-knowledge proofs solve this problem by removing the need to disclose information to prove the validity of claims. The zero-knowledge protocol uses a statement (called a 'witness') as input to generate a succint proof of its validity. This proof provides firm assurance that a statement is true without revealing the information used to make it.\n\nGoing back to our earlier example, the only proof you need to prove your citizenship claim is zero-knowledge proof. The verifier only has to check if certain properties of the proof are true to believe that the underlying statement is also true.\n\n## How to prove Zero Knowledge works?\n\nTo make this possible, zero-knowledge protocols rely on algorithms that take some data as input and return the 'true' or 'false' as output. A Zero-knowledge protocol must satisfy the following criteria:\n\n1. **Completeness**: If the input is valid, the zero-knowledge protocol always returns 'true'. Hence, if the underlying statement is true, and the prover and verifier act honestly, the proof can be accepted.\n2. **Soundness**: If the input is invalid, it is theoretically impossible to fool the zero-knowledge protocol to return 'true'. Hence, a lying prover cannot trick an honest verifier into believing an invalid statement is valid (except with a tiny margin of probability).\n3. **Zero-knowledge**: The verifier learns nothing about a statement beyond its validity or falsity (they have “zero knowledge” of the statement). This requirement also prevents the verifier from deriving the original input (the statement’s contents) from the proof.\n\nIn basic form, a zero-knowledge proof is made up of three elements: witness, challenge, and response.\n\n- **Witness**: with a zero-knowledge proof, the prover wants to prove knowledge of some hidden information. the secret information is the \"witness\" to the proof, and the prover's assumed knowledge of the witness establishes a set of questions that can only be answered by a party with knowledge of the information. Thus, the prover starts the proving process by randomly choosing a question, calculating the answer, and sending it to the verifier.\n- **Challenge**: The verifier randomly picks another question from the set and ask the prover to answer it.\n- **Response**: the prover accepts the question, calculates the answer and returns it to the verifier. The prover's response allows the verifier to check if the former really has access to the witness. to ensure the prover is not guessing blindly and getting the correct answers by chance, the verifier pick more question to ask. By repeating this interaction many times, the possibility of the prover faking knowledge of the witness drops significant until the verifier is satisfied.\n\nInteractive proof and non-interactive proof:\n\n- Interactive proof had limited usefulness since it required the two parties to be available and interact repeatedly\n- Non-interactive proof required only one round of communication between participants. the provers passes the secret information to a special algorithm to compute a zero-knowledge proof. this proof is sent to the verifier, who verify that the prover knows the secret information using other algorithm.\n\n## Types of zero-knowledge proofs\n\n### ZK-SNARKs\n\nZK-SNARK is an acronym for Zero-Knowledge Succinct Non-Interactive Argument of Knowledge. The ZK-SNARK protocol has the following qualities:\n\n- **Zero-knowledge**: A verifier can validate the integrity of a statement without knowing anything else about the statement. The only knowledge the verifier has of the statement is whether it is true or false.\n- **Succinct**: The zero-knowledge proof is smaller than the witness and can be verified quickly.\n- **Non-interactive**: The proof is 'non-interactive' because the prover and verifier only interact once, unlike interactive proofs that require multiple rounds of communication.\n- **Witness**: The proof satisfies the 'soundness' requirement, so cheating is extremely unlikely.\n- **(Of) Knowledge**: The zero-knowledge proof cannot be constructed without access to the secret information (witness). It is difficult, if not impossible, for a prover who doesn’t have the witness to compute a valid zero-knowledge proof.\n\nFor the ZK-SNARK protocol to work, the creation of a Common Reference String (CRS) is necessary: ​​The CRS provides public parameters to prove and verify valid proofs. The security of the proof system depends on the CRS setting; If the information used to create the public parameters falls into the possession of malicious actors, they can create false validators.\n\n- Some ZK-rollups attempt to solve this problem by using multiparty computation (MPC), involving trusted individuals, to create public parameters for the ZK-SNARK circuit. Each party contributes a random number (called \"hazardous waste\") to the construction of the CRS, which they must destroy immediately.\n- Trusted settings are used because they increase the security of the CRS setup. As long as an honest participant discards their input, the security of the ZK-SNARK system is guaranteed. However, this approach still requires the trust of the stakeholders to erase their sampled randomness and not undermine the security guarantees of the system.\n- Reliability assumptions aside, ZK-SNARK is very popular because of its small proof size and continuous time verification. Since verifying proofs on L1 constitutes a greater operating cost of ZK-rollup, L2 uses ZK-SNARK to generate proofs that can be quickly and cheaply verified on the Mainnet.\n\n### ZK-STARKs\n\nLike ZK-SNARKs, ZK-STARKs demonstrate the validity of off-chain computation without revealing the input. However, ZK-STARK is considered an improvement on ZK-SNARK because of their scalability and transparency.\n\n- **Scalable**: ZK-STARK is faster than ZK-SNARK in generating and verifying evidence when witness size is larger. With STARK proofs, verification and proverb times only increase slightly as the witness grows (the times of the proverb and SNARK verifier increase linearly with witness size).\n- **Transparency**: ZK-STARK relies on public verifiable randomness to generate public parameters for proof and verification instead of establishing trust. Therefore, they are more transparent than ZK-SNARK.\n- **Scalability**:ZK-STARKs also offer more scalability because the time required to prove and verify valid proofs increases with the complexity of the underlying computation. With ZK-SNARK, the proof and verification times expand linearly with respect to the size of the underlying computation. This means that ZK-STARK requires less time than ZK-SNARK to prove and verify as far as large data sets are concerned, making them useful for high volume applications.\n- **Security**: ZK-STARK is also secure against quantum computers, while Elliptic Curve Cryptography (ECC) used in ZK-SNARK is considered by many to be vulnerable to quantum computing attacks. The downside of ZK-STARKs is that they produce a larger proof size, which is more expensive to verify on Ethereum. Also, they don't support recursion, which is key to extending off-chain computation with zero-knowledge proofs.\n\n## Application for ZK proof\n\n- Anonymous payments\n- Identity protection\n- Authentication\n- Verifiable computation\n\n## Drawbacks of using ZK proofs\n\n- Hardware costs\n- Proof verification costs\n- Trust assumptions\n- Quantum computing threats\n\n## References\n\n- [Zero-knowledge proofs](https://ethereum.org/en/zero-knowledge-proofs/)\n- [ZL-Rollup](https://docs.ethhub.io/ethereum-roadmap/layer-2-scaling/zk-rollups/)\n- [ZK-SNARKs](https://medium.com/coinmonks/zk-snarks-a-realistic-zero-knowledge-example-and-deep-dive-c5e6eaa7131c)\n- [ZK-STARKs](https://medium.com/coinmonks/zk-starks-create-verifiable-trust-even-against-quantum-computers-dd9c6a2bb13d)\n- [Snarks-vs-starks](https://www.alchemy.com/overviews/snarks-vs-starks)\n","title":"Zero-knowledge Proofs","short_title":"","description":"This article provides an overview of zero-knowledge proofs in blockchain technology, including their definition, how they work, and their advantages.","tags":["blockchain","evm","zk-proof"],"pinned":false,"draft":false,"hiring":false,"authors":["thanhpn"],"date":"Tue Sep 06 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","filePath":"playground/blockchain/foundational-topics/zero-knowledge-proofs.md","slugArray":["playground","blockchain","foundational-topics","zero-knowledge-proofs"]},{"content":"\n## How tokens work on solana - explain for EVM developers\n\n> **Let's say you want to create a new type of fungible token, mint some to yourself, and then transfer some to your friend. What would you do?**\n\n- As a EVM developer, you have to deploy a new ERC20 smart contract.\n- On Solana, you don't need to create a new contract. There is a single token program (which was deployed by the Solana team) which responsible for creating, minting and transfering tokens.\n- In order to create a new token, you send the `create` instruction to the token program. This creates a new `mint account`. Each type of token is associated with exactly one `mint account` which holds metadata about the token (likes `total supply`, `decimals`, `mint authority` - who allowed to mint, `freeze authority` - who allowed to freeze account ).\n\n![](assets/how-tokens-work-on-solana_vuocgc7h.png.webp)\n\n- You've just created a new token but you don't own any amount of this token yet. From `mint account`, you have to create a `token account`. A `token account` stores how many tokens a particular user has, for a particular type of token.\n\n![](assets/how-tokens-work-on-solana_jrckbifh.webp)\n\n- Now, you have a `mint account` and a `token account`. Let's mint some tokens. To mint, you just send the `mint` instruction to the token program, which tells the program how many tokens to mint and whom to mint them to. Only one user is allowed to mint a token of a particular type (the `mint authority` which mentioned above)\n\n- To transfer tokens, no surprises, you send the `transfer` instruction to the token program, which tells it how many tokens to transfer and whom to transfer them. Note that the recipient must also own a `token account` for the type of token you're transferring.\n\n![](assets/how-tokens-work-on-solana_c2fz6whh.webp)\n\n- What about NFTs? To create an NFT, you also use the same token program (what!!!), but these are some differences in how they are created and minted.\n- As you know, an NFT is just a token that has one `total supply` and zero `decimal`. To create an NFT, you just need to create a `mint account` which has zero `decimal`. After that, you mint only one token of this NFT and disable future minting. This ensures there will only ever be one.\n- In practice, most people use Candy Machine to create NFTs, which abstracts all this complexity away.\n- But how can I config the name and symbol for my token? To do that, you need to create a pull request to [Solana Token Registry](https://github.com/solana-labs/token-list). Include a JSON file containing your token metadata (chain id, address, symbol, logo, name ...). Click [here](https://github.com/solana-labs/token-list) for more information.\n\n## Reference\n\n- https://spl.solana.com/token\n- https://spl.solana.com/associated-token-account\n- https://twitter.com/pencilflip/status/1454141877972779013\n","title":"How Tokens Work on Solana","short_title":"","description":"A comprehensive guide explaining how tokens function on Solana, comparing it with EVM-based tokens. This article covers the creation of fungible tokens and NFTs, minting process, token transfers, and key differences in token management between Solana and EVM blockchains.","tags":["blockchain","solana","token"],"pinned":false,"draft":false,"hiring":false,"authors":["khacvy"],"date":"Tue Jun 07 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","filePath":"playground/blockchain/how-tokens-work-on-solana.md","slugArray":["playground","blockchain","how-tokens-work-on-solana"]},{"content":"\n![](assets/introduce-to-solana-token-2022-new-standard-to-create-a-token-in-solana-1.webp)\n\n## Introduction\n\nSolana Token 2022 Program (Token extensions) is the next generation of the Solana Program Library standard. Token extensions introduce a new set of ways to extend the normal token functionality. The original Token program brought the basic capabilities of minting, transferring and freezing tokens. The Token Extensions program includes the same features, but come with additional features such as confidential transfers, custom transfer logic, extended metadata, and much more.\n\n## Key Features\n\n![](assets/introduce-to-solana-token-2022-new-standard-to-create-a-token-in-solana-2.webp)\n\n**Transfer Fees**: add a fee/tax on transfers of your token. specifically, you collect the fee in the token itself not another token like SOL (i.e. if TokenX has a transfer fee, then every time someone transfers or swaps TokenX, they would pay the fee in TokenX).\n\n**Non-Transferable**: help you to create tokens that cannot be transferred. This enables the creation of \"soul-bound\" tokens, where digital assets are intrinsically linked to an individual. While these tokens cannot be transferred, the owner can still burn tokens and close the Token Account.\n\n**Permanent Delegate**: specifies a permanent account delegate for any token account associated with the mint.\n\n**Transfer Hook**: allows custom logic to be executed during token transfers, enabling advanced functionalities.\n\n**Metadata**: allows you to have custom metadata directly on the token mint (similar idea to using the Token Metadata program from metaplex, except you will have 1 less account and need to pay less storage rent because of that)\n\n**Confidential Transfer**: allow to mask token balances and the amounts of token transfers, with auditability from the issuer of the token\n\n**Default Account State**: provides the option to have all new Token Accounts to be frozen by default.\n\n## Benefits of using token extensions\n\nCompared to Solana token standard, token extensions offer many benefits for both developers and businesses, making them a powerful tool for unlocking the full potential of the Solana blockchain. Here are some key benefits of Solana token extensions:\n\n**Enhanced Functionality**: Token extenstions allow developers to equip tokens with new features and functionalities. This can range from things like privacy-protecting confidential transfers to setting up automatic fees or even adding interest-bearing capabilities.\n\n**Security**: For developers, token extensions are a boon as they provide a standardized and pre-built set of tools. This eliminates the need to craft complex smart contracts from scratch, saving time and resources. With extensions, developers can focus on their core business logic instead of getting bogged down in the intricacies of smart contract development.\n\n**Regulatory Compliance**: Solana Token Extensions can be instrumental in ensuring tokens comply with regulations. Features like adding required metadata or creating non-transferable tokens can be easily implemented using extensions. This makes Solana a more attractive platform for businesses and organizations that need to adhere to strict compliance standards.\n\n## Use cases\n\n### [Bern](https://www.bernboard.com/)\n\n**Token extensions used**: Transfer Fees.\n\nAs the first token built with Token-22, BERN offers a fun way to engage with Solana’s famous community coin, BONK. Whenever a holder transfers BERN, the **Transfer Fee** extension ensures that 6.9% of the transferred amount is automatically taken as a fee.\n\nOf this fee, 1% is used to burn BONK, 0.5% is used to burn BERN, and 5% is distributed back to holders of BERN. To date, nearly $1.5 million of BONK has been burned, and over $500,000 of BERN has been distributed to holders.\n\n![](assets/introduce-to-solana-token-2022-new-standard-to-create-a-token-in-solana-3.webp)\n\n### [Wen New Standard (WNS)](https://www.jupresear.ch/t/wen-new-standard-wns-0-0/133)\n\n**Token extensions used**: Metadata & Metadata Pointer, Transfer Hook, Immutable Owner, Group & Group Pointer, Member & Member Pointer.\n\nWNS is an extremely lightweight NFT standard built on top of Token2022 for maximum ecosystem composability, flexibility and backward compatibility. WNS 0.0 starts off extremely simple, with a single instruction for creating a new NFT by locking supply at 1 and giving it 0 decimals. The metadata is embedded in the Mint account and has only 3 fields (name, symbol, uri).\n\nWith the **Immutable Owner** and **Transfer Hook** extensions, WNS allows creators to configure royalties on their collections. Through the power of token extensions, these royalties are enforced at the protocol level, ensuring that they can’t be bypassed.\n\nWNS also makes developers lives easier by simplifying how metadata is associated with each token. WNS uses **Metadata** and **Metadata Pointer** extensions to stores core info like each token’s Name, Symbol, and URI directly in the token mint itself.\n\n### [Paxos USDP Stablecoin](https://paxos.com/usdp/)\n\n**Token extensions used**: Mint Close Authority, Permanent Delegate, Confidential Transfer, Transfer Hook, Metadata & Metadata Pointer.\n\nPaxos is regulated by the New York Department of Financial Services (NYDFS) as a trust company and is a fully-backed, US-dollar stablecoin issuer. For the launch of its Pax Dollar (USDP) stablecoin, Paxos chose to enable token extensions.\n\nUSDP also enabled the **Confidential Transfer** extension, a privacy-enabling feature that encrypts token balances and transfer amounts via zero-knowledge proofs. That allows merchants to provide confidentiality for transaction amounts to their consumers while maintaining visibility for regulatory purposes.\n\nThe NYDFS requires that Paxos prevents bad actors from accessing USDP. To do this, Paxos specifically enabled the **Permanent Delegate** extension. If funds are used for illegal purposes, this powerful extension allows Paxos to clawback funds, therefore meeting the strict regulatory requirements set by the NYDFS.\n\n## What's next ?\n\nToday, there are over a dozen token extensions at the program level unlocking new use-cases, such as:\n\n- Building a better stablecoin.\n- Leveling up game assets.\n- Governance for real-world asset (RWA) issuance.\n\nToken extensions are already seeing adoption across the ecosystem.\n\n- [GMOTrust](https://x.com/GMOTrust) announced it will release GYEN & GUSD on Solana.\n- [Paxos](https://x.com/Paxos) expanded stablecoin issuance to Solana.\n- [phantom](https://x.com/phantom), [solflare_wallet](https://x.com/solflare_wallet), [FluxbeamDEX](https://x.com/FluxBeamDEX) & more support token extensions\n\n## References\n\nhttps://solana.com/developers/guides/token-extensions/getting-started\n","title":"Introduce to Solana Token 2022 - new standard to create a token in solana","short_title":"","description":"Explore Solana Token 2022, the next-generation token standard on Solana blockchain. Learn about its key features like transfer fees, non-transferable tokens, and confidential transfers. Discover how Token Extensions enhance functionality, improve security, and enable regulatory compliance for developers and businesses in the Solana ecosystem.","tags":["blockchain","solana","defi"],"pinned":false,"draft":false,"hiring":false,"authors":["huymaius"],"date":"Wed Jun 19 2024 00:00:00 GMT+0000 (Coordinated Universal Time)","filePath":"playground/blockchain/introduce-to-solana-token-2022-new-standard-to-create-a-token-in-solana.md","slugArray":["playground","blockchain","introduce-to-solana-token-2022-new-standard-to-create-a-token-in-solana"]},{"content":"\n## What?\n\n- [Ethereum scaling solutions](#ethereum-scaling-solutions)\n- Separate [blockchain](#blockchain)\n  - Extends [Ethereum](#ethereum)\n  - Inherits the security guarantees of [Ethereum](#ethereum)\n- All user transactions on the Layer 2 can ultimately settle back to [Layer 1](#layer-1)\n- [Ethereum](#ethereum) also functions as a data availability layer for Layer 2s\n  - Layer 2 will post their transactions data onto [Ethereum](#ethereum)\n  - Rely on [Ethereum](#ethereum) for data availability\n    - Used to get the state of Layer 2\n    - Dispute transaction of Layer 2\n\n## Why?\n\nBlockchain has 3 desirable properties\n\n- Decentralized\n- Secure\n- Scalable\n\n\"can only achieve 2 out of 3\" - [Blockchain trilemma](#blockchain-trilemma)\n\nHigh demand -> Need to scale without sacrificing decentralization and security => Need Layer 2 to scale Blockchain that takes advantage of robust decentralized security of [Layer 1](#layer-1)\n\n## How?\n\n- Communicate with [Layer 1](#layer-1) by submitting bundles of transactions\n- [Layer 1](#layer-1) handles security, data availability, and decentralization\n- Layer 2 handles scaling by computing and sending finalized proofs to [Layer 1](#layer-1) -> Remove transaction loading.\n\n### Rollup\n\n- Preferred layer 2 scaling solution in Ethereum\n- Reduce gas fees by up to 100x compared to [Layer 1](#layer-1)\n- Rollup bundle (\"roll up\") hundreds of transactions into a [Layer 1](#layer-1) transaction => Fee will be dived/distributed to all users (owners of these hundreds of transactions) -> Cheaper\n  - For example:\n    - 1 [Layer 1](#layer-1) transaction is paid for 1eth as fees\n    - 100 Layer 2 transactions rolled up in 1 [Layer 1](#layer-1) transaction are also paid for 1eth. So 1 Layer 2 transaction is just only needed 0.01 eth to execute.\n- Rollup is executed outside [Layer 1](#layer-1) (in Layer 2), but finalized result (proof) is submitted to [Layer 1](#layer-1) => and can be secured by [Layer 1](#layer-1) security mechanisms.\n- Have 2 approaches (different on posting transaction data to L1):\n  - [Optimistic](#optimistic-rollups)\n  - [ZK Rollups](#zk-rollups) aka Zero-knowledge Rollups\n\n## Example\n\n- Arbitrum One\n- Optimism\n- Boba Network\n\n## References\n\n- https://ethereum.org/en/layer-2\n","title":"Layer 2: Scaling Solutions for Ethereum","short_title":"","description":"Explore Layer 2 solutions for Ethereum scaling, including rollups and their benefits. Learn how Layer 2 extends Ethereum's capabilities, reduces gas fees, and maintains security while improving transaction throughput and efficiency.","tags":["blockchain","network","ethereum"],"pinned":false,"draft":false,"hiring":false,"authors":["bienvh"],"date":"Tue Dec 06 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","filePath":"playground/blockchain/layer-2.md","slugArray":["playground","blockchain","layer-2"]},{"content":"\n## 1. What is a Liquidity Pool?\n\nBasically, a liquidity pool is a pool of tokens that are locked in a smart contract. Liquidity refers to the ease with which a token can be swapped with another. Anybody can provide liquidity into this single giant pool and earn a share of the trading fees based on their stake in it.\n\nThe process could be illustrated by the picture below:\n\n![](assets/liquidity-pool_pasted-image-20220322220453.webp)\n\n## 2. How do Liquidity Pools work?\n\nLiquidity pools form the backbone of DEX by applying the automated market maker (AMM) system. Here’s the main formula that mathematically determines what the market price of the token in the pool should be:\n\n\n$$ \nx * y = k \n$$\n\n\nWhere x and y represent the respective token balance of a pairing and **k is a constant that will never change**.\n\nLet's use the ETH-DAI pair as an example, with 10 ETH and 1,000 DAI in the liquidity pool. What happens when someone wants to buy 1 ETH from this pool? How much does he need to pay?\n\nThe k constant is 10,000 since there are 10 ETH and 1,000 DAI.\n\n\n$$ \n10 \\text{ ETH} * 1,000 \\text{ DAI} = 10,000 \n$$\n\n\nIf the buyer withdraws 1 ETH, he has to deposit some DAI into the pool so that k remains constant.\n\n\n$$ \n(10 - 1) \\text{ ETH} * (1,000 - y) = 10,000 \n$$\n\n\n$$ \n1,000 - y =\\frac{10000}{10 - 1} \n$$\n\n\n$$\n y = 111.11 \n$$\n\n\nAnd because we have no limit orders in AMM, the smart contract would automatically compute y to determine the price to pay and that is approximately 111.11 DAI.\n\nNow the liquidity pool would have 9 ETH and 1,111.11 DAI after someone buys 1 ETH.\n\n### 2.1. Roles of Arbitragers in AMM\n\nArbitragers play an important role in AMM. They are used in order to take advantage of the price differences and drive the price back towards market equilibrium.\n\nIf the price of ETH in the pool is higher than it is on Coinbase, arbitragers would sell ETH into this pool and make a profit on the price discrepancies. Thus, the price of ETH in the pool would always be incentivized towards the market price as closely as possible.\n\n### 2.2. Depth of Pool and Slippage\n\nThe price difference between the pool and market is known as slippage. How big your slippage is depends on the size of your trade relative to the size or depth of the pool.\n\nThe depth of the pool is measured by that k constant. The bigger your k, the deeper the pool and the less likely a slippage is going to occur.\n\nIn the earlier example, buying 1 ETH from a pool that only has 10 ETH makes up 10% of the pool size. Hence there is such a big difference in price. ETH price costs $100 but you are buying it from the pool at $111.11. That’s about an 11% price slippage.\n\nIn reality, the pool will be much deeper and bigger as there will be hundreds and thousands of liquidity providers from all around the world.\n\nSuppose we use a pool that has 100 ETH and 10,000 DAI and someone wants to buy 1 ETH from this pool, how much would it cost? Plugging in the same equation would give you $101, a 1% price slippage.\n\n## 3. How to provide Liquidity into a Pool?\n\nAnyone can provide liquidity and become a Liquidity Provider (LP). When supplying a pair of tokens into the pool, the ratio price of both tokens must be 50-50. So if you want to provide $5,000 of ETH-DAI pair, you will need $2,500 DAI and $2,500 worth of ETH.\n\nEvery liquidity provider has to follow this standard so that the liquidity pool would always maintain a 50-50 mix of token A and token B.\n\nWhen you provide liquidity into a pool, you typically receive an LP token in exchange. This LP token represents your share in the liquidity pool. Every time when a trade is made on the liquidity pool, users have to pay a fee. These fees are then aggregated and re-distributed back to all liquidity providers on a pro-rata basis based on the amount of LP tokens you hold.\n\nHowever, you may not get back the exact amount of tokens you deposited initially. That is to say, if you started out with some ETH-DAI tokens, you would get back more ETH and less DAI, or more DAI and less ETH depending on the markets.\n\nIn a bull market, more people would want ETH as prices are rising. Hence the supply of ETH in the pool would drop while DAI would increase since more people are exchanging their dollars for ETH. When you withdraw out your LP, you would end up with less ETH than you started out with and more DAI. The reverse holds true in a bear market.\n\n## 4. What is Impermanent Loss?\n\nImpermanent loss refers to the situation where you could have made more if you have done nothing and hold on for dear life rather than providing LP.\n\nSuppose the price of ETH in our LP is $100. What if the price of ETH on Coinbase rises to $120 in the market? Arbitragers will come in and buy ETH from the pool and sell it on Coinbase to profit from that difference.\n\nLet’s use a pool that has 100 ETH and 10,000 DAI. The relation between x, y, k, and ETH price could be shown by:\n\n\n$$ \nx * y = k \n$$\n\n\n$$\nx = \\frac{k}{\\text{ETH price}} \n$$\n\n\nWe could easily calculate x and y by k and ETH price:\n\n\n$$ \nx = \\sqrt{\\frac{k}{\\text{ETH price}}} \n$$\n\n\n$$ \ny = \\sqrt{k * \\text{ETH price}} \n$$\n\n\nAssume someone supplies 1 ETH and 100 DAI into the pool. How much ETH and DAI he could get back if the ETH price pumps to $120?\n\n\n$$ \nk = 100 * 10,000 = 1,000,000 \n$$\n\n\n$$ \nx = \\sqrt{\\frac{1,000,000}{120}} = 91.29 \n$$\n\n\n$$ \ny = \\sqrt{1,000,000 * 120} = 10,954.45 \n$$\n\n\nSince his share in the pool is 1%, the LP gets back 0.9129 ETH and 109.5445 DAI if he wants to withdraw his stake in the pool. The total value of his stake would be 0.9129 ETH \\* $120 + $109.54, which totals up to be $219.09.\n\nIf he did not provide his liquidity into the pool and held on for dear life instead, his initial asset would be worth 1 ETH \\* $120 + $100 = $220, which also means he would have made an extra $0.91.\n\nThat is what we call impermanent loss. It is impermanent because it only becomes permanent when you withdraw out your LP.\n\n---\n\n#### Reference\n\n- https://www.jumpstartmag.com/how-do-crypto-liquidity-pools-work/\n- https://www.theancientbabylonians.com/what-is-liquidity-pool-lp-in-defi/#:~:text=To%20sum%20up%20what%20liquidity,%3A%20x%20*%20y%20%3D%20k\n","title":"Liquidity pool","short_title":"","description":"A comprehensive guide to understanding liquidity pools in blockchain, covering their definition, functionality, the role of automated market makers (AMM), arbitrage, pool depth, slippage, how to provide liquidity, and the concept of impermanent loss. This article provides insights for both beginners and experienced users in decentralized finance (DeFi)","tags":["blockchain","liquidity"],"pinned":false,"draft":false,"hiring":false,"authors":["hienld"],"date":"Thu Mar 24 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","filePath":"playground/blockchain/liquidity-pool.md","slugArray":["playground","blockchain","liquidity-pool"]},{"content":"\nWith the rise of NFTs on the Solana blockchain, there is a growing demand for these digital assets to be as commonplace as any other item on the internet. This includes every single item in a game's inventory, proof of engagement in popular consumer apps, and even a personal profile for every human on Earth.\n\nWhile the cost of renting NFTs on Solana is relatively cheap (at ◎0.012), it scales linearly, making it costly to have a large number of NFTs. However, through compression, the cost of on-chain storage for NFTs can be drastically reduced, enabling creators to fully leverage the technology to express themselves. For example, with compression, the cost of 10,000 NFTs at ◎3.5 (34x) reduces, as does the cost of 1 million NFTs at ◎5 (2,400x) and 1 billion NFTs at ◎500 (24,000x).\n\n![](assets/metaplex-nft-compression-cost-comparation.webp)\n\n## How Compression for NFTs works\n\nCompressed NFTs are stored in Merkle trees via the Gummyroll program where:\n\n- Roots of Merkle trees are stored and updated on-chain in a buffer stored in a program account\n- Modifications to a tree (e.g. mint, transfer, delegate) are encoded in the Solana ledger\n- Off-chain indexers observe changes to the tree via the ledger and cache NFT-related metadata, and serve data and proofs needed to power dApps and smart contracts\n\nThe Merkle root's on-chain buffer in the Gummyroll program enables multiple write requests to a single Merkle tree to be processed simultaneously. As updates to the tree cause the root to change, the program ensures that outdated requests to update the tree remain valid if they would have updated a prior version of the tree, given the nature of how Merkle trees operate.\n\nThe implementation of Compression for NFTs will have a significant impact on the Solana ecosystem, and Metaplex is working towards making this a reality. To achieve this, Metaplex is collaborating with various partners, including wallets and RPCs. Some of the partners that have already implemented solutions include Solflare for wallets, Crossmint for enterprise tools, and GenysysGo and Triton for RPCs. Additionally, partners such as Phantom for wallets and Quicknode and Alchemy for RPCs are expected to launch their solutions soon.\n\n![](assets/metaplex-nft-compression-how-it-work.png)\n\n## Conclusion\n\nThis is just a brief overview of Compression for NFTs. There is much more to explore, whether from a technical perspective or in terms of potential use cases. Nevertheless, this technological advancement marks a significant shift in how users, developers, and businesses can approach NFTs in Solana blockchain.\n\n## Reference\n\n- https://www.metaplex.com/posts/expanding-digital-assets-with-compression-for-nfts\n- https://metaplex.notion.site/Compression-for-NFTs-Public-94f9faa25f034110b513414a11a85bbe\n","title":"Metaplex NFT Compression","short_title":"","description":"Metaplex NFT Compression is a technology that allows for the compression of NFTs on the Solana blockchain, reducing the cost of on-chain storage for NFTs. This article provides an overview of the technology, how it works, and its potential impact on the Solana ecosystem.","tags":["blockchain","solana","nft"],"pinned":false,"draft":false,"hiring":false,"authors":["khacvy"],"date":"Mon Mar 13 2023 00:00:00 GMT+0000 (Coordinated Universal Time)","filePath":"playground/blockchain/metaplex-nft-compression.md","slugArray":["playground","blockchain","metaplex-nft-compression"]},{"content":"\n![](assets/multisign-wallet-hero-image.webp)\n\n## Intro Multisig wallet\n\nUsually, blockchain wallets are generally generated by a unique private key. All assets or transactions are controlled and signed by that private key. That key holder can do anything with that wallet. This is great for individuals, as it ensures privacy and security, as only the owner of the private key has full rights to those assets.\n\nBut with an organization, such as assets after IDO, private sale, or common company assets, it is different, if this asset is controlled by a single person, there will be a lot of risk. can happen like:\n\n- This person took all the assets and disappeared.\n- Due to some reason, this person loses the private key, then recovering the private key is not possible, which means that the entire property will also be inaccessible.\n- If this person unfortunately dies, no one can inherit or use the property anymore because there is no private key.\n\nTo solve the above problems, **Multisig Wallet** was born to minimize those risks.\n\n## What is multisig wallet?\n\nIn essence _Multisig Wallet_ is a **smart contract** on the blockchain that allows certain logic to be processed when there are **enough** required signatures.\n\n> _Multisig_ is short for _Multi Signature_.\n\nA _Multisig Wallet_ has the following properties:\n\n- Parties agree on an action\n- The rules in the smart contract have been built\n- Smart contract can receive cryptocurrency (e.g. Ether)\n- Smart contract can receive request, can be able to process that request based on consensus signing\n- According to the multisig address configuration, it may require a different key combination: 2-of-3 is the most common key, where only 2 signatures are enough to access the funds of an address 3 signature. However, there are many other variations, such as 2 of 2, 3 of 3, 3 of 4, etc.\n\n## How does it work?\n\nAs a simple analogy, we can picture a safe with two locks and two keys. One key is held by Alice and the other is held by Bob. The only way they can open the box is to provide both keys at the same time, so one cannot open the box without the other's consent.\n\nBasically, funds stored on a multi-signature address can only be accessed using 2 or more signatures. Thus, using a multisig wallet allows users to create an extra layer of security for their funds. But before going any further, it is important to understand the basics of standard Bitcoin addresses, which are based on a single key rather than multiple (single key addresses).\n\n## Pros and cons of Multisig Wallet\n\nEverything has two sides, security and convenience are always two opposite sides of each other, so is Multisig Wallet.\n\n### Advantages\n\n- Higher level of safety for any web3 user.\n- Multisig Wallet enhances the security of assets: For example, we can set up a multisig wallet for 3 accounts at 3 devices: phone, tablet, laptop. Each transaction can only be done when there is confirmation from 2 of those 3 devices. At this time, if we assume that we lose our phone, we can still confirm the transaction using tablets and laptops, while the thief cannot confirm the transaction with just one device.\n- Multisig Wallet dispute resolution: An example is A and B buying and selling assets, they decide to use a 2-of-3 multisig wallet with the participation of 3 parties A, B, and ruling party C. In case A and B have signed _agree_ or _cancelled_, the participation of C will not be needed. Otherwise if only one sign _co-sign_, and the other person signs _cancellation_, then C's signature will decide whether the transaction will be _agreeed_ or _cancelled_ by a majority of 2 out of 3 decisions.\n- Decision making: A board of directors might use a multisig wallet to control access to a company's funds. For example, by setting up a 4-of-6 wallet where each board member holds one key, no individual board member is able to misuse the funds. Therefore, only decisions that are agreed upon by the majority can be executed.\n\n### Defect\n\n- In the above example, suppose we need 3 devices to confirm the transaction, and we lose our phone? neither me nor the thief can confirm any more transactions? That's the downside of Multisig Wallet: the rules are too complicated to set up effectively for each specific problem.\n\n> In this case, 2FA can be an effective solution to save the backup code for the account on the device, if we lose the device, we can still get the backup code back, which means getting the account back. .\n\n- Both blockchain and multisig are still new technologies, the security audit is still limited. There is no 100% guarantee that what works today won't be hacked tomorrow. For example, the $300 million hack of Parity Wallet.\n- More gas fee when you have to submit your signature to verify a request and deplay to making final transaction.\n- Still limited action by smart contract operations.\n\n## Build Minimum Multisig Wallet\n\n[Mutisig smart contract](https://solidity-by-example.org/app/multi-sig-wallet/):\n\n```js\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\ncontract MultiSigWallet {\n  event Deposit(address indexed sender, uint amount, uint balance);\n  event SubmitTransaction(\n    address indexed owner,\n    uint indexed txIndex,\n    address indexed to,\n    uint value,\n    bytes data\n  );\n  event ConfirmTransaction(address indexed owner, uint indexed txIndex);\n  event RevokeConfirmation(address indexed owner, uint indexed txIndex);\n  event ExecuteTransaction(address indexed owner, uint indexed txIndex);\n\n  address[] public owners;\n  mapping(address => bool) public isOwner;\n  uint public numConfirmationsRequired;\n\n  struct Transaction {\n    address to;\n    uint value;\n    bytes data;\n    bool executed;\n    uint numConfirmations;\n  }\n\n  // mapping from tx index => owner => bool\n  mapping(uint => mapping(address => bool)) public isConfirmed;\n\n  Transaction[] public transactions;\n\n  modifier onlyOwner() {\n    require(isOwner[msg.sender], \"not owner\");\n    _;\n  }\n\n  modifier txExists(uint _txIndex) {\n    require(_txIndex < transactions.length, \"tx does not exist\");\n    _;\n  }\n\n  modifier notExecuted(uint _txIndex) {\n    require(!transactions[_txIndex].executed, \"tx already executed\");\n    _;\n  }\n\n  modifier notConfirmed(uint _txIndex) {\n    require(!isConfirmed[_txIndex][msg.sender], \"tx already confirmed\");\n    _;\n  }\n\n  constructor(address[] memory _owners, uint _numConfirmationsRequired) {\n    require(_owners.length > 0, \"owners required\");\n    require(\n      _numConfirmationsRequired > 0 &&\n        _numConfirmationsRequired <= _owners.length,\n      \"invalid number of required confirmations\"\n    );\n\n    for (uint i = 0; i < _owners.length; i++) {\n      address owner = _owners[i];\n\n      require(owner != address(0), \"invalid owner\");\n      require(!isOwner[owner], \"owner not unique\");\n\n      isOwner[owner] = true;\n      owners.push(owner);\n    }\n\n    numConfirmationsRequired = _numConfirmationsRequired;\n  }\n\n  receive() external payable {\n    emit Deposit(msg.sender, msg.value, address(this).balance);\n  }\n\n  function submitTransaction(\n    address _to,\n    uint _value,\n    bytes memory _data\n  ) public onlyOwner {\n    uint txIndex = transactions.length;\n\n    transactions.push(\n      Transaction({\n        to: _to,\n        value: _value,\n        data: _data,\n        executed: false,\n        numConfirmations: 0\n      })\n    );\n\n    emit SubmitTransaction(msg.sender, txIndex, _to, _value, _data);\n  }\n\n  function confirmTransaction(uint _txIndex)\n    public\n    onlyOwner\n    txExists(_txIndex)\n    notExecuted(_txIndex)\n    notConfirmed(_txIndex)\n  {\n    Transaction storage transaction = transactions[_txIndex];\n    transaction.numConfirmations += 1;\n    isConfirmed[_txIndex][msg.sender] = true;\n\n    emit ConfirmTransaction(msg.sender, _txIndex);\n  }\n\n  function executeTransaction(uint _txIndex)\n    public\n    onlyOwner\n    txExists(_txIndex)\n    notExecuted(_txIndex)\n  {\n    Transaction storage transaction = transactions[_txIndex];\n\n    require(\n      transaction.numConfirmations >= numConfirmationsRequired,\n      \"cannot execute tx\"\n    );\n\n    transaction.executed = true;\n\n    (bool success, ) = transaction.to.call{value: transaction.value}(\n      transaction.data\n    );\n    require(success, \"tx failed\");\n\n    emit ExecuteTransaction(msg.sender, _txIndex);\n  }\n\n  function revokeConfirmation(uint _txIndex)\n    public\n    onlyOwner\n    txExists(_txIndex)\n    notExecuted(_txIndex)\n  {\n    Transaction storage transaction = transactions[_txIndex];\n\n    require(isConfirmed[_txIndex][msg.sender], \"tx not confirmed\");\n\n    transaction.numConfirmations -= 1;\n    isConfirmed[_txIndex][msg.sender] = false;\n\n    emit RevokeConfirmation(msg.sender, _txIndex);\n  }\n\n  function getOwners() public view returns (address[] memory) {\n    return owners;\n  }\n\n  function getTransactionCount() public view returns (uint) {\n    return transactions.length;\n  }\n\n  function getTransaction(uint _txIndex)\n    public\n    view\n    returns (\n      address to,\n      uint value,\n      bytes memory data,\n      bool executed,\n      uint numConfirmations\n    )\n  {\n    Transaction storage transaction = transactions[_txIndex];\n\n    return (\n      transaction.to,\n      transaction.value,\n      transaction.data,\n      transaction.executed,\n      transaction.numConfirmations\n    );\n  }\n}\n```\n\n### Deployed Multisig Wallets\n\nThere is no universal standard for writing Multisig Wallet, but we can refer to the implementation from famous wallets being used in the world to be able to design or inherit our own implementation.\n\n- [ConsenSys' Multisig Wallet](https://github.com/ConsenSys/MultiSigWallet): This can be considered the simplest implementation of Multisig Wallet, the solidity version used is also 0.4.10 a long time ago. , but is extremely valuable, at the time of writing this wallet is holding 80,000 Ether, or about 17 million dollars. You can look up this wallet [here](https://etherscan.io/address/0x851b7f3ab81bd8df354f0d7640efcd7288553419).\n- [Gnosis' Multisig Wallet](https://github.com/Gnosis/MultiSigWallet): is an upgraded version of Consensys Multisig Wallet, written according to Truffle project's structure, fully tested and regularly updated. At the time of writing, this github project is still being updated.\n- [Gnosis' Multisig Wallet](https://github.com/safe-global/safe-contracts): is an upgraded version of Consensys Multisig Wallet, written according to the structure of the hardhat project.\n- [BitGo's Multisig Wallet](https://github.com/BitGo/eth-multisig-v2): also a structured version of Truffle, fully tested and regularly updated. The difference here is that the contract has more complex logic, one of which is ERC20-Token Compatibility. And this wallet implements 2-of-3 signing method, which means that there are exactly 3 parties involved, and 2 signatures are needed to agree for a transaction to take place.\n- [Ethereum Dapp's Multisig Wallet](https://github.com/ethereum/dapp-bin/blob/master/wallet/wallet.sol): Compatible with Ethereum Wallet or Mist, we can deploy Multisig Wallet here, and easily call `send transaction` or `confirm` directly. However, there is a disadvantage that there is no document, we have to read the code for more details.\n- [Parity's Multisig Wallet](https://parity.io/) (NOT RECOMMENDED): This is also a very famous Multisig Wallet before it was [hacked and lost $300 million](https://medium.com /chain-cloud-company-blog/parity-multisig-hack-again-b46771eaa838) on 11/06/2017. The reason is because the implementation is not good, and therefore it is not recommended anymore.\n\n## Referrence\n\n- https://www.curvegrid.com/docs/multi-signature-multisig-wallet-smart-contracts\n- https://www.binance.vision/security/what-is-a-multisig-wallet\n- https://medium.com/hellogold/ethereum-multi-signature-wallets-77ab926ab63b\n- https://www.gemini.com/cryptopedia/what-is-a-multi-sig-wallet-crypto-multi-signature-wallet\n","title":"Multisign wallet","short_title":"","description":"A multisign wallet is a type of digital wallet that requires multiple signatures to authorize transactions. This article provides an overview of multisign wallets, how they work, and their benefits.","tags":["blockchain","multisign-wallet"],"pinned":false,"draft":false,"hiring":false,"authors":["thanhpn"],"date":"Wed Aug 10 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","filePath":"playground/blockchain/multisign-wallet.md","slugArray":["playground","blockchain","multisign-wallet"]},{"content":"\n## What is a fractional NFT?\n\n- A fractional NFT is simply a whole NFT that has been divided into smaller fractions, allowing different numbers of people to claim ownership of a piece of the same NFT. The NFT is fractionalized using a smart contract that generates a set of tokens linked to the indivisible original.\n- These fractional tokens give each holder a percentage of ownership of an NFT, and can be traded or exchanged on secondary markets.\n\n## How does it work?\n\nTo break this NFT into fractions, it must first be locked in a smart contract, which will split the ERC-721 token into multiple ERC-20 tokens as per the instructions the NFT owner has given. The owner specifies everything, from the number of ERC-20 tokens to be created, to their prices, to the metadata to be used, to any other property they deem important. Each fraction or ERC-20 token created represents partial ownership of the NFT. The fractions can then be put up for sale at a fixed price for a particular time or until they get sold out.\n\n![](assets/nft-fractionalization_y8tfcaq.webp)\n\n## Benefits of fractional NFT\n\n- **Price discovery**: the asset is extremely valuable and they want help finding price discovery, fractionalizing the item and selling 20% on the market can be a valuable tool to help understand how the market values the NFT.\n- **More liquidity**: owners have significantly better exit liquidity than if they owned the NFT themselves. This can be achieved through on-chain exchanges such Uniswap.\n- **Curator incentives**: an NFT owner who divides their asset into fractions receives a curator fee from their chosen NFT marketplace. Although the owner can set and update the amount of this fee, it is subject to a maximum price limit to prevent reckless pricing.\n\n## References\n\n- https://www.coindesk.com/learn/how-can-you-share-an-nft-fractional-nfts-explained/\n- https://learn.bybit.com/nft/what-are-fractional-nfts/\n- https://www.leewayhertz.com/fractional-nft/\n- https://medium.com/fractional-art/what-is-fractional-dd4f86e6458a\n","title":"NFT Fractionalization","short_title":"","description":"NFT Fractionalization is a process of dividing a non-fungible token (NFT) into smaller, fractional tokens that represent partial ownership of the original NFT. This article provides an overview of fractional NFTs, how they work, and their benefits.","tags":["NFT","blockchain"],"pinned":false,"draft":false,"hiring":false,"authors":["khacvy"],"date":"Sat Jun 18 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","filePath":"playground/blockchain/nft-fractionalization.md","slugArray":["playground","blockchain","nft-fractionalization"]},{"content":"\n## Introduction\n\n![](assets/plonky2_plonky-2-website.webp) Plonky2 is a non-Interactive Proof of Proof of Knowledge (NIPoPoK) chain developed to reduce the size of the blockchain and speed up transaction confirmations. It is built on the foundation of ZK-SNARKs (Zero-Knowledge Succinct Non-Interactive Argument of Knowledge), an advanced cryptographic technology that enables affirmative proofs without revealing inside information. Plonky2 allows transactions to be confirmed on the fly using certificates similar to Merkle trees, where only a small portion of data is needed to confirm the entire Merkle tree. Plonky2 certificates are very small, only about 1/20th of similar attestations used in traditional blockchain systems, thus helping to reduce blockchain size and speed up transaction processing. Plonky2 is being used in several blockchain projects such as Ethereum and Polkadot to improve the performance and scalability of the system.\n\n## The target of Plonky2\n\nBlockchain is a decentralized information storage and conversion technology that allows parties to exchange information and transact directly with each other without the involvement of an intermediary. Transactions are confirmed and written to a new block in the blockchain, forming a reliable and unmodifiable history of transactions. An important issue of blockchain is its size. Since each new block added to the blockchain must be stored and backed up across the entire network, the size of the blockchain increases over time. This leads to problems with transaction processing speed, scalability, and storage costs.\n\nSome blockchains like Bitcoin use Proof of Work (PoW) to verify new transactions and generate new blocks. However, the use of PoW requires huge computation and high energy usage, negatively affects the environment and is costly. So many new technologies have been developed to solve the blockchain size problem, speed up transaction processing and reduce storage costs. Plonky2 is one of those new technologies, with the ability to reduce blockchain size significantly using non-interactive attestation (NIPoPoK) and Merkle tree structure.\n\nPlonky2 is a new technology in the blockchain field, developed to reduce blockchain size and speed up transaction confirmation by using non-interactive attestation (NIPoPoK) and Merkle tree structure. NIPoPoK is a method of building attestations for blocks in the blockchain without downloading the entire blockchain, requiring only a small number of blocks (usually only about 1% of the total block) called \"superblocks\". With NIPoPoK, confirmation of new transactions becomes faster and requires less resources than confirmations on the entire blockchain.\n\nThe Merkle tree is a layered data structure that allows for fast and efficient data integrity checking. Using the Merkle tree structure in Plonky2, the blocks of the blockchain can be grouped into smaller \"superblocks\", which reduces the blockchain size significantly. The use of Plonky2 in the blockchain will help speed up transaction confirmations and reduce blockchain size, while reducing storage costs and increasing the scalability of the system. Plonky2 has been used in many blockchain projects, such as Ethereum and Bitcoin Cash.\n\n## How Plonky2 work\n\n![](assets/polygon_plonky2_deep_dive-1024x1009.jpeg)\n\nNon-Interactive attestation (NIPoPoK) is a method of attesting in the blockchain without interacting with other entities in the system. Instead of downloading the entire blockchain to confirm a block, NIPoPoK requires only a small number of blocks (usually only about 1% of the total block) called \"superblocks\" to verify the validity of a new block. The main difference between NIPoPoK and interactive attestation (PoK) is that PoK requires interaction between entities in the system for authentication. This means that entities must exchange information with each other to perform authentication. Meanwhile, NIPoPoK does not require interaction between entities, which minimizes communication and synchronization in the system. The other difference between NIPoPoK and PoK is that PoK typically uses more complex protocols for authentication, while NIPoPoK uses simpler maths to compute authentication. However, this does not mean that NIPoPoK is less secure, because NIPoPoK uses the latest techniques to ensure the safety and security of data. With the development of technology, NIPoPoK is being widely used in blockchain to minimize the interaction and synchronization in the system, while helping to speed up transaction confirmation and reduce blockchain size.\n\nMerkle tree is a binary tree data structure used to store data and perform data integrity validation efficiently. Merkle trees are widely used in blockchain systems to minimize data size and speed up transaction integrity validation. Merkle tree is created by breaking data into smaller elements, called leaf nodes, then creating pairs of these leaves and hashing them together to form new nodes, until there are only leaves left. a single node at the top of the tree, called the root node. When there is a change in the data, simply recalculate the hash of the affected nodes and the root node will change, helping to verify the integrity of the data quickly and efficiently.\n\nPlonky2 uses a Merkle tree to verify transaction integrity. Instead of validating the entire blockchain like other methods, Plonky2 simply uses a small number of blocks (superblocks) created by the Merkle tree to verify the validity of a new transaction. Since then, Plonky2 reduces the size of data to be processed and speeds up transaction validation significantly. Merkle tree is used to generate superblocks, where each superblock is created by taking root nodes of Merkle trees for a certain period of time. Superblocks are stored in a linked list, and Plonky2 uses this list to verify the integrity of the new transaction. If a transaction is invalid, Plonky2 will re-query the superblock to find the invalid transaction and thereby confirm the integrity of the system.\n\n## Application of Plonky2\n\n### Blockchain projects using Plonky2 and how Plonky2 improves system performance and scalability:\n\n- Mina Protocol: This is currently the smallest blockchain with a size of only about 22KB, using Plonky2 to reduce the size of the blockchain and increase transaction processing speed.\n- Coda Protocol: Similar to Mina Protocol, Coda Protocol uses Plonky2 to reduce the size of the blockchain and increase transaction processing speed.\n- Manta Network: Manta Network is a decentralized finance (DeFi) platform on the Polkadot network, using Plonky2 to reduce the size of the blockchain and increase transaction processing speed.\n- Ergo: Ergo is a new decentralized blockchain, using Plonky2 to reduce the size of the blockchain and increase transaction processing speed.\n\n### Example for using Plonky2\n\nAn example of the use of Plonky2 is in the blockchain system of rewards points for loyalty programs. This system uses Plonky2 to reduce the size of the blockchain and speed up transaction processing.\n\nIn this system, each time a customer makes a purchase or uses the company's service, they will be allocated a number of reward points corresponding to the amount spent. These reward points are recorded on the blockchain and can be used in exchange for other products or services of the company. However, because the number of customers and the number of transactions in the system can be very large, recording every transaction on the blockchain can lead to the blockchain being too large and the transaction processing slow.\n\nTo solve this problem, the system uses Plonky2 to reduce the size of the blockchain. Instead of recording every transaction on the blockchain, the system only stores the transaction summary (transaction summary) as a Merkle tree. Plonky2 is used to confirm these transaction summaries and prove that all the transactions that have been performed are valid. As a result, this reward points blockchain system can process thousands of transactions per second, and the blockchain size increases only slightly if the number of customers and transactions increases.\n\n## Challenge of Plonky2\n\n### Safety and security issues when using Plonky2\n\n![](assets/plonky2_tradeoffs.webp)\n\nDuring authentication, Plonky2 asks the nodes to specify a specific number of Merkle tree elements. However, if a node sends incorrect elements or changes the Merkle tree, it can cause validation errors and affect the integrity of the blockchain. Therefore, ensuring the correctness of the Merkle tree is very important.\n\nIn addition, Plonky2 also depends on the security of the hash system and the elliptic curve. If one of these factors is broken, then the authentication will not be secure and lead to security problems. Another problem for Plonky2 is a preimage attack, where an attacker uses previously known information to find secret hashes. If attacked, Plonky2 will no longer guarantee the integrity of the data. Therefore, when using Plonky2, developers need to pay attention to security and safety issues to ensure the integrity and security of the blockchain system.\n\n### Challenges in implementing and using Plonky2 on different blockchain systems\n\n- Plonky2 Complexity: Plonky2 is a new technology and its complexity can make it difficult to deploy on different blockchain systems.\n- Compatibility: Some blockchain systems have separate processes and features, so integrating Plonky2 into these systems can be difficult.\n- Reliability and security: Deploying Plonky2 requires the reliability and security of the software, and a security incident can lead to the loss of assets and currency.\n- Processing speed: Plonky2 can help speed up transaction processing, but implementation on different blockchain systems may require time and effort to optimize performance.\n- Scalability: Plonky2 is a highly scalable technology, but deployment on different blockchain systems may require different configurations and management to achieve maximum scalability. .\n\n## Compare Plonky 2 with others\n\n- Lightning Network: Lightning Network is a technology developed on the Bitcoin platform to reduce the cost and time of transaction processing. Lightning Network uses an offline payment channel to minimize communication between network nodes and speed up transaction processing. However, Lightning Network does not solve the blockchain size problem like Plonky2.\n- Sharding: Sharding is a method of distributing data across many different nodes to reduce the load on each node and increase transaction processing speed. However, Sharding also faces many challenges in terms of security and compatibility with other systems.\n- Sidechain: Sidechain is a technology that allows the creation of sub-blockchains to process different transactions. These sub-blockchains are linked to the main blockchain and can offload the main blockchain. However, linking between the secondary blockchains and the main blockchain can cause some security issues.\n\n### Comparison between Plonky2 and other technologies in improving the performance and scalability of the blockchain system:\n\n- Plonky2 vs. SegWit: SegWit (Segregated Witness) is a solution used on the Bitcoin network to reduce transaction size and increase processing speed. However, SegWit cannot solve the problems related to network scalability. Meanwhile, Plonky2 uses a number of different techniques such as Merkle tree and non-interactive attestation to reduce blockchain size and speed up transaction processing, while improving the scalability of the system.\n- Plonky2 vs. Lightning Network: Lightning Network is a technology used to reduce costs and speed up transaction processing on the Bitcoin network. However, Lightning Network cannot solve the problem of network scalability. Meanwhile, Plonky2 reduces the blockchain size and increases transaction processing speed without compromising the safety and security of the system, while improving the scalability of the network.\n- Plonky2 vs. Sharding: Sharding is a solution used to improve the scalability of the blockchain system by dividing the blockchain into parts and processing them independently. However, Sharding has limitations on the safety and security of the system. Meanwhile, Plonky2 helps to reduce blockchain size and speed up transaction processing without affecting the safety and security of the system.\n- Plonky2 vs. Plasma: Plasma is a solution used to improve Ethereum's scalability by layering and processing transactions on sidechains. \n\n## Reference\n\n- https://polygon.technology/blog/plonky2-a-deep-dive\n- https://github.com/mir-protocol/plonky2\n- https://hackernoon.com/zero-knowledge-proof-algorithm-plonk-circuit-sin7y-tech-review-16\n- https://vitalik.ca/general/2019/09/22/plonk.html\n- https://zkresear.ch/t/composition-of-proof-systems/43\n","title":"Plonky2","short_title":"","description":"Plonky2 is a non-Interactive Proof of Proof of Knowledge (NIPoPoK) chain that reduces blockchain size and speeds up transaction confirmations. This article explores Plonky2's technology, its applications in various blockchain projects, and compares it with other scaling solutions.","tags":["blockchain","proof-of-knowledge"],"pinned":false,"draft":false,"hiring":false,"authors":["thanhpn"],"date":"Tue Feb 28 2023 00:00:00 GMT+0000 (Coordinated Universal Time)","filePath":"playground/blockchain/plonky2.md","slugArray":["playground","blockchain","plonky2"]},{"content":"\n## Polygon zkEVM Architecture\n\nThe main purpose of this architecture is Efficiency, the first strategy is incentivize the most efficient aggregators to participate in the proof generation process. The second is move all computation off-chain but keep only the necessary data zk-proof on-chain. Make the bridge decentralize. Utilization of special cryptographic primitive within the zkProver in order to speed up computation and minimize proof size.\n\n![](assets/polygon-zkevm-architecture_polygon-zkevm.webp)\n\n### Main components:\n\n- **Proof of Efficiency** is a consensus mechanism based on an automatically conducted decentralized auction, with participants bidding on a certain amount of tokens to be selected to create the next batch added support for permissionless participation of multiple coordinators to create batches in L2\n- **zkNode** is software to be run by any zkEVM node, it not required to install Synchronization and adjust the roles of the participants. They can join as a node to know the state of the network, or can participate in production processing in any role: Sequencer or Aggregator.\n  - Synchronizer\n  - Sequencer & Aggregators\n  - RPC\n\n![](assets/polygon-zkevm-architecture_fig3-zknode-arch-aa4d18996fba1849291ea18e3f11d955.webp)\n\n- **zkProver** is techinal to create validity proof using zero-knowledge. it consists of a main state machine executor ( a collection of secondary state machines), a STARK proof builder, and a SNARK-proof builder. All valid batch must satisfy specific polynomial constraint.\n\n![](assets/polygon-zkevm-architecture_polygon-zkprover.webp)\n\n- **LX-to-Ly Bridge** is a smart contract can help users transfer assets between two layers.\n\n### How does it work?\n\n#### What is Proof of Efficiency?\n\nPoE solve the problem relate to decentralized and permissionless validators in Layer 2. Using zk-STARK for proving purpose, this proof are very fast but they are very big size. So, using zk-SNARK to attest to the correctness of the zk-STARK proofs. This help in reducing the gas cost from 5M to 350k.\n\n**Sequencer** create a batch of Layer 2 transaction from users and so select and pre-process a new L2 batch in network by sending a L1 tx with the data of all selected Layer 2 TXs. The transaction in L2 will be in format on L1 transaction with information in the **CALLDATA**, it will be used as the data available for the L2 network and L2 node will be able to synchronize the state. The new state is settled (validity proof of new state is generated and mined in L1) these data availability on L1 transaction define the L2 TXs that will be executed in specific order.\n\nThe batch is process when the sequencer to do base on the incentives they have:\n\n![](assets/polygon-zkevm-architecture_1b54ce784c821f34b8d5d7218850095a84c9e054.webp)\n\n**Aggregators** receives all transaction information form Sequencer and send it to prover to get proof and send proof to smart contract to check. The first aggregator submit the proof will earn the right to create the validity proof of new state of the Layer 2\n\n![](assets/polygon-zkevm-architecture_6066873078dcd11f9ef93601eba9237c52cbf11a.webp)\n\nThis mechanism will avoid control of a single party and many of the potential attacks, since any Sequencer can propose a batch, but there is a cost on it.\n\n#### How to incentivization for Sequencer and Aggregators?\n\nThe two permissionless participants of the zkEVM network are: Sequencers and Aggregators. Proper incentive structures have been devised to keep the zkEVM network fast and secure. Below is a summary of the fee structure for Sequencers and Aggregators:\n\n- **Sequencer**\n  - Collect transactions and publish them in a batch\n  - Receive fees from the published transactions\n  - Pay L1 transaction fees + MATIC (depends on pending batches)\n  - MATIC goes to Aggregators\n  - Profitable if: txs fees > L1 call + MATIC fee\n- **Aggregator?**\n  - Process transactions published by Sequencers\n  - Build zkProof\n  - Receive MATIC from Sequencer\n  - Static Cost: L1 call cost + Server cost (to build a proof)\n  - Profitable if: MATIC fee > L1 call + Server cost\n\n#### zkEVM\n\nzkEVM was design to take advantage of ZK folklore to minimize size validity proof for validation, reduce transaction finality time and save gas costs.\n\n![](assets/polygon-zkevm-architecture_polygon-zk-prover-design-approach.webp)\n\n#### zkProver\n\nHave 4 main components:\n\n- The Executor, which is the Main State Machine Executor\n- The STARK Recursion Component\n- The CIRCOM Library\n- The zk-SNARK Prover\n\nProver generate verifiable proof process:\n\n![](assets/polygon-zkevm-architecture_fig-main-prts-zkpr.webp)\n\nYou can read more [here](https://docs.hermez.io/zkEVM/zkProver/Overview/zkProver-Overview/#the-stark-recursion-component)\n\n#### Bridge flow\n\n**The Bridge L1 contract** have two operations, it requires two Merkle trees in order to work: globalExitTree and mainnet exit tree.\n\n- **bridge** transfer asset from one rollup to another\n- **claim** make claim from any rollup\n\n**The Bridge L2 contract** named the global exit root manager L2 is responsible for managing the exit roots across multiple networks.\n\n#### RPC\n\nProvide a RPC interface compatible with ethereum so application like Metamask, etherscan can connect and interact. RPC also add transactions o the pool and interact with the state via read-only methods.\n\n#### State\n\nState implement a Merkle Tree and connect to DB backend. it checks integrity of block, transaction information. State also stores smart contract code in to the merkle tree and process transaction using EVM.\n\n## Reference\n\n- [Polygon zkEVM documentation](https://docs.hermez.io/zkEVM/Basic-Concepts/Intro-zkProver%27s-Design-Approach/)\n- [Proof of Efficiency](https://ethresear.ch/t/proof-of-efficiency-a-new-consensus-mechanism-for-zk-rollups/11988)\n- [LX-to-LY Bridge](https://wiki.polygon.technology/docs/zkEVM/lx-ly-bridge)\n- [zkEvm](https://wiki.polygon.technology/docs/zkEVM/proof-of-efficiency)\n- [Repo zkevm](https://github.com/0xPolygonHermez/zkevm-node)\n- [Polygon zkEVM](https://mirror.xyz/msfew.eth/JJudP_Kf-IS6VhbF-qU0BUor1Ap6SFEb0TzYOHZ34Rc)\n","title":"Polygon zkEVM architecture","short_title":"","description":"This article provides an overview of the Polygon zkEVM architecture, including its main components, how it works, and its benefits.","tags":["blockchain","evm","zk-rollup","polygon"],"pinned":false,"draft":false,"hiring":false,"authors":["thanhpn"],"date":"Tue Jan 03 2023 00:00:00 GMT+0000 (Coordinated Universal Time)","filePath":"playground/blockchain/polygon-zkevm-architecture.md","slugArray":["playground","blockchain","polygon-zkevm-architecture"]},{"content":"\nUnlike most blockchain, Solana separates logic and data into two separate components: Program and Account. What that means is that instead of storing data inside variables internally, Programs interact with external data stored in Accounts with the ability to mutate them.\n\n## Account model\n\nThere are 3 kinds of accounts:\n\n- Data accounts store data (which we use the most).\n  - System owned accounts.\n  - PDA(Program Derived Address) accounts.\n- Program accounts store executable programs.\n- Native accounts that indicate native programs on Solana such as System, Stake and Vote.\n\nEach account has an address (usually a public key) and an owner (address of a program account). The full field list an account stores is found below.\n\n| Field      | Description                                    |\n| ---------- | ---------------------------------------------- |\n| lamports   | The number of lamports owned by this account   |\n| owner      | The program owner of this account              |\n| executable | Whether this account can process instructions  |\n| data       | The raw data byte array stored by this account |\n| rent_epoch | The next epoch that this account will owe rent |\n\n## Ownership rules\n\nThere are a few important ownership rules:\n\n- Only a data account's owner can modify its data and debit lamports.\n- Anymore is allowed to credit lamports to a data account.\n- The owner of an account may assign a new owner if the account's data is zeroed out.\n\nTechnically, the Programs are special kinds of Accounts marked as `executable` whose entire purpose is to store the compiled code of Program. The program accounts do not store state.\n\nFor example, if you create a counter program that lets you increment a counter, you must create two accounts, one account (account A) to store the program's code (`executable = true`), and one (account B) to store the counter value and account A must be the owner of account B.\n\n![](assets/solana-account_account_example.5b70d95a.jpeg.webp)\n\n## Rent\n\n- Storing data on accounts costs SOL to maintain, and it is funded by what is called `rent`.\n- An account is considered rent-exempt if it holds at least 2 years worth of rent. Currently, all new accounts are required to be rent-exempt.\n- Use the `getMinimumBalanceForRentExemption` RPC endpoint to calculate the minimum balance for a particular account size.\n- If the account does not have enough to pay rent, the account will be deallocated and the data removed.\n\n## References\n\n- https://docs.solana.com/developing/programming-model/accounts\n- https://solanacookbook.com/core-concepts/accounts.html\n","title":"Solana Account","short_title":"","description":"This article provides an overview of Solana accounts, including their structure, types, and how they work.","tags":["blockchain","solana"],"pinned":false,"draft":false,"hiring":false,"authors":["khacvy"],"date":"Thu Nov 17 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","filePath":"playground/blockchain/solana-account.md","slugArray":["playground","blockchain","solana-account"]},{"content":"\n## Introduction\n\nSolana is a high-performance blockchain platform designed for decentralized applications and cryptocurrencies. Known for its fast transaction speeds and low costs, Solana uses a unique consensus mechanism called Proof of History (PoH) to achieve high throughput and scalability. It supports a growing ecosystem of decentralized finance (DeFi) projects, non-fungible tokens (NFTs), and other applications.\n\nTo help everyone understand Solana to write smart contracts on it, this article will introduce the core concepts of Solana.\n\n## Accounts\n\nAccounts are where data is stored on the Solana blockchain*.* Accounts can store up to 10MB of data, which consit of either excutable program code or program state. Accounts require a rent deposit in SOL, proportional to the amount of data stored, which is fully refundable when the account is closed. Every account has a program \"owner\". Only the program that owns an account can modify it data.\n\n![](assets/solana-core-concepts-1.webp)\n\n## Types of Accounts\n\nThere are two types of accounts on the Solana blockchain: executable and non-executable. Programs are executable accounts and store the immutable code of a program. Data storage and token balances are stored in non-executable accounts as their data can be changed. To control who can change this data, non-executable accounts have an owner program address assigned to them.\n\nFor each type of account, there will be typical accounts.\n\n![](assets/solana-core-concepts-2.webp)\n\nData accounts store data\n\nProgram accounts store executable programs\n\nNative accounts that indicate native programs on Solana such as System, Stake, and Vote\n\nWithin data accounts, there are 2 types:\n\n- System owned accounts\n- PDA (Program Derived Address) accounts\n\n## Programs\n\nSolana Programs, often called \"smart contracts\" on other blockchains, are the executable code that interprets the instructions sent inside of each transaction on the blockchain. They can be deployed directly into the network’s core as Native Programs or published by anyone as On Chain Programs. Programs are the core building blocks of the network and handle everything from sending tokens between wallets to accepting votes of DAOs, to tracking ownership of NFTs.\n\nUnlike most other blockchains, Solana completely separates code from data. All data that programs interact with are stored in separate accounts and passed in as references via instructions. This model allows for a single generic program to operate across various accounts without requiring additional deployments.\n\n## Types of programs\n\nThe Solana blockchain has two types of programs:\n\n- Native programs\n- On chain programs\n\nNative programs are those built directly into the core of the Solana blockchain. These programs are divided into [Native Programs](https://docs.solana.com/developing/runtime-facilities/programs#bpf-loader) and [Solana Program Library (SPL) Programs](https://spl.solana.com/).\n\nOn chain programs is user-written programs, often called \"smart contracts\" on other blockchains, are deployed directly to the blockchain for anyone to interact with and execute.\n\n## Transactions and Instructions\n\nOn Solana, we send transactions to interactions with the network. Transactions include one or more instructions, each representing a specific operation to be processed. The execution logic for instructions is stored on programs deployed to the Solana network, where each program stores its own set of instructions.\n\n![](assets/solana-core-concepts-3.webp)\n\nAn instruction is a request to process a specific action on-chain and is the smallest contiguous unit of execution logic in a program. You can imagine a instruction as a function which handles logic on web2.\n\nEach instruction must include the following information:\n\n- Program address: Specifies the program being invoked.\n- Accounts: Lists every account the instruction reads from or writes to, including other programs.\n- Instruction Data: A byte array that specifies which instruction handler on the program to invoke, plus any additional data required by the instruction handler (function arguments).\n\n![](assets/solana-core-concepts-4.webp)\n\n## Program Derived Addresses (PDAs)\n\nPDAs are addresses that are deterministically derived and look like standard public keys, but have no associated private keys. This means that no external user can generate a valid signature for the address. However, the Solana runtime enables programs to programmatically \"sign\" for PDAs without needing a private key.\n\n![](assets/solana-core-concepts-5.webp)\n\nPDA was created can sign transactions to modify its data. That is very useful when you need storage that can only be modifiable by your program.\n\n## Cross Program Invocations (CPIs)\n\nA Cross Program Invocation (CPI) refers to when one program invokes the instructions of another program. This mechanism allows for the composability of Solana programs.\n\nYou can think of instructions as API endpoints that a program exposes to the network and a CPI as one API internally invoking another API.\n\n![](assets/solana-core-concepts-6.webp)\n\nWhen a program initiates a Cross Program Invocation (CPI) to another program:\n\n- The signer privileges from the initial transaction invoking the caller program (A) extend to the callee (B) program.\n- The callee (B) program can make further CPIs to other programs, up to a maximum depth of 4 (ex. B->C, C->D).\n- The programs can \"sign\" on behalf of the PDAs derived from its program ID.\n\n## References\n\nhttps://solana.com/docs\n","title":"Solana core concepts","short_title":"","description":"build a strong understanding of the core concepts that make Solana different from other blockchains.","tags":["blockchain","solana","anchor"],"pinned":false,"draft":false,"hiring":false,"authors":["huymaius"],"date":"Tue Jun 18 2024 00:00:00 GMT+0000 (Coordinated Universal Time)","filePath":"playground/blockchain/solana-core-concept.md","slugArray":["playground","blockchain","solana-core-concept"]},{"content":"\n## StarkNet layer 2 solution\n\nStarkNet is a layer 2 blockchain solution using ZK rollup, it provides StarkDex technology for well-known applications such as dYdX, ImmutableX, Sorare. It allows decentralized exchanges to process transactions with fast speed and low costs. Its essence is to reduce computations, store on-chain, replace with off-chain computations and store off-chain, Store balance using merkle tree with root merkle tree stored on-chain\n\n![](assets/starknet-architecture_starkdex.webp)\n\n## StarkNet architecture overview\n\nThe system consists of 6 main components:\n\n- **User account** is a smart contract and expands the ability to create a recovery mechanism that depends on social information such as friends, family, colleagues, can handle offline authentication instead of use seed phrases. There is now an Argent X wallet that uses this method.\n- **Sequencer** validates off-chain transactions, manages orders, verifies and bundles transactions into blocks. The system has only 1 sequencer to ensure it works consistently. It also uses a virtual machine similar to EVM called Cairo\n- **Prover** generates proof to verify transactions wrapped by sequencer to generate global state by processing transactions in new block. To generate a valid proof it requires an execution trace of the Sequencer's computations. Prover generates proof for all other applications running on StarkEx.\n- **Full Node** is a component that keeps a record of all transactions made during the rollup and tracks the global state of the network. They communicate p2p sharing information about the global state and validating every time a new block is created.\n- **Verifier** is a smart contract running on Layer 1 Ethereum that is responsible for verifying on-chain proofs generated by Prover and transactions on Layer 1. Verification results are sent to smart contract StarkNet Core for storage. and mark the start of a new set of transactions on Layer 1 from StarkNet to update the Global state on-chain.\n- **StarkNet Core** Is a smart contract running on layer 1 that receives changes to Layer 2 global state from StarkNet every time there is a new L2 block and its proof is successfully verified on-chain by Verifier. StarkNet Fullnode will decrypt the data in the \"call data\" to recreate the history of the network on the first sync\n\n## How does it work\n\nThe process consists of four steps:\n\n1. **Batching** is Sequencer, groups together multiple transactions into a batch for processing. The entired batch is submit on-chain as a single compressed state update with a proof.\n2. **Validating & Updating** The update is then compressed in the form of a hash on the entire state of the system : ℎ(ℎ(ℎ(class_hash,storage_root),0),0) Where:\n\n- class_hash is the hash of the contract’s definition discussed here\n- storage_root is the root of another Merkle-Patricia tree of height 251 that is constructed from the contract’s storage\n- ℎ is the Pedersen hash function.\n\n3. **Generating a Proof** Once the batch transaction is processed, StarkEx generates a STARK proof to confirm the correctness of the transactions.\n4. **On-chain Verification** Once the proof is verified, the state update is committed and settled on layer 1 Ethereum\n\n## Messaging Mechanism\n\nContracts on L2 can interact asynchronously with contracts on L1 via the L2→L1 messaging protocol.\n\n![](assets/starknet-architecture_starknet-current-architecture.webp)\n\nContracts on L1 can interact asynchronously with contracts on L2 via the L1→L2 messaging protocol. The protocol consists of the following stages:\n\n![](assets/starknet-architecture_starknet-l1l2.webp)\n\n## StarkNet transaction lifecycle\n\nWhen the transaction is submitted to the StarkNet, it is sent to the Sequence node. **Sequencer** takes a batch of transactions and generates:\n\n- List of changes made by transactions (storage, balance, data...)\n- As a proof, if every transaction in the batch is successfully processed compared to the previous state of the network then the result will be the list of changes listed previously.\n\n![](assets/starknet-architecture_starknet-transactions-states.webp)\n\n## Node clients\n\nStarkNet nodes use the [Pathfinder](https://github.com/eqlabs/pathfinder) or the [Juno](https://github.com/NethermindEth/juno) client and they are similar to the nodes running Go Ethereum\n\n## Reference\n\n- [StarkDEX Deep Dive : Introduction](https://medium.com/starkware/starkdex-deep-dive-introduction-7b4ef0dedba8)\n- [StarkNet’s Architecture Review](https://david-barreto.com/StarkNets-architecture-review/)\n- [StarkNet docs](https://docs.StarkNet.io/documentation/)\n\n### Smart contract\n\n- [StarkNet core](https://etherscan.io/address/0xc662c410c0ecf747543f5ba90660f6abebd9c8c4)\n- [StarkNet Operator](https://etherscan.io/address/0x2c169dfe5fbba12957bdd0ba47d9cedbfe260ca7)\n","title":"StarkNet architecture","short_title":"","description":"This article provides an overview of StarkNet's architecture, including its main components, how it works, and its transaction lifecycle. It also covers the messaging mechanism between Layer 1 and Layer 2, as well as the node clients used in the StarkNet network.","tags":["blockchain","evm","zk-rollup","StarkNet"],"pinned":false,"draft":false,"hiring":false,"authors":["thanhpn"],"date":"Mon Dec 26 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","filePath":"playground/blockchain/starknet-architecture.md","slugArray":["playground","blockchain","starknet-architecture"]},{"content":"\nTON (The Open Network) is a blockchain platform originally developed by the team behind Telegram Messenger. By taking advantage of unique sharding technology, Multi-blockchain architecture and Instant Hypercube Routing protocol, TON aims to enable fast transactions and smart contracts with a high level of scalability and security.\n\nTo understand what actually happens under these shiny names of technologies, this post will dissect one by one in the simplest way.\n\n## Actor model, Everything is a Smart Contract\n\n![](assets/ton_blockchain_of_blockchains_ton-actor-model.webp)\n\nFirstly, TON is a concurrency model that facilitates the efficient execution of smart contracts and other decentralized applications by organizing computational entities (actors) that interact through message passing. So technically, every actor in TON is represented as a smart contract including our wallet which can be considered as a simple actor.\n\nEach actor has its own storage and behavior. We can imagine that storage is the location where we will store the state of the actor or some other data. So we can temporarily avoid it here, and go to the detail in another post where we will prepare for writing our first smart contract on TON. The main point that I want to bring to you in this post is \"What does the actor do?\"\n\n## Actor behavior\n\nTake a look at the following image. It is actually the sequence of jobs that an actor actually does.\n\n![](assets/ton_blockchain_of_blockchains_ton-actor-behavior.webp)\n\n1. Event Trigger: An actor is typically activated upon receiving a message.\n2. Event Handling: The actor routes the event to the appropriate handler in its `contract code`, utilizing its properties to process the event in the TVM (TON Virtual Machine).\n3. State Modification: During event execution, the actor can modify its own properties such as its `contract code` or `data`.\n4. Message Generation: Optionally, the actor can generate outgoing messages.\n5. Standby Mode: After processing the event, the actor returns to standby mode to wait for the next event.\n\nFinally, when we combine all the above steps together, it will result in a transaction.\n\n## Chain and shard\n\n![](assets/ton_blockchain_of_blockchains_ton_chain_of_txs.webp)\n\nWe basically have a transaction after the behavior of any actor is done. Then when there is more than one transaction in a sequence, it may be called a **chain**. In case it is a chain of transactions that is owned by a single account, it is called `AccountChain`.\n\n![](assets/ton_blockchain_of_blockchains_ton_account_chain.webp)\n\nThen a group of account chains will be stored in the same location called shard called **AccountShard**. In the same way build an **AccountChain**, **ShardChain** which is a chain of **AccountShard**, and **BlockChain** which is the chain of all shards.\n\nIn TON, we can consider that have 2 types of **BlockChain**\n\n- Workchain: Blockchain with your own rules - This is the Blockchain that will run normal transactions such as swaps, transfers, etc.\n- Masterchain: Blockchain of Blockchains - This is the Blockchain that manages other Workchains for the synchronization of message routing and transaction execution. Under the hood, it is also considered as a Workchain.\n\nCurrently, TON has 2 chains, Masterchain and Basechain.\n\n![](assets/ton_blockchain_of_blockchains_ton_blockchain.webp)\n\n## Splitting and Merging, What makes TON more scalable?\n\nBecause a **ShardChain** is composed of distinct **AccountChains**, it can be easily divided.\n\nFor instance, if a **ShardChain** manages events for one million accounts but encounters a transaction volume too high for a single node to handle, we can split this chain.\n\nBy dividing it into two smaller **ShardChains**, each responsible for half a million accounts, we ensure each new chain is processed by a different subset of nodes.\n\nSimilarly, if certain shards become underutilized, they can be combined into a larger shard.​⬤\n\n> Side note from TON document: To make splitting and merging deterministic, an aggregation of AccountChains into shards is based on the bit-representation of account addresses. For example, address looks like (shard prefix, address). That way, all accounts in the shardchain will have exactly the same binary prefix (for instance all addresses will start with 0b00101).\n\n#### Instant Hypercube Routing\n\nIn the infinite sharding approach, every account aka smart contract is treated as if it were itself in a separate **ShardChain**. Accounts interact only by sending messages to one another, adhering to the actor model where each account operates as an independent actor.\n\nSo TON needs an efficient way to deliver and process messages between **ShardChain**. It is Instant Hypercube Routing with the following characteristics\n\n- Hypercube Structure: Network as a hypercube with shards as vertices and communication paths as edges.\n- Multi-Dimensional Routing: Shards are addressed by binary strings; routing involves flipping bits in the address.\n- Scalability: Efficiently scales with more shards; each shard knows a logarithmic number of neighbors.\n- Instant Routing: Rapid message propagation through direct communication paths.\n- Fault Tolerance: Multiple alternative paths ensure robustness despite shard or path failures.\n\nIf it is hard to imagine, in some aspects, you can take a look at **E-Cube Routing** to get the idea.\n\n![](assets/ton_blockchain_of_blockchains_e_cute_routing.webp)\n\n## Conclusion\n\nIn summary, TON stands out as a “blockchain of blockchains” due to its advanced architecture and design principles. Its use of unique technologies like sharding, the Actor model, and Instant Hypercube Routing allows it to achieve high scalability, fast transactions, and robust security. By seamlessly integrating multiple blockchains into a unified network, TON not only enhances interoperability but also paves the way for a more connected and efficient decentralized ecosystem. Whether you’re a developer or a blockchain enthusiast, understanding the inner workings of TON offers valuable insights into the future of blockchain technology.\n","title":"Ton: Blockchain of blockchains","short_title":"","description":"Talk about TON and its core technologies. Why do we call TON the \"Blockchain of blockchains\"?","tags":["web3","blockchain","ton"],"pinned":false,"draft":false,"hiring":false,"authors":["bievh"],"date":"Thu Jul 11 2024 00:00:00 GMT+0000 (Coordinated Universal Time)","filePath":"playground/blockchain/ton_blockchain_of_blockchains.md","slugArray":["playground","blockchain","ton_blockchain_of_blockchains"]},{"content":"\nIn my previous post, [Ton: Blockchain of Blockchains](ton_blockchain_of_blockchains.md), I talked about some core technologies that make TON strong. However, it was just an overview. To begin developing on TON is not enough. Today, I will introduce some core concepts in TON that you will frequently work with as a TON developer.\n\n## Cells and Data Storage\n\n**Cells are the atomic unit of data storage in TON**. It is a data structure containing:\n\n![](assets/ton_core_concept_ton_cell.webp)\n\n- Up to 1023 bits of data\n- Up to 4 references to other cells\n\nCurrently, TON has 2 types of cells: ordinary and exotic\n\n- ordinary: basic, standard cell.\n- exotic: specialized cells with specific functions.\n  - Pruned Branch Cell: represents a pruned branch in a data structure.\n  - Library Reference Cell: references external libraries or modules.\n  - Merkle Proof Cell: contains proofs for verifying data in a Merkle tree.\n  - Merkle Update Cell: contains information to update a Merkle tree.\n\nWhen serializing cells into byte arrays, it is called Bag of cells. **Every data stored on TON including blocks and the state of the network is a bag of cells.**\n\n![](assets/ton_core_concept_ton_bag_of_cells.webp)\n\n## Smart contract\n\nAs mentioned in the previous post, everything in TON is a smart contract. That contains:\n\n- Address: (workchain_id, account_id) pairs present smart contract as a unique identifier.\n- Code: code that can be run on TVM, and represents the rule and business logic of this contract.\n- Data: the state of the smart contract, includes variables that store information and can be modified by the contract’s code.\n- Balance: the amount of TON held by the contract.\n- Others: flags requesting tick-tock calls at each block (active only for fundamental contracts), auto-splitting information and published library cells, etc.\n\n## Message\n\n![](assets/ton_core_concept_ton_message_flow.webp)\n\nTo communicate between smart contracts aka actors on TON network, we need to send messages. A message is a package of data that contains the following elements:\n\n- Source Address: Sender’s address.\n- Destination Address: Receiver’s address.\n- Value: Amount of Toncoins being transferred.\n- Payload: Data or instructions for the recipient.\n- State Init: Optional initialization data for the recipient.\n\nWe have 2 types of messages:\n\n- Internal Messages: Facilitate communication and value transfer between smart contracts within the TON network. They are used for contract-to-contract interactions.\n- External Messages: Allow users and external entities to interact with smart contracts. They are typically used to invoke functions or services provided by the smart contracts.\n\n## Transaction\n\nOn TON, we have the transaction that records the state changes of processing a message. That basically contains:\n\n- Inbound Message: The message that triggered the transaction.\n- State Changes: Modifications to the account or smart contract state, such as balance updates or data modifications.\n- Outbound Messages: Any new messages generated as a result of processing the inbound message.\n- Gas Fees: Computational resources consumed during the transaction.\n\nNot every transaction leads to outgoing messages or updates to the contract’s storage; this depends on the specific actions defined by the contract’s code.\n\nOne more important point to note is that unlike Ethereum or most other synchronous blockchains, where each transaction can contain several smart contract calls, in TON, **a transaction is executed on a single smart contract, and smart contracts communicate through messages.**\n\n## Gas\n\nIn Solidity, gas concerns are minimal for contract developers. If a user provides insufficient gas, the transaction will be completely reverted (though the gas spent will not be refunded). If sufficient gas is provided, the actual costs will be calculated and deducted from the user’s balance automatically.\n\nIn TON, the scenario differs:\n\n- Insufficient gas leads to partial transaction execution.\n- Excess gas must be refunded, a responsibility falling on the developer.\n- When multiple contracts exchange messages, each message requires individual control and calculation.\n\nTON does not automatically calculate gas. The entire transaction execution, with all its outcomes, can be lengthy, potentially leaving the user with an insufficient toncoin balance by the end. **So the developer must take care of gas costs**. However, calculating gas is not an easy task. So we often need to set a minimum gas limit for each transaction, then refund the excess gas later. For example:\n\n- Today, every transaction costs around ~0.005 TON.\n- And NFT marketplaces usually take an extra amount of TON (~1 TON) and return (1 - transaction_fee) later.\n\n> FYI: Fee formula on TON transaction_fee = storage_fees\n\n    + in_fwd_fees\n    + computation_fees\n    + action_fees\n    + out_fwd_fees\n\n## Conclusion\n\nWith all the above concepts, we can now begin developing on TON. But these are actually not enough. We will continue diving deep into more complex concepts such as data format, transaction layout, or bounceable addresses when developing something in the next post.\n","title":"Ton's base concepts","short_title":"","description":"Base concepts to begin with TON development","tags":["web3","blockchain","ton"],"pinned":false,"draft":false,"hiring":false,"authors":["bievh"],"date":"Wed Jul 17 2024 00:00:00 GMT+0000 (Coordinated Universal Time)","filePath":"playground/blockchain/ton_core_concept.md","slugArray":["playground","blockchain","ton_core_concept"]},{"content":"\n## Overview of Foundry\n\nFoundry is a blazingly fast, portable, and modular toolkit for Ethereum application development written in Rust. It consists of three main components:\n\n- **Forge**: Testing framework for Ethereum smart contracts\n- **Cast**: Swiss army knife for interacting with EVM smart contracts\n- **Anvil**: Local Ethereum node designed for development\n\n![](assets/web3-development-with-foundry-00.jpg)\n\n## Why others not using Hardhat?\n\nFoundry's Rust-based architecture makes testing much faster than JavaScript alternatives. Security teams and auditors prefer working directly in Solidity without translation layers. The framework's adoption has grown quickly in 2024, especially for high-value contracts where performance and reliability matter.\n\nFoundry's terminal-based workflow cuts out JavaScript overhead, making it perfect for developers who want to work closer to the metal. Security teams love its deterministic environment when dealing with complex contracts.\n\n![](assets/web3-development-with-foundry-01.jpg)\n\n## Why we not using Hardhat?\n\nHardhat's lack of ESM support in TypeScript projects forced us to use outdated CommonJS modules. Since our frontend and services already use ESM, this created unnecessary friction in our development workflow. Foundry's language-agnostic approach lets us maintain a consistent ESM-based architecture across our entire stack.\n\n## Core benefits of Foundry\n\n**Development Speed**: Foundry accelerates development through fast compilation, native Solidity testing, and quick feedback loops, with benchmarks showing it's consistently 1.5-11x faster than Hardhat and up to 335x faster than Dapptools.\n\nThe platform offers **Modern Developer Experience** with built-in fuzzing that can run 10,000 tests in seconds to find edge cases, powerful debugging tools for precise error identification, and comprehensive gas optimization features that help create efficient contracts.\n\nFor **Flexibility**, Foundry seamlessly integrates with existing toolchains while supporting multiple EVM chains through its comprehensive toolkit consisting of Forge (for testing), Cast (for contract interaction), and Anvil (local Ethereum node), making it adaptable to various project requirements and easily incorporated into CI/CD pipelines for automated testing and deployment.\n\nIn our projects, we've seen these benefits firsthand. Our team uses Foundry's fast testing to catch issues early in development, while the native Solidity testing helps us write more accurate tests. The gas optimization features have helped us reduce deployment costs by up to 30% in some cases. We particularly value the deterministic environment when working on complex DeFi contracts where every gas optimization matters.\n\n## What we actually do?\n\n### Dealing with dependencies and remapping\n\n![](assets/web3-development-with-foundry-02.jpg)\n\n#### Git Submodules (Traditional Approach)\n\n```bash\nforge install OpenZeppelin/openzeppelin-contracts --no-commit\ngit submodule update --init --recursive\n```\n\n#### Modern package management with Bun\n\n```bash\nbun init\nbun add -d @openzeppelin/contracts\n```\n\nConfigure remappings in `remappings.txt`:\n\n```text:remappings.txt\n@openzeppelin/=node_modules/@openzeppelin/\nds-test/=lib/forge-std/lib/ds-test/src/\nforge-std/=lib/forge-std/src/\n```\n\n### Deploying and testing a Smart Contract\n\nWe'll build an upgradeable ERC-1155 contract for game items (GOLD, SILVER, SWORD, SHIELD) using Foundry. This example shows how to:\n\n- Implement and test smart contracts\n- Set up deployment scripts\n- Handle contract upgrades using the UUPS upgrade pattern\n\n#### Implement a basic ERC-1155 contract\n\nFirst, let's create an upgradeable ERC-1155 contract:\n\n```solidity:src/GameItems.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\n\ncontract GameItems is Initializable, ERC1155Upgradeable, OwnableUpgradeable, UUPSUpgradeable {\n    // Item IDs\n    uint256 public constant GOLD = 0;\n    uint256 public constant SILVER = 1;\n    uint256 public constant SWORD = 2;\n    uint256 public constant SHIELD = 3;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    function initialize() public initializer {\n        __ERC1155_init(\"https://game.example/api/item/{id}.json\");\n        __Ownable_init();\n        __UUPSUpgradeable_init();\n\n        // Mint initial items\n        _mint(msg.sender, GOLD, 10**18, \"\");\n        _mint(msg.sender, SILVER, 10**27, \"\");\n        _mint(msg.sender, SWORD, 1000, \"\");\n        _mint(msg.sender, SHIELD, 1000, \"\");\n    }\n\n    function mint(address account, uint256 id, uint256 amount) \n        public \n        onlyOwner \n    {\n        _mint(account, id, amount, \"\");\n    }\n\n    function _authorizeUpgrade(address newImplementation)\n        internal\n        onlyOwner\n        override\n    {}\n}\n```\n\n#### Writing tests for our contract\n\nCreate comprehensive tests for the contract:\n\n```solidity:test/GameItems.t.sol\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\nimport \"forge-std/Test.sol\";\nimport \"../src/GameItems.sol\";\nimport \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\";\n\ncontract GameItemsTest is Test {\n    GameItems public implementation;\n    GameItems public gameItems;\n    address public owner;\n    address public user1;\n\n    function setUp() public {\n        owner = address(this);\n        user1 = address(0x1);\n        \n        // Deploy implementation\n        implementation = new GameItems();\n        \n        // Deploy proxy\n        bytes memory initData = abi.encodeWithSelector(\n            GameItems.initialize.selector\n        );\n        ERC1967Proxy proxy = new ERC1967Proxy(\n            address(implementation),\n            initData\n        );\n        gameItems = GameItems(address(proxy));\n    }\n\n    function testInitialBalance() public {\n        assertEq(gameItems.balanceOf(owner, gameItems.GOLD()), 10**18);\n        assertEq(gameItems.balanceOf(owner, gameItems.SILVER()), 10**27);\n        assertEq(gameItems.balanceOf(owner, gameItems.SWORD()), 1000);\n        assertEq(gameItems.balanceOf(owner, gameItems.SHIELD()), 1000);\n    }\n\n    function testMinting() public {\n        gameItems.mint(user1, gameItems.GOLD(), 100);\n        assertEq(gameItems.balanceOf(user1, gameItems.GOLD()), 100);\n    }\n\n    function testFailMintingUnauthorized() public {\n        vm.prank(user1);\n        vm.expectRevert(\"Ownable: caller is not the owner\");\n        gameItems.mint(user1, gameItems.GOLD(), 100);\n    }\n\n    function testBatchTransfer() public {\n        uint256[] memory ids = new uint256[](2);\n        ids[0] = gameItems.GOLD();\n        ids[1] = gameItems.SILVER();\n        \n        uint256[] memory amounts = new uint256[](2);\n        amounts[0] = 100;\n        amounts[1] = 200;\n\n        gameItems.safeBatchTransferFrom(\n            owner,\n            user1,\n            ids,\n            amounts,\n            \"\"\n        );\n\n        assertEq(gameItems.balanceOf(user1, gameItems.GOLD()), 100);\n        assertEq(gameItems.balanceOf(user1, gameItems.SILVER()), 200);\n    }\n}\n```\n\n#### Add a deployment script\n\nCreate a deployment script that handles both the implementation and proxy deployment:\n\n```solidity:script/GameItems.s.sol\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\nimport \"forge-std/Script.sol\";\nimport \"../src/GameItems.sol\";\nimport \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\";\n\ncontract GameItemsScript is Script {\n    function run() public {\n        uint256 deployerPrivateKey = vm.envUint(\"PRIVATE_KEY\");\n        \n        vm.startBroadcast(deployerPrivateKey);\n\n        // Deploy implementation\n        GameItems implementation = new GameItems();\n        \n        // Prepare initialization data\n        bytes memory initData = abi.encodeWithSelector(\n            GameItems.initialize.selector\n        );\n\n        // Deploy proxy\n        ERC1967Proxy proxy = new ERC1967Proxy(\n            address(implementation),\n            initData\n        );\n\n        // Log addresses\n        console.log(\"Implementation deployed to:\", address(implementation));\n        console.log(\"Proxy deployed to:\", address(proxy));\n\n        vm.stopBroadcast();\n    }\n}\n```\n\n#### Run the deployment\n\n```bash\n# Deploy to local network\nforge script script/GameItems.s.sol --fork-url http://localhost:8545 --broadcast\n\n# Deploy to testnet (e.g., Sepolia)\nforge script script/GameItems.s.sol \\\n    --rpc-url $SEPOLIA_RPC_URL \\\n    --broadcast \\\n    --verify \\\n    -vvvv\n```\n\n#### Contract Lifecycle: From Development to Deployment\n\n![](assets/web3-development-with-foundry-03.png)\n\n## Limitations\n\nWhile Foundry shines in performance, it has its drawbacks. The lack of multi-network config files makes cross-chain deployments more tedious than Hardhat. The debugging tools, though functional, can't match Truffle's step-by-step debugger. We've also felt the smaller plugin ecosystem - you'll often need to build custom tooling that would be readily available in Hardhat.\n\nWriting tests in Solidity instead of JavaScript creates a steeper learning curve, especially for web developers on our team. The docs are improving but still leave gaps around advanced features, and community resources are still catching up to Hardhat's mature ecosystem.\n\n## Our assessment\n\nAfter months of wrestling with Hardhat's ESM limitations in our TypeScript stack, switching to Foundry was a game-changer. Sure, rewriting our JavaScript tests in Solidity took time, and we missed some familiar plugins. But the payoff was worth it - our test suite now runs in 40 seconds instead of 7 minutes.\n\nWriting tests in Solidity turned out to be a blessing in disguise. It eliminated translation errors and made our tests more precise. For teams ready to invest in learning Foundry, it offers a rock-solid foundation that pays off in both development speed and contract quality.\n","title":"Web3 Development with Foundry","short_title":"","description":"Provides a comprehensive guide to Web3 development using Foundry, a modern, Rust-based toolkit for Ethereum smart contract development.","tags":["evm","web3","foundry","blockchain"],"pinned":false,"draft":false,"hiring":false,"authors":["haongo1"],"date":"Tue Apr 01 2025 00:00:00 GMT+0000 (Coordinated Universal Time)","filePath":"playground/blockchain/web3-development-with-foundry.md","slugArray":["playground","blockchain","web3-development-with-foundry"]},{"content":"\n## What is this?\n\n- **ZK-SNARKs** stands for **Zero-Knowledge Succinct Non-Interactive Argument of Knowledges**.\n\n- Nowadays, we often hear this word when mentioning [zk-rollups](). But it is actually a **Privacy-enhancing technology**, and has a lot of applications that we will delve into in another post.\n\n## Decomposition\n\n- **ZK** aka **Zero-Knowledge** mean:\n  - Prove possession of certain information.\n  - Without revealing that information.\n  - **For Example:**\n    - Given the hash of a random number.\n    - The prover could convince the verifier that a number with this hash value exists without revealing what it is.\n- **Succinct**:\n  - Can be verified within a few milliseconds.\n  - no matter how long the statement is.\n- **Non-interactive**:\n  - In the first version of ZK, the prover and verifier had to communicate repeatedly for multiple rounds.\n  - Now, by implementing this characteristic, the proof consists of a single message sent from the prover to the verifier.\n\n## Implementation by Example\n\n### Example 1: Function C\n\n- You have a program denoted `C`.\n- C have 2 input `C(x,w)`:\n  - `x` is the public stuff, that can be shared with anyone.\n  - `w` is the secret witness.\n- The condition `C(x,w)===true`, means \"Prover actually knows a secret witness `w` satisfied a statement related to `x`\".\n- As a prover, how can we prove that we know `w`, without sending `w` to the verifier to check with the statements?\n- **Can map this example to the example of the hash function of the previous part. Let's do it, and go to the next example.**\n\n### Example 2: Bob, Alice, and Hash\n\n- Bob is given a hash `H`.\n- Alice is given the original string `S` satisfied the condition when hashing `S` by a hash function such as `SHA`, `H` is issued (aka `SHA(S) === H`).\n- How can Alice prove to Bob know that she knows the `S`?\n- Normally\n  - Alice needs to send `S` to Bob.\n  - Bob needs to hash again to check `SHA(S) === H`.\n- But in this case, `S` is a secret witness, and must not send to any locations, how can Alice prove this statement to Bob?\n  - Solution:\n    - Alice need a **proof** to send to Bob.\n    - This **proof** can prove `SHA(S)===H` is true. Mapping to program `C`, with public `x` as `H` and private `w` as `S`, in other words, when this **proof** proves `C(x,w)===true`, it means Bob can confirm that Alice knows this `w` aka `S` satisfied `SHA(S)===H` without knowledge about `S`.\n    - Example of `C`:\n      - `function C(x, w) { return ( sha256(w) == x );}`\n    - **Note that `C(x,w)===true` is proved by the `proof`, not by itself. How can?**\n\n### Example 3: Implementation of zk-SNARKs in simple words\n\n- A **ZK-SNARK** consists of three functions `G, P, V` defined as follows:\n\n  - **Key generator** aka `G`\n\n    - `G(lambda, C) = pk,vk`\n      - `lambda`: secret parameter. **Noted this**.\n      - `C`: a program that proves that `prover` knows `w` by `C(x,w)=true`. Aka above `C` in **Example 1** and **Example 2**.\n      - `pk`: proving key\n      - `vk`: verification key\n    - `pk` and `vk` are public parameters that only need to be generated once for a given program `C`.\n    - Can assume that:\n      - **From `pk`, we can create a `proof` that can be verified by using `vk` in a pre-defined way.**\n\n  - **Prover function** aka `P`\n\n    - `P(pk,x,w) = prf`\n      - `pk`: proving key issued from `G`\n      - `x`: public input\n      - `w`: private witness\n      - `prf`: proof proves that prover knows `w` satisfy program `C`.\n\n  - **Verifier function** aka `V`\n    - `V(vk,x,prf)=true/false`\n      - `vk`: verification key generated from `G`\n      - `x`: public input\n      - `prf`: proof generated from `P`\n\n- By above functions, `V(vk,x,prf)=true` means:\n\n  - With the proof `prf` generated depends on a logic that includes `x`, `w` and `pk`.\n  - And `pk` is a pair with `vk` so they are closely related to each other.\n  - So when having `vk`, `x`, `prf`, by a pre-defined way, we can confirm that `C(x,w)===true`.\n\n- **Note that `lambda` can cause security issues when used in real work**\n\n  - Reason: anyone who knows `lambda` can generate fake proofs\n  - Example:\n    - From any `C`, and known `lambda`, can find a pair `f_pk` and `f_vk`\n    - From `f_pk`, malicious actor can generate a `fake_prf` that represents `C(x,w)==true` when checking with `f_vk`.\n  - **Solution**: [multi-party-ceremonies]() for **Trusted Setup** -> To build `lambda`.\n\n- Resolve the **Example 2**:\n\n  - Bob uses `G` to generate key, send `pk` to Alice\n  - Alice gen `prf` -> Sent to Bob\n  - Bob verifies using `vk`\n\n  - **Issue**: Bob can't be a prover because he holds the `Lambda`.\n    - A trusted independent group separate from Alice and Bob could run the generator and create the proving key pk and verification key vk in such a way that no one learns about lambda.\n\n### Example 4: In Ethereum [zk-rollups]()\n\n- Can add the building blocks of the verification algorithm to Ethereum in the form of precompiled contracts.\n  - [layer-2](), run `G` to generate `pk` and `vk`\n  - [layer-2](), the operator use `pk` to generate `proof`\n  - [layer-1](), the verifier contract use `vk`, `proof` and public `input x` (can be state changes/Merkle root hash, bla bla ble ble)\n  - [layer-1](), if valid -> trigger transaction / append ZK blocks / etc.\n\n## References\n\n- https://consensys.net/blog/developers/introduction-to-zk-snarks/\n- https://ethereum.org/en/developers/docs/scaling/zk-rollups/\n- https://vitalik.eth.limo/general/2022/06/15/using_snarks.html\n","title":"zk-SNARKs","short_title":"","description":"ZK-SNARKs is a type of zero-knowledge proof that allows one party to prove to another that a given statement is true, without revealing any additional information. This article provides an overview of zk-SNARKs, how they work, and their applications in blockchain technology.","tags":["blockchain","ethereum","zero-knowledge"],"pinned":false,"draft":false,"hiring":false,"authors":["bienvh"],"date":"Fri Dec 09 2022 00:00:00 GMT+0000 (Coordinated Universal Time)","filePath":"playground/blockchain/zk-snarks.md","slugArray":["playground","blockchain","zk-snarks"]}],"isListPage":true},"__N_SSG":true}