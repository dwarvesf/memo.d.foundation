{"pageProps":{"directoryTree":{"/pinned":{"label":"Pinned Notes","children":{"/playbook/operations/ogif":{"label":"OGIF - Oh God It's Friday","children":{}}}},"/":{"label":"Home","children":{"/careers":{"label":"Careers","children":{"/careers/additional-info":{"label":"Additional Info","children":{"/careers/additional-info/benefits-and-perks":{"label":"Benefits And Perks","children":{}},"/careers/additional-info/culture-handbook":{"label":"Culture Handbook","children":{}},"/careers/additional-info/how-we-hire":{"label":"How we hire","children":{}},"/careers/additional-info/how-we-work":{"label":"How we work","children":{}},"/careers/additional-info/life-at-dwarves":{"label":"Life at Dwarves","children":{}},"/careers/additional-info/making-a-career":{"label":"Making a career","children":{}},"/careers/additional-info/the-manifesto":{"label":"The Manifesto","children":{}},"/careers/additional-info/what-we-stand-for":{"label":"What we stand for","children":{}},"/careers/additional-info/what-we-value":{"label":"What we value","children":{}},"/careers/additional-info/where-we-work":{"label":"Where we work","children":{}}}},"/careers/apprentice":{"label":"Apprentice","children":{"/careers/apprentice/2022-meet-ngoc-thanh-pham":{"label":"Dwarves Apprenticeship 2022: Meet The Mentors Ngoc Thanh Pham","children":{}},"/careers/apprentice/2022-meet-tuan-dao":{"label":"Dwarves Apprenticeship 2022: Meet The Mentors Tuan Dao","children":{}},"/careers/apprentice/apprentice":{"label":"Apprentice Program","children":{}},"/careers/apprentice/batch-of-2022":{"label":"Dwarves Foundation Apprenticeship: Batch Of 2022","children":{}}}},"/careers/archived":{"label":"Archived","children":{"/careers/archived/android-developer":{"label":"Mobile Engineer, Android","children":{}},"/careers/archived/android":{"label":"Android","children":{}},"/careers/archived/backend-engineer-go-elixir-rust":{"label":"Backend Engineer, Go/Elixir/Rust","children":{}},"/careers/archived/community-executive":{"label":"Community Executive","children":{}},"/careers/archived/data-engineering":{"label":"Energy - Data Engineering","children":{}},"/careers/archived/devops":{"label":"DevOps Engineer - FinTech","children":{}},"/careers/archived/executive-assistant":{"label":"Executive Assistant","children":{}},"/careers/archived/frontend-developer-junior":{"label":"Junior Frontend Developer","children":{}},"/careers/archived/frontend":{"label":"Frontend","children":{}},"/careers/archived/full-stack-engineer":{"label":"Full-Stack Engineer","children":{}},"/careers/archived/golang":{"label":"Golang","children":{}},"/careers/archived/intern":{"label":"Intern","children":{}},"/careers/archived/ios-developer":{"label":"iOS Developer - EnergyTech","children":{}},"/careers/archived/ios":{"label":"iOS Developer","children":{}},"/careers/archived/macos-developer":{"label":"Software Engineer, macOS","children":{}},"/careers/archived/product-designer-new-grad":{"label":"Product Designer, New Grad","children":{}},"/careers/archived/product-designer":{"label":"Product Designer","children":{}},"/careers/archived/qa":{"label":"QA Engineer","children":{}},"/careers/archived/qc-automation":{"label":"QC Engineer, Automation - Logistics","children":{}},"/careers/archived/qc-manual":{"label":"Fintech - QC Engineer, Manual","children":{}},"/careers/archived/react-native-developer":{"label":"React Native Developer","children":{}},"/careers/archived/reactjs-web-engineer":{"label":"Web Engineer, React.js","children":{}},"/careers/archived/technical-recruiter":{"label":"Technical Recruiter","children":{}},"/careers/archived/visual-designer":{"label":"Visual Designer","children":{}}}},"/careers/life":{"label":"Life","children":{"/careers/life/an-tran":{"label":"Meet An Tran: Senior engineer's growth journey","children":{}},"/careers/life/anh-tran":{"label":"Meet Anh Tran: Crafting Dwarves' visual identity as Head of UI","children":{}},"/careers/life/dat-nguyen":{"label":"Meet Dat Nguyen: AI Dev Intern on hybrid working at Dwarves","children":{}},"/careers/life/hieu-vu":{"label":"Meet Hieu Vu: Golang passion and Dwarves community","children":{}},"/careers/life/nam-nguyen":{"label":"Meet Nam Nguyen: From Frontend to DevOps - A journey of continuous growth","children":{}},"/careers/life/software-design-group":{"label":"Software design group: Nurturing architects at Dwarves","children":{}},"/careers/life/thanh-pham":{"label":"Meet Thanh Pham: Ensuring a healthy environment for everyone to thrive","children":{}},"/careers/life/tom-nguyen":{"label":"Meet Tom Nguyen: Remote working fits him perfectly","children":{}}}},"/careers/open-positions":{"label":"Open Positions","children":{"/careers/open-positions/business-development-manager":{"label":"Business Development","children":{}},"/careers/open-positions/growth":{"label":"Growth","children":{}}}}}},"/consulting":{"label":"Consulting","children":{"/consulting/case-study":{"label":"Case Study","children":{"/consulting/case-study/aharooms":{"label":"Building a complete tech system for small Vietnamese hotels","children":{}},"/consulting/case-study/airwatt":{"label":"Creating a smart system to monitor electricity Use","children":{}},"/consulting/case-study/attrace":{"label":"Building blockchain solutions for affiliate marketing","children":{}},"/consulting/case-study/basehq":{"label":"Creating the first platform for Executive assistants","children":{}},"/consulting/case-study/begroup":{"label":"Helping launch beCorporate enterprise ride-hailing service","children":{}},"/consulting/case-study/bhd":{"label":"Redesigning BHD Cinema's ticket booking app for a better experience","children":{}},"/consulting/case-study/cimb":{"label":"Building CIMB's digital wealth platform for better customer experience","children":{}},"/consulting/case-study/dental-marketplace":{"label":"Making dental work easier in Singapore","children":{}},"/consulting/case-study/droppii":{"label":"Helping Droppii build a better dropshipping platform that users love","children":{}},"/consulting/case-study/hedge-foundation":{"label":"Building a powerful crypto trading dashboard for professionals","children":{}},"/consulting/case-study/icrosschain":{"label":"Making crypto transfers faster and easier","children":{}},"/consulting/case-study/joinpara":{"label":"Connecting healthcare workers with hospitals during COVID-19","children":{}},"/consulting/case-study/kafi":{"label":"Kafi: Making stock trading easier for everyone","children":{}},"/consulting/case-study/konvoy":{"label":"Making keg management smarter for breweries","children":{}},"/consulting/case-study/momos":{"label":"Building a central hub for food and beverage businesses in Singapore","children":{}},"/consulting/case-study/mudah":{"label":"Upgrading Malaysia's largest online marketplace","children":{}},"/consulting/case-study/naru":{"label":"Naru: A task manager that works right in your browser","children":{}},"/consulting/case-study/open-fabric":{"label":"Building a payment platform from scratch","children":{}},"/consulting/case-study/reapit":{"label":"Building cloud solutions for UK real estate","children":{}},"/consulting/case-study/relay":{"label":"Helping Relay launch their workflow automation MVP for the US market","children":{}},"/consulting/case-study/searchio":{"label":"Building AI-powered search for online stores","children":{}},"/consulting/case-study/setel":{"label":"Building Setel's fuel payment super-app for Malaysian drivers","children":{}},"/consulting/case-study/sol":{"label":"Sol: Making group travel easier and more fun","children":{}},"/consulting/case-study/startupvn":{"label":"Building a community platform for Vietnamese Entrepreneurs","children":{}},"/consulting/case-study/swift":{"label":"Swift: Building a micro frontend design system for e-commerce","children":{}},"/consulting/case-study/tokenomy":{"label":"Building a modern crypto investment platform for Tokenomy","children":{}},"/consulting/case-study/voconic":{"label":"Building Voconic's cloud platform with Google for financial services","children":{}}}},"/consulting/market-report":{"label":"Market Report","children":{"/consulting/market-report/2024-13th-dec":{"label":"Weekly Consulting Snapshot #1: Gemini 2.0, OpenAI’s Sora, a16z’s Predictions","children":{}},"/consulting/market-report/2024-27th-dec":{"label":"Weekly Consulting Snapshot #2: AI Talent Wars, OpenAI’s New Models, Hyperliquid’s Rise","children":{}},"/consulting/market-report/2025-10th-jan":{"label":"Weekly Consulting Snapshot #4: AI Supercomputers, Mini AI PCs, Worldcoin Expansion, and SEA VC","children":{}},"/consulting/market-report/2025-14th-feb":{"label":"Weekly Consulting Snapshot #7: 10x AI Cost Reduction, Lyft’s 2026 Robotaxi Milestone, and Solana ETF Buzz","children":{}},"/consulting/market-report/2025-17th-jan":{"label":"Weekly Consulting Snapshot #5: VC Trends, Blockchain Breakthroughs, and AI Innovations","children":{}},"/consulting/market-report/2025-21th-feb":{"label":"Weekly Consulting Snapshot #8: R1 1776 Goes Open-Source, Cardex Gets Hacked, and Grok-3 Debuts","children":{}},"/consulting/market-report/2025-28th-feb":{"label":"Weekly Consulting Snapshot #9: Bybit Loses $1.5B in Hack, Claude 3.7 Sonnet Drops, and OpenArt Designs Characters","children":{}},"/consulting/market-report/2025-3rd-jan":{"label":"Weekly Consulting Snapshot #3: AI’s Ubiquity at CES, Wall Street’s AI Boom, and Blockchain Innovations","children":{}},"/consulting/market-report/2025-7th-feb":{"label":"Weekly Consulting Snapshot #6: Trending Products, DeepSeek Wave, and Ethereum Predictions","children":{}},"/consulting/market-report/event-takeaways-1st":{"label":"Talks and Takeaways from the Scene: Part 1","children":{}},"/consulting/market-report/event-takeaways-2nd":{"label":"Talks and Takeaways from the Scene: Part 2","children":{}}}},"/consulting/partners-network":{"label":"Partners Network","children":{}},"/consulting/wala":{"label":"Wala","children":{"/consulting/wala/43-factory":{"label":"43 Factory WALA: Lessons from coffee craftsmanship for software engineering","children":{}},"/consulting/wala/dzs-media":{"label":"DZS Media WALA: Lessons from film production for software engineering","children":{}},"/consulting/wala/sp-group":{"label":"SP Group WALA: Insights on digital transformation and partnership in energy sector","children":{}}}}}},"/contributing":{"label":"Home","children":{}},"/contributor":{"label":"Contributor","children":{"/contributor/0xlight":{"label":"0xlight","children":{}},"/contributor/0xm":{"label":"0xm","children":{}},"/contributor/anhnh":{"label":"anhnh","children":{}},"/contributor/anna":{"label":"anna","children":{}},"/contributor/annaconsole":{"label":"anna.console","children":{}},"/contributor/antran":{"label":"antran","children":{}},"/contributor/bienvh":{"label":"bienvh","children":{}},"/contributor/bievh":{"label":"bievh","children":{}},"/contributor/changtrailucluong":{"label":"changtrailucluong","children":{}},"/contributor/chinhld12":{"label":"chinhld12","children":{}},"/contributor/cor3co":{"label":"cor3.co","children":{}},"/contributor/datnguyennnx":{"label":"datnguyennnx","children":{}},"/contributor/datpv":{"label":"datpv","children":{}},"/contributor/dudaka":{"label":"dudaka","children":{}},"/contributor/duy":{"label":"duy","children":{}},"/contributor/fuatto":{"label":"fuatto","children":{}},"/contributor/giangthan":{"label":"giangthan","children":{}},"/contributor/han":{"label":"han","children":{}},"/contributor/haongo1":{"label":"haongo1","children":{}},"/contributor/hienld":{"label":"hienld","children":{}},"/contributor/hieuphq":{"label":"hieuphq","children":{}},"/contributor/hieuthu1":{"label":"hieuthu1","children":{}},"/contributor/hieuvd":{"label":"hieuvd","children":{}},"/contributor/hmhoang13":{"label":"hmhoang13","children":{}},"/contributor/hnh":{"label":"hnh","children":{}},"/contributor/hoangnnh":{"label":"hoangnnh","children":{}},"/contributor/hollow3333":{"label":"hollow#3333","children":{}},"/contributor/hthai2201":{"label":"hthai2201","children":{}},"/contributor/huygn":{"label":"huygn","children":{}},"/contributor/huymaius":{"label":"huymaius","children":{}},"/contributor/huytd":{"label":"huytd","children":{}},"/contributor/huytq":{"label":"huytq","children":{}},"/contributor/ics3rd":{"label":"ics3rd","children":{}},"/contributor/innno_":{"label":"innno_","children":{}},"/contributor/jack":{"label":"jack","children":{}},"/contributor/jim":{"label":"jim","children":{}},"/contributor/khacvy":{"label":"khacvy","children":{}},"/contributor/longddl":{"label":"longddl","children":{}},"/contributor/mashiro5951":{"label":"mashiro5951","children":{}},"/contributor/mickwan1234":{"label":"mickwan1234","children":{}},"/contributor/minh":{"label":"minh","children":{}},"/contributor/minh_cloud":{"label":"minh_cloud","children":{}},"/contributor/minhcloud":{"label":"minhcloud","children":{}},"/contributor/minhkek":{"label":"minhkek","children":{}},"/contributor/minhlq":{"label":"minhlq","children":{}},"/contributor/minhth":{"label":"minhth","children":{}},"/contributor/monotykamary":{"label":"monotykamary","children":{}},"/contributor/namanh":{"label":"namanh","children":{}},"/contributor/namanh14mn":{"label":"namanh14mn","children":{}},"/contributor/nambui":{"label":"nambui","children":{}},"/contributor/namnanh14mn":{"label":"namnanh14mn","children":{}},"/contributor/namnd":{"label":"namnd","children":{}},"/contributor/namth":{"label":"namth","children":{}},"/contributor/namtran":{"label":"namtran","children":{}},"/contributor/namtrhg":{"label":"namtrhg","children":{}},"/contributor/nghiaphm":{"label":"nghiaphm","children":{}},"/contributor/ngolapnguyen":{"label":"ngolapnguyen","children":{}},"/contributor/nguyend-nam":{"label":"nguyend-nam","children":{}},"/contributor/nikki":{"label":"nikki","children":{}},"/contributor/nikkingtr":{"label":"nikkingtr","children":{}},"/contributor/pham-ngoc-thanh":{"label":"Pham Ngoc Thanh","children":{}},"/contributor/phatgha":{"label":"phatgha","children":{}},"/contributor/quang":{"label":"quang","children":{}},"/contributor/rjim":{"label":".rjim","children":{}},"/contributor/taipn":{"label":"taipn","children":{}},"/contributor/taynguyen":{"label":"taynguyen","children":{}},"/contributor/taynguyen294":{"label":"taynguyen294","children":{}},"/contributor/thangnt294":{"label":"thangnt294","children":{}},"/contributor/thanh":{"label":"thanh","children":{}},"/contributor/thanhlmm":{"label":"thanhlmm","children":{}},"/contributor/thanhpham":{"label":"thanh.pham","children":{}},"/contributor/thanhpn":{"label":"thanhpn","children":{}},"/contributor/thecodister":{"label":"TheCodister","children":{}},"/contributor/tieubao":{"label":"tieubao","children":{}},"/contributor/toanbku":{"label":"toanbku","children":{}},"/contributor/toanhq":{"label":"toanhq","children":{}},"/contributor/tom":{"label":"tom","children":{}},"/contributor/tran-hoang-nam":{"label":"Tran Hoang Nam","children":{}},"/contributor/trankhacvy":{"label":"trankhacvy","children":{}},"/contributor/vhbien":{"label":"vhbien","children":{}},"/contributor/vincent":{"label":"vincent","children":{}},"/contributor/vitran":{"label":"vitran","children":{}}}},"/handbook":{"label":"Handbook","children":{"/handbook/as-a-community":{"label":"Dwarves as a community","children":{}},"/handbook/benefits-and-perks":{"label":"Benefits & perks","children":{}},"/handbook/community":{"label":"Community","children":{"/handbook/community/discord":{"label":"Dwarves Network Discord","children":{}},"/handbook/community/earn":{"label":"Earning with sidegig","children":{}},"/handbook/community/icy-swap":{"label":"How to swap ICY to BTC","children":{}},"/handbook/community/icy-worth":{"label":"How much is your ICY worth","children":{}},"/handbook/community/icy":{"label":"ICY Token","children":{}},"/handbook/community/radar":{"label":"Tech Radar","children":{}},"/handbook/community/sharing":{"label":"Sharing knowledge","children":{}},"/handbook/community/showcase":{"label":"Showcase","children":{}}}},"/handbook/compliance":{"label":"Compliance","children":{}},"/handbook/dwarves-foundation-is-you":{"label":"You are Dwarves Foundation","children":{}},"/handbook/faq":{"label":"FAQ","children":{}},"/handbook/getting-started":{"label":"Getting started","children":{}},"/handbook/guides":{"label":"Guides","children":{"/handbook/guides/asset-request":{"label":"Assets","children":{}},"/handbook/guides/check-in-at-office":{"label":"Office check-in process for earning ICY","children":{}},"/handbook/guides/conduct-a-meeting":{"label":"How to conduct a meeting","children":{}},"/handbook/guides/configure-the-company-email":{"label":"Configure your company email","children":{}},"/handbook/guides/continuing-education-allowance":{"label":"Continuing education allowance","children":{}},"/handbook/guides/effective-meeting":{"label":"Effective meetings","children":{}},"/handbook/guides/email-communication-and-use":{"label":"Email Communication and Use","children":{}},"/handbook/guides/leave-request":{"label":"Leave request","children":{}},"/handbook/guides/one-on-one-meeting":{"label":"1-on-1 meetings","children":{}},"/handbook/guides/password-sharing":{"label":"Password Sharing","children":{}},"/handbook/guides/reimbursement":{"label":"Reimbursement","children":{}}}},"/handbook/how-we-hire":{"label":"How we hire","children":{}},"/handbook/how-we-spend-money":{"label":"How we spend money","children":{}},"/handbook/how-we-work":{"label":"How we work","children":{}},"/handbook/hybrid-working":{"label":"Hybrid Working","children":{}},"/handbook/making-a-career":{"label":"Making a career","children":{}},"/handbook/misc":{"label":"Misc","children":{"/handbook/misc/marketing-assets":{"label":"Marketing assets","children":{}}}},"/handbook/mma":{"label":"MMA","children":{}},"/handbook/moonlighting":{"label":"Moonlighting","children":{}},"/handbook/navigate-changes":{"label":"Navigate changes","children":{}},"/handbook/places-to-work":{"label":"Places to work","children":{}},"/handbook/purpose":{"label":"Our purpose","children":{}},"/handbook/routine":{"label":"Work routine","children":{}},"/handbook/security-rules":{"label":"Security rules","children":{}},"/handbook/stock-option-plan":{"label":"Stock option plan","children":{}},"/handbook/tools-and-systems":{"label":"Tools and systems","children":{}},"/handbook/ventures":{"label":"Ventures arm","children":{}},"/handbook/what-we-stand-for":{"label":"What we stand for","children":{}},"/handbook/what-we-value":{"label":"What we value","children":{}},"/handbook/where-we-work":{"label":"Where we work","children":{}},"/handbook/who-does-what":{"label":"Who does what","children":{}}}},"/playbook":{"label":"Playbook","children":{"/playbook/business":{"label":"Business","children":{"/playbook/business/collaboration-guideline":{"label":"Collaboration Guideline","children":{}},"/playbook/business/df-workflow":{"label":"Dwarves Workflow","children":{}},"/playbook/business/fbsc":{"label":"FBSC","children":{}},"/playbook/business/fixed-budget-scope-controlled":{"label":"Fixed Budget Scope Controlled","children":{}},"/playbook/business/how-to-work-with-clients":{"label":"How to work with clients","children":{}},"/playbook/business/invoice":{"label":"Invoice","children":{}},"/playbook/business/nda":{"label":"NDA","children":{}},"/playbook/business/pricing-model-bill-by-hours":{"label":"Pricing model: Bill by hours","children":{}},"/playbook/business/service-feedbacks":{"label":"Service Feedbacks","children":{}},"/playbook/business/setting-the-budget":{"label":"Setting The Budget","children":{}},"/playbook/business/the-adjacent-possible":{"label":"The Adjacent Possible","children":{}}}},"/playbook/design":{"label":"Design","children":{"/playbook/design/aarrr":{"label":"aarrr","children":{}},"/playbook/design/design-sprint":{"label":"Design Sprint","children":{}},"/playbook/design/design-system":{"label":"lean-canvas","children":{}},"/playbook/design/ia":{"label":"nda","children":{}},"/playbook/design/ix":{"label":"IA","children":{}},"/playbook/design/lean-canvas":{"label":"Lean Canvas","children":{}},"/playbook/design/prototype":{"label":"Low-fidelity prototype: UI Design","children":{}},"/playbook/design/ui":{"label":"UI","children":{}},"/playbook/design/ux":{"label":"UX","children":{}},"/playbook/design/wireframe":{"label":"wireframe","children":{}}}},"/playbook/engineering":{"label":"Engineering","children":{"/playbook/engineering/estimation-guidelines":{"label":"Estimation Guidelines","children":{}},"/playbook/engineering/presentation":{"label":"monitoring","children":{}},"/playbook/engineering/repo-icon":{"label":"release","children":{}}}},"/playbook/operations":{"label":"Operations","children":{"/playbook/operations/a-tips-of-hiring-dont":{"label":"A Tips Of Hiring - Do & Don't","children":{}},"/playbook/operations/account":{"label":"Account","children":{}},"/playbook/operations/adjust-the-way-we-work-in-basecamp-style":{"label":"Adjust The Way We Work In Basecamp Style","children":{}},"/playbook/operations/annual-bonus-for-sales":{"label":"Annual bonus for sales","children":{}},"/playbook/operations/applying-myersbriggs-type-indicator-in-hr":{"label":"Applying Myersbriggs Type Indicator In Hiring","children":{}},"/playbook/operations/are-you-helping":{"label":"Are You Helping","children":{}},"/playbook/operations/avoid-burn-out":{"label":"Avoid Burn Out","children":{}},"/playbook/operations/beyond-the-title":{"label":"Beyond The Title","children":{}},"/playbook/operations/blocking-distraction":{"label":"Blocking Distraction","children":{}},"/playbook/operations/bric-a-brac":{"label":"Bric A Brac","children":{}},"/playbook/operations/building-a-solid-high-performing-team":{"label":"Building A Solid High Performing Team","children":{}},"/playbook/operations/bunk-license-check":{"label":"Bunk license check","children":{}},"/playbook/operations/checklists":{"label":"Checklists","children":{"/playbook/operations/checklists/artifact-checklist":{"label":"Back up Artifact","children":{}},"/playbook/operations/checklists/assets-checklist":{"label":"Assets","children":{}},"/playbook/operations/checklists/billing-checklist":{"label":"Billing","children":{}},"/playbook/operations/checklists/candidate-checklist":{"label":"Candidate","children":{}},"/playbook/operations/checklists/consulting-contract-checklist":{"label":"Consulting Contract","children":{}},"/playbook/operations/checklists/hiring-checklist":{"label":"Hiring","children":{}},"/playbook/operations/checklists/leave-and-request-checklist":{"label":"Leave Request","children":{}},"/playbook/operations/checklists/offboarding-checklist":{"label":"Offboarding","children":{}},"/playbook/operations/checklists/onboarding-checklist":{"label":"Onboarding","children":{}},"/playbook/operations/checklists/project-archive":{"label":"Project Archive","children":{}},"/playbook/operations/checklists/project-case-study":{"label":"Project Case Study","children":{}},"/playbook/operations/checklists/project-communication":{"label":"Project Communication","children":{}},"/playbook/operations/checklists/project-handover":{"label":"Project Handover","children":{}},"/playbook/operations/checklists/project-initialization":{"label":"Project Initialization","children":{}},"/playbook/operations/checklists/unemployment-social-health-insurance":{"label":"Unemployment, Social, Health Insurance","children":{}},"/playbook/operations/checklists/vietnam-invoice-checklist":{"label":"Vietnam Invoice","children":{}}}},"/playbook/operations/collaboration-guidelines":{"label":"Collaboration Guidelines","children":{}},"/playbook/operations/compliance-check-process":{"label":"Compliance Check Process","children":{}},"/playbook/operations/constructive-feedback":{"label":"Constructive Feedback","children":{}},"/playbook/operations/delegate-work-not-responsibility":{"label":"Delegate Work Not Responsibility","children":{}},"/playbook/operations/delegation-and-believe-it-will-work":{"label":"Delegation And Believe It Will Work","children":{}},"/playbook/operations/effective-meeting":{"label":"Effective Meeting","children":{}},"/playbook/operations/email-template":{"label":"Email Template","children":{"/playbook/operations/email-template/assignment-invitation-2":{"label":"Assignment Inviation (Skip pre-assessment)","children":{}},"/playbook/operations/email-template/assignment-invitation":{"label":"Assignment Inviation","children":{}},"/playbook/operations/email-template/confirm-resume-date":{"label":"Confirm Employee's Resume Date Day","children":{}},"/playbook/operations/email-template/farewell":{"label":"Farewell Letter","children":{}},"/playbook/operations/email-template/follow-up-onboarding-items":{"label":"Follow-up Onboarding Items","children":{}},"/playbook/operations/email-template/hung-king-commemoration-day":{"label":"Hung King Commemoration Day","children":{}},"/playbook/operations/email-template/information-about-resource-change":{"label":"Inform about resource change","children":{}},"/playbook/operations/email-template/international-labour-day":{"label":"International Labour Day","children":{}},"/playbook/operations/email-template/interview-invitation":{"label":"Interview Invitation","children":{}},"/playbook/operations/email-template/milestone-sign-off":{"label":"Milestone sign-off","children":{}},"/playbook/operations/email-template/national-day":{"label":"National Day","children":{}},"/playbook/operations/email-template/new-year-day":{"label":"New Year Day","children":{}},"/playbook/operations/email-template/offer-letter":{"label":"Offer Letter","children":{}},"/playbook/operations/email-template/referral-bonus-confirmation-note":{"label":"Referral Bonus Confirmation Note","children":{}},"/playbook/operations/email-template/rejection-email":{"label":"Rejection","children":{}},"/playbook/operations/email-template/salary-increment":{"label":"Salary Increment Announcement","children":{}},"/playbook/operations/email-template/tet-holiday":{"label":"Tet Holiday","children":{}},"/playbook/operations/email-template/thank-you-letter":{"label":"Thank you letter","children":{}},"/playbook/operations/email-template/welcome-onboard":{"label":"Welcome Onboard","children":{}},"/playbook/operations/email-template/welcome-to-dwarves-update":{"label":"Welcome to Dwarves Updates","children":{}}}},"/playbook/operations/focus-on-software-delivery":{"label":"Focus On Software Delivery","children":{}},"/playbook/operations/go-the-extra-mile":{"label":"Go The Extra Mile","children":{}},"/playbook/operations/hiring-approach":{"label":"Hiring Approach","children":{}},"/playbook/operations/hiring-for-operations-team":{"label":"Hiring For Operations Team","children":{}},"/playbook/operations/make-remote-working-works":{"label":"Make Remote Working Works","children":{}},"/playbook/operations/making-decision-as-a-team-member":{"label":"Making Decision As A Team Member","children":{}},"/playbook/operations/mbti-type-estj":{"label":"MBTI Type ESTJ","children":{}},"/playbook/operations/mbti-type-intj":{"label":"MBTI Type INTJ","children":{}},"/playbook/operations/mbti-type-istj":{"label":"MBTI Type ISTJ","children":{}},"/playbook/operations/mbti-type-istp":{"label":"MBTI Type ISTP","children":{}},"/playbook/operations/naming-convention":{"label":"Naming convention","children":{}},"/playbook/operations/ogif":{"label":"OGIF - Oh God It's Friday","children":{}},"/playbook/operations/our-metrics-for-performance-review":{"label":"Our Metrics For Performance Review","children":{}},"/playbook/operations/our-policy-for-remote-working":{"label":"Our Policy For Remote Working","children":{}},"/playbook/operations/project-schedule-delivery-guidelines":{"label":"Project Delivery Schedule and Guidelines","children":{}},"/playbook/operations/red-flags":{"label":"Red Flags","children":{}},"/playbook/operations/the-dwarves-culture-handbook":{"label":"The Dwarves Culture Handbook","children":{}},"/playbook/operations/the-dwarves-runs-by-ideas":{"label":"The Dwarves Runs By Ideas","children":{}},"/playbook/operations/the-four-preferences":{"label":"The Four Preferences","children":{}},"/playbook/operations/the-inner-circle":{"label":"The Inner Circle","children":{}},"/playbook/operations/the-okr":{"label":"The OKR","children":{}},"/playbook/operations/transparency":{"label":"Transparency","children":{}},"/playbook/operations/types-of-employees":{"label":"Types Of Employees","children":{}},"/playbook/operations/writing-management-objectives-in-smart":{"label":"Writing Management Objectives In Smart","children":{}}}}}},"/playground":{"label":"Playground","children":{"/playground/00_fleeting":{"label":"00_fleeting","children":{"/playground/00_fleeting/202210122014-forward-proxy":{"label":"Forward Proxy","children":{}},"/playground/00_fleeting/202210131000-behavior-driven-development":{"label":"Behavior Driven Development","children":{}},"/playground/00_fleeting/202210131516-react-fiber":{"label":"React Fiber","children":{}},"/playground/00_fleeting/202210150019-migration-planning":{"label":"Migration Planning","children":{}},"/playground/00_fleeting/202210162154-the-best-of-css-tldr":{"label":"The Best of CSS TLDR","children":{}},"/playground/00_fleeting/202210172128-sign-in-form-best-practices":{"label":"Sign-in Form Best Practices","children":{}},"/playground/00_fleeting/202211081111-error-messaging":{"label":"Error Messaging","children":{}},"/playground/00_fleeting/202211141287-go-json-parsing":{"label":"Go JSON parser: number <-> interface","children":{}},"/playground/00_fleeting/202211141513-materialized-view-pattern":{"label":"Materialized View Pattern","children":{}},"/playground/00_fleeting/202212131609-how-to-deal-with-technical-debt-in-scrum":{"label":"How to deal with technical debt in Scrum","children":{}},"/playground/00_fleeting/202301091379-invoking-component-functions-in-react":{"label":"Invoking component functions in React","children":{}},"/playground/00_fleeting/202301191192-multi-column-index-in-db":{"label":"Multi-column index in DB","children":{}},"/playground/00_fleeting/202302281019-case-study-write-heavy-scalable-and-reliable-inventory-platform":{"label":"Case study: Write-heavy scalable and reliable inventory platform","children":{}},"/playground/00_fleeting/automata":{"label":"Automata","children":{}},"/playground/00_fleeting/erlang-fsm":{"label":"Erlang Finite State Machine","children":{}},"/playground/00_fleeting/error-handling-patterns":{"label":"Error Handling Patterns","children":{}},"/playground/00_fleeting/explaining-gradient-descent-in-machine-learning-with-a-simple-analogy":{"label":"Explaining Gradient Descent in Machine Learning with a simple analogy","children":{}},"/playground/00_fleeting/founder-liquidity":{"label":"Founder Liquidity","children":{}},"/playground/00_fleeting/how-to-talk-to-chatgpt-effectively":{"label":"How to talk to ChatGPT effectively","children":{}},"/playground/00_fleeting/organize-team-know-how-with-zettelkasten-method":{"label":"Organize team know-how with Zettelkasten Method","children":{}},"/playground/00_fleeting/rust-trait":{"label":"Rust Trait","children":{}},"/playground/00_fleeting/subscription-pricing-models":{"label":"Subscription Pricing Models","children":{}},"/playground/00_fleeting/why-hollywood-and-gaming-struggle-with-ai":{"label":"Why Hollywood and gaming struggle with AI","children":{}}}},"/playground/01_literature":{"label":"01_literature","children":{"/playground/01_literature/a-lens-to-modern-data-engineering":{"label":"Building a Data-Driven Project Reporting System: A Lens into Modern Data Engineering","children":{}},"/playground/01_literature/a-quick-intro-to-webassembly":{"label":"A Quick Intro To Webassembly","children":{}},"/playground/01_literature/aarrr-framework-in-a-nutshell":{"label":"Aarrr Framework In A Nutshell","children":{}},"/playground/01_literature/about-devops":{"label":"About Devops","children":{}},"/playground/01_literature/accelerate-project-initiation-with-advanced-nextjs-boilerplate-react-toolkit":{"label":"Accelerate Project Initiation With Advanced Nextjs Boilerplate React Toolkit","children":{}},"/playground/01_literature/adoption-of-pnpm":{"label":"Adoption Of Pnpm","children":{}},"/playground/01_literature/agile-how-to-create-clickup-tickets":{"label":"Agile How To Create Clickup Tickets","children":{}},"/playground/01_literature/agile-using-clickup-as-agile-management-tool":{"label":"Agile Using Clickup As Agile Management Tool","children":{}},"/playground/01_literature/an-alternative-to-tm":{"label":"An Alternative To Tm","children":{}},"/playground/01_literature/applied-security-basis":{"label":"Applied Security Basis","children":{}},"/playground/01_literature/architecture-decision-record":{"label":"Architecture Decision Record","children":{}},"/playground/01_literature/are-we-really-engineers":{"label":"Are We Really Engineers","children":{}},"/playground/01_literature/asking-as-a-junior":{"label":"Asking As A Junior","children":{}},"/playground/01_literature/be-careful-with-your-code-splitting-setup":{"label":"Be Careful With Your Code Splitting Setup","children":{}},"/playground/01_literature/blockchain-for-designers":{"label":"Blockchain For Designers","children":{}},"/playground/01_literature/build-a-passcode-view-with-swift":{"label":"Build A Passcode View With Swift","children":{}},"/playground/01_literature/build-an-assistant-on-the-terminal":{"label":"Build An Assistant On The Terminal","children":{}},"/playground/01_literature/builder-design-pattern":{"label":"Introduce the Builder pattern and its use cases","children":{}},"/playground/01_literature/bunk-license-check":{"label":"Bunk License Check","children":{}},"/playground/01_literature/c4-modelling":{"label":"Breaking Down Complexity: The Role of Abstractions and UML in C4 Modelling","children":{}},"/playground/01_literature/card-sorting-and-a-glimpse-at-experimental-sorting-session":{"label":"Card Sorting And A Glimpse At Experimental Sorting Session","children":{}},"/playground/01_literature/choosing-the-right-javascript-framework-a-deep-dive-into-react-vs-angular-vs-vue":{"label":"Choosing The Right Javascript Framework A Deep Dive Into React Vs Angular Vs Vue","children":{}},"/playground/01_literature/command-pattern":{"label":"Command Pattern","children":{}},"/playground/01_literature/competency-mapping":{"label":"Competency Mapping","children":{}},"/playground/01_literature/configure-the-company-email":{"label":"Configure The Company Email","children":{}},"/playground/01_literature/considering-factors-for-performance-evaluating":{"label":"Considering Factors For Performance Evaluating","children":{}},"/playground/01_literature/cost-of-react-native":{"label":"Cost Of React Native","children":{}},"/playground/01_literature/create-circular-text-using-swiftui":{"label":"Create Circular Text Using Swiftui","children":{}},"/playground/01_literature/creating-a-fully-local-search-engine-on-memo":{"label":"Building a Local Search Engine for Our Memo Website","children":{}},"/playground/01_literature/daemons-and-services-programming-guide":{"label":"Daemons And Services Programming Guide","children":{}},"/playground/01_literature/data-analyst-in-retail-trading":{"label":"Data Analyst In Retail Trading","children":{}},"/playground/01_literature/database-design-circular":{"label":"Database design Circular","children":{}},"/playground/01_literature/database-designs-for-multilingual-apps":{"label":"Database Designs For Multilingual Apps","children":{}},"/playground/01_literature/dcos-series-part-1-quick-look-installation":{"label":"Dcos Series Part 1 Quick Look Installation","children":{}},"/playground/01_literature/dcos-series-part-2-deploy-simple-applications":{"label":"Dcos Series Part 2 Deploy Simple Applications","children":{}},"/playground/01_literature/dcos-series-part-3-service-discovery-and-load-balancing":{"label":"Dcos Series Part 3 Service Discovery And Load Balancing","children":{}},"/playground/01_literature/dcos-series-part-4-deploy-simple-application-with-backend-database":{"label":"Dcos Series Part 4 Deploy Simple Application With Backend Database","children":{}},"/playground/01_literature/dcos-series-part-5-gitlab":{"label":"Dcos Series Part 5 Gitlab","children":{}},"/playground/01_literature/definition-of-done":{"label":"Definition Of Done","children":{}},"/playground/01_literature/design":{"label":"Design","children":{"/playground/01_literature/design/product-design-commentary-20240927":{"label":"Product Design Commentary #1: New technologies changing UX/UI and product design","children":{}},"/playground/01_literature/design/product-design-commentary-20241004":{"label":"Product Design Commentary #2: Unpacking the sparkles icon and AI onboarding challenges","children":{}},"/playground/01_literature/design/product-design-commentary-20241011":{"label":"Product Design Commentary #3: The art of prompting in AI-human interaction","children":{}},"/playground/01_literature/design/product-design-commentary-20241018":{"label":"Product Design Commentary #4: Generative AI UX design patterns","children":{}},"/playground/01_literature/design/product-design-commentary-20241101":{"label":"Product Design Commentary #5: Figma to SwiftUI (functional code) with Claude AI","children":{}},"/playground/01_literature/design/product-design-commentary-20241115":{"label":"Product Design Commentary #6: AI in Design - Cool ideas and how to make them happen","children":{}},"/playground/01_literature/design/product-design-commentary-20241122":{"label":"Product Design Commentary #7: Hyper-personalization - How AI improves user experience personalization","children":{}}}},"/playground/01_literature/design-better-mobile-application":{"label":"Design Better Mobile Application","children":{}},"/playground/01_literature/design-file-sharing-system-part-1-directory-structure":{"label":"Design file-sharing system - Part 1: Directory Structure","children":{}},"/playground/01_literature/design-file-sharing-system-part-2-permission-and-password":{"label":"Design file-sharing system - Part 2: Permission & Password","children":{}},"/playground/01_literature/design-less-present-more-with-deckset":{"label":"Design less, present more with Deckset","children":{}},"/playground/01_literature/design-resourcestools":{"label":"Design Resourcestools","children":{}},"/playground/01_literature/design-system-for-layer-2-using-zk-rollup":{"label":"Design System For Layer 2 Using Zk Rollup","children":{}},"/playground/01_literature/design-system":{"label":"Design System","children":{}},"/playground/01_literature/design-tips-tricks":{"label":"Design Tips Tricks","children":{}},"/playground/01_literature/design-workflow":{"label":"Design Workflow","children":{}},"/playground/01_literature/designing-a-model-with-dynamic-properties":{"label":"Designing a model with dynamic properties","children":{}},"/playground/01_literature/designing-for-forgiveness":{"label":"Designing for Forgiveness: Creating Error-Tolerant Interfaces","children":{}},"/playground/01_literature/different-ways-to-test-react-application":{"label":"Different Ways To Test React Application","children":{}},"/playground/01_literature/docker-microcontainers":{"label":"Docker Microcontainers","children":{}},"/playground/01_literature/docker-registry":{"label":"Docker Registry","children":{}},"/playground/01_literature/dollar-cost-averaging":{"label":"Dollar Cost Averaging (DCA)","children":{}},"/playground/01_literature/domain-glossary":{"label":"Domain Glossary","children":{}},"/playground/01_literature/domain-insight-research-framework":{"label":"Domain Insight Research Framework","children":{}},"/playground/01_literature/draw-watch-face-using-swiftui":{"label":"Draw Watch Face Using Swiftui","children":{}},"/playground/01_literature/duckdb-demo-and-showcase":{"label":"DuckDB demo and showcase","children":{}},"/playground/01_literature/dwarves-radio-talk-16-run-an-effective-performance-review":{"label":"Dwarves Radio Talk 16 Run An Effective Performance Review","children":{}},"/playground/01_literature/dwarves-radio-talk-17-conduct-a-1-1-session":{"label":"Dwarves Radio Talk 17 Conduct A 1 1 Session","children":{}},"/playground/01_literature/dynamic-liquidity-market-a-new-form-of-concentrated-liquidity-amm-on-solana":{"label":"Dynamic Liquidity Market Maker - a new form of concentrated liquidity AMM on Solana","children":{}},"/playground/01_literature/easy-prompt-engineering-for-business-use-and-mitigating-risks-in-llms":{"label":"Easy Prompt Engineering For Business Use And Mitigating Risks In Llms","children":{}},"/playground/01_literature/echelon-x-singapore-2024-where-innovations-meet-inspiration":{"label":"Echelon X Singapore 2024: Where Innovations Meet Inspiration","children":{}},"/playground/01_literature/engineering":{"label":"Engineering","children":{"/playground/01_literature/engineering/backend":{"label":"Backend","children":{"/playground/01_literature/engineering/backend/bloom-filter":{"label":"Bloom Filter","children":{}},"/playground/01_literature/engineering/backend/introduction-to-crdt":{"label":"Introduction to CRDT","children":{}},"/playground/01_literature/engineering/backend/sql-and-how-it-relates-to-disk-reads-and-writes":{"label":"SQL and how it relates to Disk Reads and Writes","children":{}},"/playground/01_literature/engineering/backend/sql-sargable-queries-and-their-impact-on-database-performance":{"label":"SQL Saragable Queries and Their Impact on Database Performance","children":{}},"/playground/01_literature/engineering/backend/the-removal-of-apache-kafkas-dependency-on-zookeeper":{"label":"The removal of Apache Kafka's dependency on Zookeeper","children":{}}}},"/playground/01_literature/engineering/data":{"label":"Data","children":{"/playground/01_literature/engineering/data/data-pipeline-design-framework":{"label":"Data Pipeline Design Framework","children":{}},"/playground/01_literature/engineering/data/mapreduce":{"label":"MapReduce","children":{}},"/playground/01_literature/engineering/data/quick-learning-vector-database":{"label":"Quick Learning Vector Database","children":{}}}},"/playground/01_literature/engineering/google-data-fusion":{"label":"Google Data Fusion","children":{}},"/playground/01_literature/engineering/google-dataproc":{"label":"Google Dataproc","children":{}},"/playground/01_literature/engineering/introducing-htmx-navigating-the-advantages-and-concerns":{"label":"Introducing HTMX - Navigating the Advantages and Concerns","children":{}},"/playground/01_literature/engineering/typesafe-client-server":{"label":"Typesafe Client Server","children":{}},"/playground/01_literature/engineering/url-redirect-vs-rewrite":{"label":"URL Redirect vs. Rewrite; What’s the difference?","children":{}}}},"/playground/01_literature/error-handling-in-rust":{"label":"Error handling on Rust","children":{}},"/playground/01_literature/estimation-in-agile":{"label":"Estimation In Agile","children":{}},"/playground/01_literature/evolutionary-database-design":{"label":"Evolutionary Database Design: Managing Change and Scaling with the System","children":{}},"/playground/01_literature/exploring-machine-learning-approaches-for-fine-tuning-llama-models":{"label":"Exploring Machine Learning Approaches For Fine Tuning Llama Models","children":{}},"/playground/01_literature/fabric-hyperledger-architecture-explanation":{"label":"Fabric Hyperledger Architecture Explanation","children":{}},"/playground/01_literature/federated-byzantine":{"label":"Federated Byzantine","children":{}},"/playground/01_literature/feedback-mechanism":{"label":"Design feedback mechanism for LLM applications","children":{}},"/playground/01_literature/finite-state-machine":{"label":"Finite State Machine","children":{}},"/playground/01_literature/from-data-to-backend-an-apprentice-sharing":{"label":"From Data To Backend An Apprentice Sharing","children":{}},"/playground/01_literature/from-multi-repo-to-monorepo-a-case-study-with-nghenhan-turbo-monorepo":{"label":"From Multi Repo To Monorepo A Case Study With Nghenhan Turbo Monorepo","children":{}},"/playground/01_literature/fundamental-end-to-end-frontend-testing-with-cypress":{"label":"Fundamental End To End Frontend Testing With Cypress","children":{}},"/playground/01_literature/gestalt-principles-in-ui-design":{"label":"Gestalt Principles In Ui Design","children":{}},"/playground/01_literature/getting-started-with-webflow":{"label":"Getting Started With Webflow","children":{}},"/playground/01_literature/git-commit-message-convention":{"label":"Git Commit Message Convention","children":{}},"/playground/01_literature/gitflow-pull-request":{"label":"Gitflow Pull Request","children":{}},"/playground/01_literature/giving-a-talk-checklist":{"label":"Giving a talk","children":{}},"/playground/01_literature/good-design-understanding":{"label":"Good Design Understanding","children":{}},"/playground/01_literature/grid-and-layout":{"label":"Grid And Layout","children":{}},"/playground/01_literature/growth-is-our-universal-language":{"label":"Growth Is Our Universal Language","children":{}},"/playground/01_literature/history-of-structured-output-for-llms":{"label":"History of Structured Outputs for LLMs","children":{}},"/playground/01_literature/hoc-renderprops-and-hook-in-reactjs":{"label":"Hoc Renderprops And Hook In Reactjs","children":{}},"/playground/01_literature/how-a-design-system-work":{"label":"How A Design System Work","children":{}},"/playground/01_literature/how-blue-green-deployment-helped-mochi":{"label":"How Blue Green Deployment Helped Mochi","children":{}},"/playground/01_literature/how-i-create-content-for-multiple-platforms-at-dwarves":{"label":"How I Create Content for Multiple Platforms at Dwarves","children":{}},"/playground/01_literature/how-rd-contributes-to-performance-review":{"label":"How R&D contributes to Performance Review","children":{}},"/playground/01_literature/how-to-earn-reward-from-staking-dfg":{"label":"How to earn reward from staking DFG","children":{}},"/playground/01_literature/how-to-make-a-moc":{"label":"How to make a MOC","children":{}},"/playground/01_literature/how-to-push-content-on-note-d":{"label":"How to push content on memo.d.foundation","children":{}},"/playground/01_literature/how-to-recap-a-publication":{"label":"Recapping A publication","children":{}},"/playground/01_literature/how-to-set-up-environment-for-editing-memo":{"label":"How to set up environment to edit memo","children":{}},"/playground/01_literature/how-to-take-better-screenshots-on-mac":{"label":"How To Take Better Screenshots On Mac","children":{}},"/playground/01_literature/how-to-transfer-dfg-from-eth-to-base-for-staking":{"label":"How to bridge $DFG from Ethereum Mainnet to Base Network for staking","children":{}},"/playground/01_literature/how-we-contribute-to-homebrew":{"label":"How We Contribute To Homebrew","children":{}},"/playground/01_literature/how-we-crafted-the-ogif-summarizer-bot-to-streamline-weekly-knowledge-sharing":{"label":"How we crafted the OGIF summarizer bot to streamline weekly knowledge-sharing","children":{}},"/playground/01_literature/how-we-created-an-ai-powered-interview-system-using-openais-chatgpt":{"label":"How We Created An Ai Powered Interview System Using Openais Chatgpt","children":{}},"/playground/01_literature/how-we-setup-cicd":{"label":"How We Setup Cicd","children":{}},"/playground/01_literature/hybrid-search":{"label":"Evaluating search engine in RAG systems","children":{}},"/playground/01_literature/i18n-frontend-guideline":{"label":"I18n Frontend Guideline","children":{}},"/playground/01_literature/infinite-image-gallery-with-r3f-an-approach":{"label":"Infinite Image Gallery With R3f An Approach","children":{}},"/playground/01_literature/introduce-to-dwarves-memo":{"label":"Introduce To Dwarves Memo","children":{}},"/playground/01_literature/introduction-to-software-craftsmanship":{"label":"Introduction To Software Craftsmanship","children":{}},"/playground/01_literature/istio":{"label":"Istio","children":{}},"/playground/01_literature/knowledge-journey":{"label":"Knowledge Journey","children":{}},"/playground/01_literature/kubernetes-helm-101":{"label":"Kubernetes Helm 101","children":{}},"/playground/01_literature/labs-new-member-onboarding":{"label":"Labs - New Member Onboarding","children":{}},"/playground/01_literature/labs-roadmap-nov-23-update":{"label":"Labs Roadmap (Nov 23 update)","children":{}},"/playground/01_literature/labs-topic-proposal-progress-tracking":{"label":"Labs - Topic proposal & progress tracking","children":{}},"/playground/01_literature/labs-weekly-catchup-1":{"label":"Labs Weekly Catchup #1","children":{}},"/playground/01_literature/labs-weekly-catchup-2":{"label":"Labs Weekly Catchup #2","children":{}},"/playground/01_literature/labs-weekly-catchup-3":{"label":"Labs Weekly Catchup #3","children":{}},"/playground/01_literature/labs-weekly-catchup-4":{"label":"Labs Weekly Catchup #4","children":{}},"/playground/01_literature/labs-weekly-catchup-5":{"label":"Labs Weekly Catchup #5","children":{}},"/playground/01_literature/labs-who-we-are":{"label":"Labs - Who we are","children":{}},"/playground/01_literature/labs-x-consulting-workflow":{"label":"Labs x Consulting Workflow","children":{}},"/playground/01_literature/lessons-learned-from-being-a-part-of-corporate-micro-frontend-implementation":{"label":"Lessons Learned From Being A Part Of Corporate Micro Frontend Implementation","children":{}},"/playground/01_literature/lessons-learned-from-concurrency-practices-in-blockchain-projects":{"label":"Lessons Learned From Concurrency Practices In Blockchain Projects","children":{}},"/playground/01_literature/level-up-your-markdown-memos":{"label":"Level Up Your Markdown Memos: Avoiding Common Pitfalls","children":{}},"/playground/01_literature/lifecycle-of-a-publication":{"label":"Life cycle of a publication","children":{}},"/playground/01_literature/local-first-software":{"label":"Local-first Software","children":{}},"/playground/01_literature/managing-dataflow-and-sql-database-with-concurrency-control":{"label":"Managing Dataflow And Sql Database With Concurrency Control","children":{}},"/playground/01_literature/market":{"label":"Market","children":{"/playground/01_literature/market/an-overview-of-micro-investment-in-real-estate":{"label":"An Overview Of Micro Investment In Real Estate","children":{}}}},"/playground/01_literature/memo-knowledge-base-meeting":{"label":"Memo Knowledge Base Meeting","children":{}},"/playground/01_literature/memo-publication-workflow":{"label":"Memo Publication Workflow","children":{}},"/playground/01_literature/objective":{"label":"Objective","children":{}},"/playground/01_literature/observer-pattern":{"label":"Introduce the Observer pattern and its use cases","children":{}},"/playground/01_literature/our-daily-standup-format":{"label":"Our Daily Standup Format","children":{}},"/playground/01_literature/our-view-on-fullstack-engineering":{"label":"Our View On Fullstack Engineering","children":{}},"/playground/01_literature/overview-on-broker-pattern-in-distributed-system":{"label":"Overview On Broker Pattern In Distributed System","children":{}},"/playground/01_literature/passing-the-probation-get-3-upvotes":{"label":"Passing The Probation Get 3 Upvotes","children":{}},"/playground/01_literature/peep-nft":{"label":"Claim your Peeps NFT","children":{}},"/playground/01_literature/playaround-with-clojure":{"label":"Playaround With Clojure","children":{}},"/playground/01_literature/playaround-with-rust":{"label":"Playaround With Rust","children":{}},"/playground/01_literature/project-management":{"label":"Project Management","children":{}},"/playground/01_literature/prototype-design-pattern":{"label":"Going Through use cases of the prototype design pattern and it place among the creational patterns","children":{}},"/playground/01_literature/qc-onboarding":{"label":"Qc Onboarding","children":{}},"/playground/01_literature/radio-talk-60-blue-green-deployment":{"label":"Radio Talk 60 Blue Green Deployment","children":{}},"/playground/01_literature/radio-talk-61-monorepo":{"label":"Radio Talk 61 Monorepo","children":{}},"/playground/01_literature/radix-sort":{"label":"Radix Sort","children":{}},"/playground/01_literature/react-native-new-architecture":{"label":"React Native New Architecture","children":{}},"/playground/01_literature/record-reward-sharing-culture":{"label":"Record and reward sharing at Dwarves","children":{}},"/playground/01_literature/recording-flow":{"label":"How We Set Up a Recording Workflow for Dwarves Office Hours","children":{}},"/playground/01_literature/recursively-export-file-pattern-in-javascript-es6-application":{"label":"Recursively Export File Pattern In Javascript Es6 Application","children":{}},"/playground/01_literature/remote-moderated-usability-testing":{"label":"Remote Moderated Usability Testing","children":{}},"/playground/01_literature/remote-prepare-and-get-going":{"label":"Remote Prepare And Get Going","children":{}},"/playground/01_literature/reproduce-apple-find-me-bottom-menu-view":{"label":"Reproduce Apple Find Me Bottom Menu View","children":{}},"/playground/01_literature/resource-assignment":{"label":"Resource Assignment","children":{}},"/playground/01_literature/responsibility":{"label":"Responsibility","children":{}},"/playground/01_literature/reusability-in-software-development":{"label":"Reusability In Software Development","children":{}},"/playground/01_literature/reward-model-nomination":{"label":"Reward Model & Nomination","children":{}},"/playground/01_literature/salary-advance":{"label":"$icy Salary Advance","children":{}},"/playground/01_literature/sdk-event-sourcing":{"label":"Sdk Event Sourcing","children":{}},"/playground/01_literature/security":{"label":"Security","children":{"/playground/01_literature/security/a-holistic-guide-to-security":{"label":"A Holistic Guide to Security","children":{}},"/playground/01_literature/security/how-i-came-up-with-our-security-standard":{"label":"How I came up with our Security Standard","children":{}}}},"/playground/01_literature/setup-react-project-with-webpack-and-babel":{"label":"Setup React Project With Webpack And Babel","children":{}},"/playground/01_literature/singleton-design-pattern":{"label":"A tour of Singleton design pattern with Golang","children":{}},"/playground/01_literature/six-things-i-extracted-from-design-thinking":{"label":"Six Things I Extracted From Design Thinking","children":{}},"/playground/01_literature/skill-of-software-engineer":{"label":"Skill Of Software Engineer","children":{}},"/playground/01_literature/software-development-life-cycle-101":{"label":"Software Development Life Cycle 101","children":{}},"/playground/01_literature/software-modeling":{"label":"Software Modeling","children":{}},"/playground/01_literature/split-and-reuse-code-in-react-application":{"label":"Split And Reuse Code In React Application","children":{}},"/playground/01_literature/sprint-lifecycle":{"label":"Sprint Lifecycle","children":{}},"/playground/01_literature/sql-practices-orm-vs-plain-sql":{"label":"Sql Practices Orm Vs Plain Sql","children":{}},"/playground/01_literature/startups-vs-junior-designers":{"label":"Startups Vs Junior Designers","children":{}},"/playground/01_literature/state-pattern":{"label":"State Pattern","children":{}},"/playground/01_literature/strategy-design-pattern":{"label":"Strategy design pattern, the concept, use cases and difference with the state design pattern","children":{}},"/playground/01_literature/swiftui":{"label":"Swiftui","children":{}},"/playground/01_literature/tech-canvas":{"label":"Tech Canvas","children":{}},"/playground/01_literature/tech-event-in-the-latest-transforming-healthcare-with-technology":{"label":"Tech Event In The Latest Transforming Healthcare With Technology","children":{}},"/playground/01_literature/template-method-design-pattern":{"label":"A Tour of Template method pattern with Golang","children":{}},"/playground/01_literature/the-10x-engineer":{"label":"The 10x Engineer","children":{}},"/playground/01_literature/the-correct-way-to-build-kpi":{"label":"The Correct Way To Build Kpi","children":{}},"/playground/01_literature/the-key-of-security-mechanisms-in-tackling-cyber-threats":{"label":"The Key Of Security Mechanisms In Tackling Cyber Threats","children":{}},"/playground/01_literature/the-principle-of-spacing-in-ui-design-part-1":{"label":"The Principle Of Spacing In Ui Design Part 1","children":{}},"/playground/01_literature/the-principle-of-spacing-in-ui-design-part-2":{"label":"The Principle Of Spacing In Ui Design Part 2","children":{}},"/playground/01_literature/three-levels-of-design":{"label":"Three Levels Of Design","children":{}},"/playground/01_literature/traits-to-assess-during-an-interview":{"label":"Traits To Assess During An Interview","children":{}},"/playground/01_literature/ui-design-best-practices-dwarves":{"label":"Ui Design Best Practices Dwarves","children":{}},"/playground/01_literature/ui-design-fundamental":{"label":"Ui Design Fundamental","children":{}},"/playground/01_literature/uidynamicanimator":{"label":"Uidynamicanimator","children":{}},"/playground/01_literature/understanding-an-application-design":{"label":"Understanding An Application Design","children":{}},"/playground/01_literature/understanding-saving-investing-and-speculating-key-differences-and-strategies":{"label":"Understanding Saving, Investing, and Speculating: Key Differences and Strategies","children":{}},"/playground/01_literature/using-foundry-for-evm-smart-contract-developement":{"label":"Using Foundry for EVM smart contract development","children":{}},"/playground/01_literature/ux-model":{"label":"Ux Model","children":{}},"/playground/01_literature/vietnam-tech-ecosystem-report":{"label":"Vietnam Tech Ecosystem 2024 Report","children":{}},"/playground/01_literature/visitor-design-pattern":{"label":"Visitor design pattern, the concept, problem solution and use cases","children":{}},"/playground/01_literature/well-crafted-software":{"label":"Well Crafted Software","children":{}},"/playground/01_literature/what-i-learned-on-design-thinking-and-software-development":{"label":"What I Learned On Design Thinking And Software Development","children":{}},"/playground/01_literature/what-is-kubernetes":{"label":"What Is Kubernetes","children":{}},"/playground/01_literature/working-on-a-project-interview-assessment-at-dwarves":{"label":"Working On A Project Interview Assessment At Dwarves","children":{}},"/playground/01_literature/writing":{"label":"Writing","children":{"/playground/01_literature/writing/state-explain-link":{"label":"State, Explain, Link - An all-purpose writing technique","children":{}}}},"/playground/01_literature/writing-content-for-multimedia-guidelines":{"label":"Writing Content for Multimedia Guidelines","children":{}},"/playground/01_literature/xpc-services-on-macos-app-using-swift":{"label":"Xpc Services On Macos App Using Swift","children":{}}}},"/playground/_radar":{"label":"_radar","children":{"/playground/_radar/ant-design":{"label":"Ant Design","children":{}},"/playground/_radar/apache-kafka":{"label":"Apache Kafka","children":{}},"/playground/_radar/apache-spark":{"label":"Apache Spark","children":{}},"/playground/_radar/argocd":{"label":"Argocd","children":{}},"/playground/_radar/astro":{"label":"Astro","children":{}},"/playground/_radar/backstage":{"label":"Backstage","children":{}},"/playground/_radar/blue-green-deployment":{"label":"Blue Green Deployment","children":{}},"/playground/_radar/browserstack":{"label":"Browserstack","children":{}},"/playground/_radar/carbon":{"label":"Carbon","children":{}},"/playground/_radar/chatgpt-assistance":{"label":"Chatgpt Assistance","children":{}},"/playground/_radar/chromatic":{"label":"Chromatic","children":{}},"/playground/_radar/clickhouse":{"label":"Clickhouse","children":{}},"/playground/_radar/cloudflare-workers":{"label":"Cloudflare Workers","children":{}},"/playground/_radar/codecept":{"label":"Codecept","children":{}},"/playground/_radar/commitlint":{"label":"Commitlint","children":{}},"/playground/_radar/copilot":{"label":"Copilot","children":{}},"/playground/_radar/cucumber":{"label":"Cucumber","children":{}},"/playground/_radar/cypress":{"label":"Cypress","children":{}},"/playground/_radar/dapr":{"label":"Dapr","children":{}},"/playground/_radar/deno":{"label":"Deno","children":{}},"/playground/_radar/detox":{"label":"Detox","children":{}},"/playground/_radar/devcontainers":{"label":"Devcontainers","children":{}},"/playground/_radar/devpod":{"label":"Devpod","children":{}},"/playground/_radar/dora-metrics":{"label":"Dora Metrics","children":{}},"/playground/_radar/duckdb":{"label":"Duckdb","children":{}},"/playground/_radar/earthly":{"label":"Earthly","children":{}},"/playground/_radar/elixir-umbrella-project":{"label":"Elixir Umbrella Project","children":{}},"/playground/_radar/elixir":{"label":"Elixir","children":{}},"/playground/_radar/erlang":{"label":"Erlang","children":{}},"/playground/_radar/error-logging-convention":{"label":"Error Logging Convention","children":{}},"/playground/_radar/eslint":{"label":"Eslint","children":{}},"/playground/_radar/event-sourcing":{"label":"Event Sourcing","children":{}},"/playground/_radar/excalidraw":{"label":"Excalidraw","children":{}},"/playground/_radar/expo":{"label":"Expo","children":{}},"/playground/_radar/figma":{"label":"Figma","children":{}},"/playground/_radar/formal-verification":{"label":"Formal Verification","children":{}},"/playground/_radar/fullstack-tracing":{"label":"Fullstack Tracing","children":{}},"/playground/_radar/gestalt-principle":{"label":"Gestalt Principle","children":{}},"/playground/_radar/github-actions":{"label":"Github Actions","children":{}},"/playground/_radar/golang":{"label":"Golang","children":{}},"/playground/_radar/grafana":{"label":"Grafana","children":{}},"/playground/_radar/graylog":{"label":"Graylog","children":{}},"/playground/_radar/headless-ui":{"label":"Headless Ui","children":{}},"/playground/_radar/hoppscotch":{"label":"Hoppscotch","children":{}},"/playground/_radar/ipfs":{"label":"Ipfs","children":{}},"/playground/_radar/jotai":{"label":"Jotai","children":{}},"/playground/_radar/k6":{"label":"K6","children":{}},"/playground/_radar/k9s":{"label":"K9s","children":{}},"/playground/_radar/kaniko":{"label":"Kaniko","children":{}},"/playground/_radar/kotlin":{"label":"Kotlin","children":{}},"/playground/_radar/kubeseal-sops":{"label":"Kubeseal Sops","children":{}},"/playground/_radar/ladle":{"label":"Ladle","children":{}},"/playground/_radar/langchain":{"label":"Langchain","children":{}},"/playground/_radar/large-language-model-llm":{"label":"Large Language Model Llm","children":{}},"/playground/_radar/loki":{"label":"Loki","children":{}},"/playground/_radar/makefile":{"label":"Makefile","children":{}},"/playground/_radar/micro-frontend":{"label":"Micro Frontend","children":{}},"/playground/_radar/monorepo":{"label":"Monorepo","children":{}},"/playground/_radar/msw":{"label":"Msw","children":{}},"/playground/_radar/n6n":{"label":"N6n","children":{}},"/playground/_radar/nestjs":{"label":"Nestjs","children":{}},"/playground/_radar/netlify":{"label":"Netlify","children":{}},"/playground/_radar/newrelic":{"label":"Newrelic","children":{}},"/playground/_radar/nextjs":{"label":"Nextjs","children":{}},"/playground/_radar/nodejs":{"label":"Nodejs","children":{}},"/playground/_radar/nostrum":{"label":"Nostrum","children":{}},"/playground/_radar/nx":{"label":"Nx","children":{}},"/playground/_radar/orval":{"label":"Orval","children":{}},"/playground/_radar/page-object-model":{"label":"Page Object Model","children":{}},"/playground/_radar/partytown":{"label":"Partytown","children":{}},"/playground/_radar/phaser":{"label":"Phaser","children":{}},"/playground/_radar/phoenix":{"label":"Phoenix","children":{}},"/playground/_radar/playwright":{"label":"Playwright","children":{}},"/playground/_radar/pnpm":{"label":"Pnpm","children":{}},"/playground/_radar/progressive-delivery":{"label":"Progressive Delivery","children":{}},"/playground/_radar/prometheus":{"label":"Prometheus","children":{}},"/playground/_radar/prompt-engineering":{"label":"Prompt Engineering","children":{}},"/playground/_radar/qwik":{"label":"Qwik","children":{}},"/playground/_radar/radix-ui":{"label":"Radix Ui","children":{}},"/playground/_radar/react-hook-form":{"label":"React Hook Form","children":{}},"/playground/_radar/react-llm":{"label":"React Llm","children":{}},"/playground/_radar/react-native":{"label":"React Native","children":{}},"/playground/_radar/react-query":{"label":"React Query","children":{}},"/playground/_radar/react-server-component":{"label":"React Server Component","children":{}},"/playground/_radar/react-testing-library":{"label":"React Testing Library","children":{}},"/playground/_radar/react":{"label":"React","children":{}},"/playground/_radar/reinforcement-learning-from-human-feedback":{"label":"Reinforcement Learning From Human Feedback","children":{}},"/playground/_radar/remix":{"label":"Remix","children":{}},"/playground/_radar/replayio":{"label":"Replayio","children":{}},"/playground/_radar/reverse-engineering":{"label":"Reverse Engineering","children":{}},"/playground/_radar/rust":{"label":"Rust","children":{}},"/playground/_radar/selenium":{"label":"Selenium","children":{}},"/playground/_radar/semantic-release-auto-release":{"label":"Semantic Release Auto Release","children":{}},"/playground/_radar/sentry":{"label":"Sentry","children":{}},"/playground/_radar/serverlessq":{"label":"Serverlessq","children":{}},"/playground/_radar/solidity":{"label":"Solidity","children":{}},"/playground/_radar/solidjs":{"label":"Solidjs","children":{}},"/playground/_radar/stern":{"label":"Stern","children":{}},"/playground/_radar/svelte":{"label":"Svelte","children":{}},"/playground/_radar/swagger":{"label":"Swagger","children":{}},"/playground/_radar/swift-ui":{"label":"Swift Ui","children":{}},"/playground/_radar/swift":{"label":"Swift","children":{}},"/playground/_radar/swr":{"label":"Swr","children":{}},"/playground/_radar/tailwindcss":{"label":"Tailwindcss","children":{}},"/playground/_radar/tauri":{"label":"Tauri","children":{}},"/playground/_radar/team-topologies":{"label":"Team Topologies","children":{}},"/playground/_radar/timeline":{"label":"Timeline","children":{"/playground/_radar/timeline/a-case-study-interview-into-micro-frontends-building-design-system-for-e-commerce-platform":{"label":"A Case Study Interview Into Micro Frontends Building Design System For E Commerce Platform","children":{}},"/playground/_radar/timeline/accelerate-project-initiation-with-advanced-nextjs-boilerplate-react-toolkit":{"label":"Accelerate Project Initiation With Advanced Nextjs Boilerplate React Toolkit","children":{}},"/playground/_radar/timeline/adapt-cucumber-as-a-bdd-for-wego":{"label":"Adapt Cucumber As A Bdd For Wego","children":{}},"/playground/_radar/timeline/add-type-safe-client-server-support-for-next-boilerplate":{"label":"Add Type Safe Client Server Support For Next Boilerplate","children":{}},"/playground/_radar/timeline/adoption-of-pnpm":{"label":"Adoption Of Pnpm","children":{}},"/playground/_radar/timeline/adversarial-prompting":{"label":"Adversarial Prompting","children":{}},"/playground/_radar/timeline/an-engineering-story-map-for-llms":{"label":"An Engineering Story Map For Llms","children":{}},"/playground/_radar/timeline/apply-blue-green-deployment-to-mochi":{"label":"Apply Blue Green Deployment To Mochi","children":{}},"/playground/_radar/timeline/apply-monorepos-to-repit-to-resolve-the-problem-of-consistency":{"label":"Apply Monorepos To Repit To Resolve The Problem Of Consistency","children":{}},"/playground/_radar/timeline/apply-page-object-model-structure-to-aharooms":{"label":"Apply Page Object Model Structure To Aharooms","children":{}},"/playground/_radar/timeline/apply-page-object-model-structure-to-artzy":{"label":"Apply Page Object Model Structure To Artzy","children":{}},"/playground/_radar/timeline/apply-page-object-model-structure-to-basehq":{"label":"Apply Page Object Model Structure To Basehq","children":{}},"/playground/_radar/timeline/apply-page-object-model-structure-to-sci":{"label":"Apply Page Object Model Structure To Sci","children":{}},"/playground/_radar/timeline/apply-page-object-model-structure-to-wego":{"label":"Apply Page Object Model Structure To Wego","children":{}},"/playground/_radar/timeline/applying-mock-service-worker-msw-for-seamless-web-development":{"label":"Applying Mock Service Worker Msw For Seamless Web Development","children":{}},"/playground/_radar/timeline/approaches-to-manage-concurrent-workloads-like-worker-pools-and-pipelines":{"label":"Approaches To Manage Concurrent Workloads Like Worker Pools And Pipelines","children":{}},"/playground/_radar/timeline/backend-for-call-requests-to-binance-and-get-data-from-multiple-platforms":{"label":"Backend For Call Requests To Binance And Get Data From Multiple Platforms","children":{}},"/playground/_radar/timeline/brainery-blue-green-deployment":{"label":"Brainery Blue Green Deployment","children":{}},"/playground/_radar/timeline/brainery-progressive-delivery":{"label":"Brainery Progressive Delivery","children":{}},"/playground/_radar/timeline/brainery-validation-with-zod":{"label":"Brainery Validation With Zod","children":{}},"/playground/_radar/timeline/build-automation-for-sci":{"label":"Build Automation For Sci","children":{}},"/playground/_radar/timeline/build-your-chatbot-with-open-source-large-language-models":{"label":"Build Your Chatbot With Open Source Large Language Models","children":{}},"/playground/_radar/timeline/building-reliable-apps-sentry-and-distributed-tracing-for-effective-monitoring":{"label":"Building Reliable Apps Sentry And Distributed Tracing For Effective Monitoring","children":{}},"/playground/_radar/timeline/case-study-from-multiple-repo-to-monorepo-at-nghe-nhan":{"label":"Case Study From Multiple Repo To Monorepo At Nghe Nhan","children":{}},"/playground/_radar/timeline/case-study-how-blue-green-deployment-help-mochi":{"label":"Case Study How Blue Green Deployment Help Mochi","children":{}},"/playground/_radar/timeline/challenge-faced-when-researching-rlhf-with-open-assistant":{"label":"Challenge Faced When Researching Rlhf With Open Assistant","children":{}},"/playground/_radar/timeline/chunking-strategies-to-overcome-context-limitation-in-llm":{"label":"Chunking Strategies To Overcome Context Limitation In Llm","children":{}},"/playground/_radar/timeline/common-design-patterns-in-golang-part-1":{"label":"Common Design Patterns In Golang Part 1","children":{}},"/playground/_radar/timeline/create-api-service-for-urbox-to-sync-orders-from-3rd-parties-and-manage-shipment":{"label":"Create Api Service For Urbox To Sync Orders From 3rd Parties And Manage Shipment","children":{}},"/playground/_radar/timeline/create-backend-monorepo-to-share-code-and-manage-multiple-services-in-one-repo":{"label":"Create Backend Monorepo To Share Code And Manage Multiple Services In One Repo","children":{}},"/playground/_radar/timeline/create-working-devcontainer-for-go-api":{"label":"Create Working Devcontainer For Go Api","children":{}},"/playground/_radar/timeline/create-working-devcontainer-for-nextjs-boilerplate":{"label":"Create Working Devcontainer For Nextjs Boilerplate","children":{}},"/playground/_radar/timeline/dealing-with-long-term-memory-of-chatbot":{"label":"Dealing With Long Term Memory Of Chatbot","children":{}},"/playground/_radar/timeline/develop-codecept-to-integrate-with-fortress":{"label":"Develop Codecept To Integrate With Fortress","children":{}},"/playground/_radar/timeline/develop-sdk-integration-demo-for-sajari":{"label":"Develop Sdk Integration Demo For Sajari","children":{}},"/playground/_radar/timeline/develop":{"label":"Develop","children":{}},"/playground/_radar/timeline/diagnosing-and-resolving-performance-issues-with-pprof-and-trace-in-go":{"label":"Diagnosing And Resolving Performance Issues With Pprof And Trace In Go","children":{}},"/playground/_radar/timeline/easy-prompt-engineering-for-business-use-and-mitigating-risks-in-llms":{"label":"Easy Prompt Engineering For Business Use And Mitigating Risks In Llms","children":{}},"/playground/_radar/timeline/embracing-go-1210s-slog-a-unified-logging-interface-with-benchmarks-against-zerolog-and-zap":{"label":"Embracing Go 1210s Slog A Unified Logging Interface With Benchmarks Against Zerolog And Zap","children":{}},"/playground/_radar/timeline/error-handling-and-failure-management-in-a-go-system":{"label":"Error Handling And Failure Management In A Go System","children":{}},"/playground/_radar/timeline/exploring-resumable-server-side-rendering-with-qwik":{"label":"Exploring Resumable Server Side Rendering With Qwik","children":{}},"/playground/_radar/timeline/fe-23-training-type-safe-client-server":{"label":"Fe 23 Training Type Safe Client Server","children":{}},"/playground/_radar/timeline/first-introduced-use-of-duckdb-in-consolelabs-logconsoleso":{"label":"First Introduced Use Of Duckdb In Consolelabs Logconsoleso","children":{}},"/playground/_radar/timeline/foundation-model":{"label":"Foundation Model","children":{}},"/playground/_radar/timeline/from-multi-repo-to-monorepo-a-case-study-with-nghenhan":{"label":"From Multi Repo To Monorepo A Case Study With Nghenhan","children":{}},"/playground/_radar/timeline/go-training-2023-from-basic-to-advanced":{"label":"Go Training 2023 From Basic To Advanced","children":{}},"/playground/_radar/timeline/integrate-playwright-to-run-e2e-test-with-fortress":{"label":"Integrate Playwright To Run E2e Test With Fortress","children":{}},"/playground/_radar/timeline/integrate-playwright-x-codecept-with-discord":{"label":"Integrate Playwright X Codecept With Discord","children":{}},"/playground/_radar/timeline/integrate-zod-to-nextjs-boilerplate":{"label":"Integrate Zod To Nextjs Boilerplate","children":{}},"/playground/_radar/timeline/learn-typescript-as-a-mandatory-to-develop-reapit-foundation":{"label":"Learn Typescript As A Mandatory To Develop Reapit Foundation","children":{}},"/playground/_radar/timeline/lessons-learned-building-an-llm-chatbot-a-case-study":{"label":"Lessons Learned Building An Llm Chatbot A Case Study","children":{}},"/playground/_radar/timeline/lessons-learned-from-being-a-part-of-corporate-microfrontend-implementation":{"label":"Lessons Learned From Being A Part Of Corporate Microfrontend Implementation","children":{}},"/playground/_radar/timeline/lessons-learned-from-concurrency-practices-in-blockchain-projects":{"label":"Lessons Learned From Concurrency Practices In Blockchain Projects","children":{}},"/playground/_radar/timeline/level-up-your-testing-game-harnessing-gomock-for-unbeatable-unit-testing-in-go":{"label":"Level Up Your Testing Game Harnessing Gomock For Unbeatable Unit Testing In Go","children":{}},"/playground/_radar/timeline/live-view":{"label":"Live View","children":{}},"/playground/_radar/timeline/llm-101-enhance-developer-productivity":{"label":"Llm 101 Enhance Developer Productivity","children":{}},"/playground/_radar/timeline/llm-query-caching":{"label":"Llm Query Caching","children":{}},"/playground/_radar/timeline/llms-accuracy-self-refinement":{"label":"Llms Accuracy Self Refinement","children":{}},"/playground/_radar/timeline/mdx-document-for":{"label":"Mdx Document For","children":{}},"/playground/_radar/timeline/memo-blue-green-deployment":{"label":"Memo Blue Green Deployment","children":{}},"/playground/_radar/timeline/memo-react-native-new-architecture":{"label":"Memo React Native New Architecture","children":{}},"/playground/_radar/timeline/migrate-aharooms-pms-to-typescript":{"label":"Migrate Aharooms Pms To Typescript","children":{}},"/playground/_radar/timeline/migrate-headlessui-to-radixui":{"label":"Migrate Headlessui To Radixui","children":{}},"/playground/_radar/timeline/migrate-yarn-to-pnpm-in-fortress":{"label":"Migrate Yarn To Pnpm In Fortress","children":{}},"/playground/_radar/timeline/migrate-yarn-to-pnpm-in-nextjs-boilerplate":{"label":"Migrate Yarn To Pnpm In Nextjs Boilerplate","children":{}},"/playground/_radar/timeline/migrate-yarn-to-pnpm-in-nghe-nhan-droppii":{"label":"Migrate Yarn To Pnpm In Nghe Nhan Droppii","children":{}},"/playground/_radar/timeline/migrate-yarn-to-pnpm-in-react-toolkit":{"label":"Migrate Yarn To Pnpm In React Toolkit","children":{}},"/playground/_radar/timeline/nextjs-boilerplate":{"label":"Nextjs Boilerplate","children":{}},"/playground/_radar/timeline/nghenhan-microservices":{"label":"Nghenhan Microservices","children":{}},"/playground/_radar/timeline/open-source-devpod-paperspace-provider":{"label":"Open Source Devpod Paperspace Provider","children":{}},"/playground/_radar/timeline/overcoming-distributed-system-challenges-using-golang":{"label":"Overcoming Distributed System Challenges Using Golang","children":{}},"/playground/_radar/timeline/practice-and-using-selenium-in-setel-project":{"label":"Practice And Using Selenium In Setel Project","children":{}},"/playground/_radar/timeline/q-learning":{"label":"Q Learning","children":{}},"/playground/_radar/timeline/radio-talk-64-coding-best-practice-that-optimizing-go-compiler":{"label":"Radio Talk 64 Coding Best Practice That Optimizing Go Compiler","children":{}},"/playground/_radar/timeline/radio-talk-65-fullstack-type-safe-with-trpc":{"label":"Radio Talk 65 Fullstack Type Safe With Trpc","children":{}},"/playground/_radar/timeline/radio-talk-a-demo-of-query-engine-postgresql-vs-apache-spark":{"label":"Radio Talk A Demo Of Query Engine Postgresql Vs Apache Spark","children":{}},"/playground/_radar/timeline/radio-talk-blue-green-deployment":{"label":"Radio Talk Blue Green Deployment","children":{}},"/playground/_radar/timeline/radio-talk-engineering-health-metrics":{"label":"Radio Talk Engineering Health Metrics","children":{}},"/playground/_radar/timeline/radio-talk-introduction-to-apache-spark":{"label":"Radio Talk Introduction To Apache Spark","children":{}},"/playground/_radar/timeline/radio-talk-monorepo":{"label":"Radio Talk Monorepo","children":{}},"/playground/_radar/timeline/radio-talk-nextjs-13":{"label":"Radio Talk Nextjs 13","children":{}},"/playground/_radar/timeline/radio-talk-remix-vs-nextjs":{"label":"Radio Talk Remix Vs Nextjs","children":{}},"/playground/_radar/timeline/radio-talk-turborepo":{"label":"Radio Talk Turborepo","children":{}},"/playground/_radar/timeline/radio-talk-using-nextjs-as-a-fullstack-framework":{"label":"Radio Talk Using Nextjs As A Fullstack Framework","children":{}},"/playground/_radar/timeline/react-server-component":{"label":"React Server Component","children":{}},"/playground/_radar/timeline/react-toolkit-migrate-from-lerna-to-turporepo":{"label":"React Toolkit Migrate From Lerna To Turporepo","children":{}},"/playground/_radar/timeline/react-toolkit":{"label":"React Toolkit","children":{}},"/playground/_radar/timeline/reinforcement-learning":{"label":"Reinforcement Learning","children":{}},"/playground/_radar/timeline/reward-model":{"label":"Reward Model","children":{}},"/playground/_radar/timeline/rnd-team-mentioned-apache-spark-as-a-solution-to-handle-query-big-data":{"label":"Rnd Team Mentioned Apache Spark As A Solution To Handle Query Big Data","children":{}},"/playground/_radar/timeline/select-vector-database-for-llm":{"label":"Select Vector Database For Llm","children":{}},"/playground/_radar/timeline/state-of-frontend-2023-react-vs-angular-vs-vue":{"label":"State Of Frontend 2023 React Vs Angular Vs Vue","children":{}},"/playground/_radar/timeline/sum-command":{"label":"Sum Command","children":{}},"/playground/_radar/timeline/tackling-server-state-complexity-in-frontend-development":{"label":"Tackling Server State Complexity In Frontend Development","children":{}},"/playground/_radar/timeline/the-cost-of-react-native":{"label":"The Cost Of React Native","children":{}},"/playground/_radar/timeline/understanding-test-doubles-an-in-depth-look":{"label":"Understanding Test Doubles An In Depth Look","children":{}},"/playground/_radar/timeline/unit-testing-best-practices-in-golang":{"label":"Unit Testing Best Practices In Golang","children":{}},"/playground/_radar/timeline/urbox-backend-api":{"label":"Urbox Backend Api","children":{}},"/playground/_radar/timeline/use-monorepos-to-build-v3-of-react-sdk-for-searchio":{"label":"Use Monorepos To Build V3 Of React Sdk For Searchio","children":{}},"/playground/_radar/timeline/use-monorepos-to-resolve-the-problem-of-sharing-ui-components-in-aharoom":{"label":"Use Monorepos To Resolve The Problem Of Sharing Ui Components In Aharoom","children":{}},"/playground/_radar/timeline/use-nx-for-managing-basehq-frontend-monorepos":{"label":"Use Nx For Managing Basehq Frontend Monorepos","children":{}},"/playground/_radar/timeline/use-yup-to-validate-form-values-in-droppii":{"label":"Use Yup To Validate Form Values In Droppii","children":{}},"/playground/_radar/timeline/using-k6-in-setel":{"label":"Using K6 In Setel","children":{}},"/playground/_radar/timeline/vercel-switching-their-packages-from-yarn-to-pnpm-caught-our-attention":{"label":"Vercel Switching Their Packages From Yarn To Pnpm Caught Our Attention","children":{}},"/playground/_radar/timeline/vitejs-native-modules":{"label":"Vitejs Native Modules","children":{}},"/playground/_radar/timeline/what-is-pnpm":{"label":"What Is Pnpm","children":{}},"/playground/_radar/timeline/why-micro-frontend":{"label":"Why Micro Frontend","children":{}},"/playground/_radar/timeline/why-we-chose-our-tech-stack":{"label":"Why We Chose Our Tech Stack","children":{}},"/playground/_radar/timeline/workaround-with-openais-token-limit-with-langchain":{"label":"Workaround With Openais Token Limit With Langchain","children":{}},"/playground/_radar/timeline/working-with-langchain-document-loaders":{"label":"Working With Langchain Document Loaders","children":{}}}},"/playground/_radar/timescaledb":{"label":"Timescaledb","children":{}},"/playground/_radar/tla":{"label":"Tla","children":{}},"/playground/_radar/trunk-based-development":{"label":"Trunk Based Development","children":{}},"/playground/_radar/turborepo":{"label":"Turborepo","children":{}},"/playground/_radar/type-safe-client-server":{"label":"Type Safe Client Server","children":{}},"/playground/_radar/typescript":{"label":"Typescript","children":{}},"/playground/_radar/ui-documentation":{"label":"Ui Documentation","children":{}},"/playground/_radar/uno-css":{"label":"Uno Css","children":{}},"/playground/_radar/upptime":{"label":"Upptime","children":{}},"/playground/_radar/v-model":{"label":"V Model","children":{}},"/playground/_radar/vector-database":{"label":"Vector Database","children":{}},"/playground/_radar/vercel":{"label":"Vercel","children":{}},"/playground/_radar/vitejs":{"label":"Vitejs","children":{}},"/playground/_radar/volta":{"label":"Volta","children":{}},"/playground/_radar/wasm":{"label":"Wasm","children":{}},"/playground/_radar/webdriverio":{"label":"Webdriverio","children":{}},"/playground/_radar/webflow":{"label":"Webflow","children":{}},"/playground/_radar/yup":{"label":"Yup","children":{}},"/playground/_radar/zod":{"label":"Zod","children":{}},"/playground/_radar/zustand":{"label":"Zustand","children":{}}}},"/playground/ai":{"label":"Ai","children":{"/playground/ai/a-grand-unified-theory-of-the-ai-hype-cycle":{"label":"A Grand Unified Theory of the AI Hype Cycle","children":{}},"/playground/ai/adversarial-prompting":{"label":"Adversarial Prompting in Prompt Engineering","children":{}},"/playground/ai/build-your-chatbot-with-open-source-large-language-models":{"label":"Build your chatbot with open source Large Language Models","children":{}},"/playground/ai/building-llm-powered-tools-with-dify":{"label":"Streamlining Internal Tool Development with Managed LLMOps: A Dify Case Study","children":{}},"/playground/ai/building-llm-system":{"label":"Building Llm System","children":{"/playground/ai/building-llm-system/building-llm-system":{"label":"§ Building LLM system","children":{}},"/playground/ai/building-llm-system/evaluation-guideline-for-llm-application":{"label":"Evaluation guidelines for LLM applications","children":{}},"/playground/ai/building-llm-system/graphrag":{"label":"GraphRAG - Building a knowledge graph for RAG system","children":{}},"/playground/ai/building-llm-system/guardrails-in-llm":{"label":"Guardrails in llm","children":{}},"/playground/ai/building-llm-system/intent-classification-by-llm":{"label":"Intent classification by LLM","children":{}},"/playground/ai/building-llm-system/llm-as-a-judge":{"label":"LLM as a judge","children":{}},"/playground/ai/building-llm-system/logs-pillar":{"label":"Logging","children":{}},"/playground/ai/building-llm-system/metric-pillar":{"label":"Metrics","children":{}},"/playground/ai/building-llm-system/model-selection":{"label":"Model selection","children":{}},"/playground/ai/building-llm-system/multi-agent-collaboration-for-task-completion":{"label":"Multi-agent collaboration for task completion","children":{}},"/playground/ai/building-llm-system/multimodal-in-rag":{"label":"Multimodal in rag","children":{}},"/playground/ai/building-llm-system/observability-in-ai-platforms":{"label":"Observability in AI platforms","children":{}},"/playground/ai/building-llm-system/prevent-prompt-injection":{"label":"Prevent prompt injection","children":{}},"/playground/ai/building-llm-system/quantization-in-llm":{"label":"Quantization for large language models","children":{}},"/playground/ai/building-llm-system/react-in-llm":{"label":"ReAct(Reason + Act) in LLM","children":{}},"/playground/ai/building-llm-system/rewoo-in-llm":{"label":"ReWOO: Reasoning without observation - A deeper look","children":{}},"/playground/ai/building-llm-system/the-rise-of-ai-applications-with-llm":{"label":"The rise of AI applications with LLM","children":{}},"/playground/ai/building-llm-system/trace-pillar":{"label":"Tracing","children":{}},"/playground/ai/building-llm-system/use-cases-for-llm-applications":{"label":"Use cases for LLM applications","children":{}}}},"/playground/ai/caching-with-rag-system":{"label":"Evaluating caching in RAG systems","children":{}},"/playground/ai/chunking-strategies-to-overcome-context-limitation-in-llm":{"label":"Chunking strategies to overcome context limitation in LLM","children":{}},"/playground/ai/copilots":{"label":"Copilots","children":{"/playground/ai/copilots/projects-operations":{"label":"Project Operations Copilots","children":{}},"/playground/ai/copilots/team-copilots":{"label":"Team Copilots","children":{}}}},"/playground/ai/developing-rapidly-with-generative-ai":{"label":"Developing rapidly with Generative AI","children":{}},"/playground/ai/digest":{"label":"Digest","children":{"/playground/ai/digest/ai-digest-01":{"label":"AI digest #1 Aider reasoning, OpenAI Realtime API, Cline - pre Claude-dev ","children":{}},"/playground/ai/digest/ai-digest-02":{"label":"AI digest #2 New command Aider, OpenHands, Qwen2.5 Coder 32B, Predicted Output","children":{}}}},"/playground/ai/evaluate-chatbot-agent-by-simulated-user":{"label":"Evaluate Chatbot Agent by User Simulation","children":{}},"/playground/ai/foundation-model":{"label":"Foundation Models: The Latest Advancement in AI","children":{}},"/playground/ai/function-calling":{"label":"Function calling in AI agents","children":{}},"/playground/ai/generative-ui":{"label":"What is Generative UI?","children":{}},"/playground/ai/journey-of-thought-prompting":{"label":"Journey of Thought Prompting: Harnessing AI to Craft Better Prompts","children":{}},"/playground/ai/llm-query-caching":{"label":"Query Caching for Large Language Models","children":{}},"/playground/ai/llm-tracing-in-ai-system":{"label":"LLM tracing in AI system","children":{}},"/playground/ai/llms-accuracy-self-refinement":{"label":"LLM's Accuracy - Self Refinement","children":{}},"/playground/ai/model-context-protocol":{"label":"Intro to Model Context Protocol","children":{}},"/playground/ai/proximal-policy-optimization":{"label":"Proximal Policy Optimization","children":{}},"/playground/ai/raptor-llm-retrieval":{"label":"RAPTOR: Tree-based Retrieval for Language Models","children":{}},"/playground/ai/re-ranking-in-rag":{"label":"Re-ranking in RAG","children":{}},"/playground/ai/reinforcement-learning":{"label":"Introduction to Reinforcement Learning and Its Application with LLMs","children":{}},"/playground/ai/rlhf-with-open-assistant":{"label":"RLHF with Open Assistant","children":{}},"/playground/ai/securing-your-remote-mcp-servers":{"label":"Securing your remote MCP servers","children":{}},"/playground/ai/select-vector-database-for-llm":{"label":"Select Vector Database for LLM","children":{}},"/playground/ai/story-map-for-llms":{"label":"Story map for LLMs","children":{}},"/playground/ai/supervisor-ai-agents":{"label":"Building Agent Supervisors to Generate Insights","children":{}},"/playground/ai/text-to-mongodb":{"label":"Natural Language to Database Queries: Text-to-MongoDB","children":{}},"/playground/ai/thumbs-up-and-thumbs-down-pattern":{"label":"Thumbs up and Thumbs down pattern","children":{}},"/playground/ai/tool-level-security-for-remote-mcp-servers":{"label":"Tool-Level Security for Remote MCP Servers","children":{}},"/playground/ai/use-cases":{"label":"Use Cases","children":{"/playground/ai/use-cases/salesforce":{"label":"Salesforce use cases","children":{}},"/playground/ai/use-cases/yelp":{"label":"Yelp use cases","children":{}}}},"/playground/ai/workaround-with-openais-token-limit-with-langchain":{"label":"Workaround with OpenAI's token limit with Langchain","children":{}},"/playground/ai/working-with-langchain-document-loaders":{"label":"Working with langchain document loaders","children":{}}}},"/playground/blockchain":{"label":"Blockchain","children":{"/playground/blockchain/anchor-framework":{"label":"Anchor framework","children":{}},"/playground/blockchain/blockchain-bridge":{"label":"Blockchain Bridge","children":{}},"/playground/blockchain/cross-chain-transfers-implementing-a-token-swap-from-base-chain-to-bitcoin":{"label":"Implement a Token Swap from the Base chain to Bitcoin for cross-chain transactions","children":{}},"/playground/blockchain/foundational-topics":{"label":"Foundational Topics","children":{"/playground/blockchain/foundational-topics/blocks":{"label":"Blocks","children":{}},"/playground/blockchain/foundational-topics/distributed-systems":{"label":"Distributed systems","children":{}},"/playground/blockchain/foundational-topics/pos":{"label":"PoS","children":{}},"/playground/blockchain/foundational-topics/smart-contract":{"label":"Smart Contract","children":{}},"/playground/blockchain/foundational-topics/topics":{"label":"Topics","children":{}},"/playground/blockchain/foundational-topics/zero-knowledge-proofs":{"label":"Zero-knowledge Proofs","children":{}}}},"/playground/blockchain/how-tokens-work-on-solana":{"label":"How Tokens Work on Solana","children":{}},"/playground/blockchain/introduce-to-solana-token-2022-new-standard-to-create-a-token-in-solana":{"label":"Introduce to Solana Token 2022 - new standard to create a token in solana","children":{}},"/playground/blockchain/layer-2":{"label":"Layer 2: Scaling Solutions for Ethereum","children":{}},"/playground/blockchain/liquidity-pool":{"label":"Liquidity pool","children":{}},"/playground/blockchain/metaplex-nft-compression":{"label":"Metaplex NFT Compression","children":{}},"/playground/blockchain/multisign-wallet":{"label":"Multisign wallet","children":{}},"/playground/blockchain/nft-fractionalization":{"label":"NFT Fractionalization","children":{}},"/playground/blockchain/plonky2":{"label":"Plonky2","children":{}},"/playground/blockchain/polygon-zkevm-architecture":{"label":"Polygon zkEVM architecture","children":{}},"/playground/blockchain/solana-account":{"label":"Solana Account","children":{}},"/playground/blockchain/solana-core-concept":{"label":"Solana core concepts","children":{}},"/playground/blockchain/starknet-architecture":{"label":"StarkNet architecture","children":{}},"/playground/blockchain/ton_blockchain_of_blockchains":{"label":"Ton: Blockchain of blockchains","children":{}},"/playground/blockchain/ton_core_concept":{"label":"Ton's base concepts","children":{}},"/playground/blockchain/zk-snarks":{"label":"zk-SNARKs","children":{}}}},"/playground/devbox":{"label":"Devbox","children":{"/playground/devbox/devbox":{"label":"§ Devbox","children":{}},"/playground/devbox/guide":{"label":"Guide","children":{"/playground/devbox/guide/containerless":{"label":"Ditch the Containers: Go Containerless with Devbox","children":{}},"/playground/devbox/guide/devboxjson":{"label":"Devbox.json: Your Project's DNA","children":{}},"/playground/devbox/guide/run-your-own-shell":{"label":"Devbox Shell: Your Dev Environment, Your Rules","children":{}}}},"/playground/devbox/introduction":{"label":"Introduction","children":{"/playground/devbox/introduction/the-reason-for-being":{"label":"The reason for being","children":{}},"/playground/devbox/introduction/why-devbox-but-not-nix":{"label":"Devbox vs Nix: Why We Chose Simplicity","children":{}}}},"/playground/devbox/research":{"label":"Research","children":{"/playground/devbox/research/content-addressable-storage-in-docker":{"label":"Devbox vs Nix: Why We Chose Simplicity","children":{}},"/playground/devbox/research/fixed-output-derivation":{"label":"Fixed-output Derivation in Nix","children":{}},"/playground/devbox/research/nix-is-faster-than-docker-build":{"label":"Nix is Faster Than Docker Build","children":{}},"/playground/devbox/research/pinning-nixpkgs":{"label":"Pinning nixpkgs in Nix","children":{}},"/playground/devbox/research/shadow-copies":{"label":"Shadow Copies in Docker Builds","children":{}},"/playground/devbox/research/unstable-package-installation":{"label":"Unstable Package Installation in Docker","children":{}}}},"/playground/devbox/story":{"label":"Story","children":{"/playground/devbox/story/devbox-a-world-before-docker":{"label":"The world before Docker","children":{}},"/playground/devbox/story/devbox-docker-adoption-and-challenges":{"label":"Our Docker adoption and its challenges","children":{}},"/playground/devbox/story/devbox-local-development-env":{"label":"Using Devbox to setup local development environment","children":{}},"/playground/devbox/story/devbox-nix-and-our-devbox-adoption":{"label":"The overview into Nix & how we use Devbox @ Dwarves","children":{}},"/playground/devbox/story/devbox-production-success-story":{"label":"Devbox in Production: Our Success Story","children":{}}}}}},"/playground/frontend":{"label":"Frontend","children":{"/playground/frontend/a-fragment-colocation-pattern-with-react-apollo-graphql":{"label":"A Fragment Colocation Pattern with React & Apollo GraphQL","children":{}},"/playground/frontend/an-introduction-to-atomic-css":{"label":"An Introduction to Atomic CSS","children":{}},"/playground/frontend/applying-mock-service-worker-msw-for-seamless-web-development":{"label":"Applying Mock Service Worker (MSW) for Seamless Web Development","children":{}},"/playground/frontend/atomic-design-pattern":{"label":"Atomic Design Pattern","children":{}},"/playground/frontend/build-polymorphic-react-components-with-typescript":{"label":"Build polymorphic React components with Typescript","children":{}},"/playground/frontend/continuous-translation":{"label":"Continuous Translation","children":{}},"/playground/frontend/css-container-queries":{"label":"CSS Container Queries","children":{}},"/playground/frontend/css-in-js":{"label":"CSS in JS","children":{}},"/playground/frontend/dark-mode-flickers-a-white-background-for-a-fraction-of-a-second":{"label":"Dark mode flickers a white background for a fraction of a second","children":{}},"/playground/frontend/focus-trap":{"label":"Focus trap","children":{}},"/playground/frontend/from-markup-to-pixels-a-look-inside-the-dom-cssom-and-render-tree":{"label":"From Markup to Pixels - A look inside the DOM, CSSOM, and Render Tree","children":{}},"/playground/frontend/hsl-color":{"label":"HSL Color","children":{}},"/playground/frontend/html-inert":{"label":"HTML inert","children":{}},"/playground/frontend/intro-to-indexeddb":{"label":"Intro to IndexedDB","children":{}},"/playground/frontend/javascript-modules":{"label":"JavaScript modules","children":{}},"/playground/frontend/micro-frontends-microservices-for-frontend-development":{"label":"Micro Frontends Microservices For Frontend Development","children":{}},"/playground/frontend/mitigate-blocking-the-main-thread":{"label":"Mitigate blocking the main thread","children":{}},"/playground/frontend/mixpanel":{"label":"Mixpanel","children":{}},"/playground/frontend/mpa-spa-and-partial-hydration":{"label":"MPA, SPA and Partial Hydration","children":{}},"/playground/frontend/parallelism-in-javascript":{"label":"Parallelism in JavaScript","children":{}},"/playground/frontend/parse-dont-validate-in-typescript":{"label":"Parse, don't validate in TypeScript","children":{}},"/playground/frontend/preserving-and-resetting-state-in-react":{"label":"Preserving and Resetting state in React","children":{}},"/playground/frontend/prevent-layout-thrashing":{"label":"Prevent Layout Thrashing","children":{}},"/playground/frontend/pure-css-parallax":{"label":"Pure CSS Parallax","children":{}},"/playground/frontend/react":{"label":"React","children":{"/playground/frontend/react/code-splitting":{"label":"Code splitting in React","children":{}},"/playground/frontend/react/component-composition-patterns":{"label":"Component composition patterns in React","children":{}},"/playground/frontend/react/design-system-integration":{"label":"Design system integration in react","children":{}},"/playground/frontend/react/hook-architecture":{"label":"Hook architecture in react","children":{}},"/playground/frontend/react/rendering-strategies":{"label":"Rendering strategies in React","children":{}},"/playground/frontend/react/state-management-strategy":{"label":"State management strategy in React","children":{}},"/playground/frontend/react/testing-strategies":{"label":"Testing strategies in React","children":{}}}},"/playground/frontend/react-18":{"label":"React 18","children":{}},"/playground/frontend/react-server-component":{"label":"React Server Components, NextJs Route and Data Fetching","children":{}},"/playground/frontend/remix-versus-nextjs":{"label":"Remix Versus Nextjs","children":{}},"/playground/frontend/remove-unused-css-styles-from-bootstrap-using-purgecss":{"label":"Remove Unused CSS Styles From Bootstrap Using Purgecss","children":{}},"/playground/frontend/render-optimization-in-data-fetching-libraries":{"label":"Render optimization in data-fetching libraries","children":{}},"/playground/frontend/report":{"label":"Report","children":{"/playground/frontend/report/frontend-report-august-2024":{"label":"Frontend Report August 2024","children":{}},"/playground/frontend/report/frontend-report-february-2025":{"label":"Frontend Report February 2025","children":{}},"/playground/frontend/report/frontend-report-first-half-of-november-2024":{"label":"Frontend Report First Half of November 2024","children":{}},"/playground/frontend/report/frontend-report-january-2025":{"label":"Frontend Report January 2025","children":{}},"/playground/frontend/report/frontend-report-july-2024":{"label":"Frontend Report July 2024","children":{}},"/playground/frontend/report/frontend-report-march-2025":{"label":"Frontend Report March 2025","children":{}},"/playground/frontend/report/frontend-report-october-2024":{"label":"Frontend Report October 2024","children":{}},"/playground/frontend/report/frontend-report-second-half-of-november-2024":{"label":"Frontend Report Second Half of November 2024","children":{}},"/playground/frontend/report/frontend-report-september-2024":{"label":"Frontend Report September 2024","children":{}}}},"/playground/frontend/retain-scroll-position-in-infinite-scroll":{"label":"Retain scroll position in infinite scroll","children":{}},"/playground/frontend/scroll-driven-animations":{"label":"Scroll-driven animations","children":{}},"/playground/frontend/shadow-dom":{"label":"Shadow DOM","children":{}},"/playground/frontend/singleton-design-pattern-in-javascript":{"label":"Singleton Design Pattern in Javascript","children":{}},"/playground/frontend/tackling-server-state-complexity-in-frontend-development":{"label":"Tackling Server State complexity in Frontend Development","children":{}},"/playground/frontend/the-fundamental-of-web-performance":{"label":"The fundamental of web performance","children":{}},"/playground/frontend/threejs":{"label":"Threejs","children":{"/playground/frontend/threejs/cameras-in-threejs":{"label":"Cameras in ThreeJS","children":{}}}},"/playground/frontend/url-formats-for-sharing-via-social-networks":{"label":"URL formats for sharing via social networks","children":{}},"/playground/frontend/useeffect-double-calls-in-react-18":{"label":"useEffect double calls in React 18","children":{}},"/playground/frontend/using-correct-html-element-to-increase-website-accessibility":{"label":"Using Correct Html Element To Increase Website Accessibility","children":{}},"/playground/frontend/validation-with-zod":{"label":"Validation with Zod","children":{}},"/playground/frontend/variable-fonts":{"label":"Variable Fonts","children":{}},"/playground/frontend/vitejs-native-modules":{"label":"ViteJS native modules","children":{}},"/playground/frontend/wai-aria":{"label":"WAI-ARIA","children":{}},"/playground/frontend/webassembly":{"label":"Webassembly","children":{}},"/playground/frontend/websockets":{"label":"WebSockets","children":{}},"/playground/frontend/what-is-pnpm-compare-to-npmyarn":{"label":"What is PNPM Compare To NPM/Yarn","children":{}},"/playground/frontend/when-should-we-use-usereducer-instead-of-usestate":{"label":"When should we use useReducer instead of useState?","children":{}},"/playground/frontend/why-dom-manipulation-is-slow":{"label":"Why DOM manipulation is slow?","children":{}},"/playground/frontend/why-micro-frontend":{"label":"Why Micro Frontend","children":{}},"/playground/frontend/why-virtual-dom-is-fast":{"label":"Why Virtual DOM is fast?","children":{}},"/playground/frontend/why-we-chose-our-tech-stack-accelerating-development-with-a-robust-frontend-solution":{"label":"Why We Chose Our Tech Stack Accelerating Development With A Robust Frontend Solution","children":{}},"/playground/frontend/window-and-iframe-communication":{"label":"Window and iframe communication","children":{}},"/playground/frontend/zaplib-post-mortem":{"label":"Zaplib post-mortem","children":{}}}},"/playground/go":{"label":"Go","children":{"/playground/go/approaches-to-manage-concurrent-workloads-like-worker-pools-and-pipelines":{"label":"Approaches To Manage Concurrent Workloads Like Worker Pools And Pipelines","children":{}},"/playground/go/compute-union-2-finite-automata":{"label":"Efficient Union of Finite Automata in Golang: A Practical Approach","children":{}},"/playground/go/connecting-vim-with-golang":{"label":"Connecting Vim With Golang","children":{}},"/playground/go/extension-interface-pattern":{"label":"Go extension interface pattern","children":{}},"/playground/go/go-concurrency":{"label":"Go Concurrency","children":{}},"/playground/go/go-for-enterprise":{"label":"Go For Enterprise","children":{"/playground/go/go-for-enterprise/enterprise-standard-language":{"label":"Go as an Enterprise Standard Language","children":{}},"/playground/go/go-for-enterprise/how-to-use-go-in-enterprise":{"label":"How to use Go in the Enterprise","children":{}},"/playground/go/go-for-enterprise/when-to-use-golang-in-enterprise":{"label":"When to use Go in the Enterprise","children":{}},"/playground/go/go-for-enterprise/who-using-golang-in-enterprise":{"label":"Who is using Go in enterprise?","children":{}},"/playground/go/go-for-enterprise/why-enterprise-chose-java":{"label":"Why Enterprise Chose Java","children":{}},"/playground/go/go-for-enterprise/why-go":{"label":"Why Go?","children":{}}}},"/playground/go/go-generics-type-safety":{"label":"How does Go achieve type safety when it enables generics?","children":{}},"/playground/go/go-import":{"label":"Go import design: using git repo path","children":{}},"/playground/go/go-in-software-engineering":{"label":"Go In Software Engineering","children":{}},"/playground/go/go-package":{"label":"Package first design","children":{}},"/playground/go/message-queues-and-streaming-platforms-eg-kafka-nats-rabbitmq":{"label":"Message Queues And Streaming Platforms Eg Kafka Nats Rabbitmq","children":{}},"/playground/go/profiling-in-go":{"label":"Profiling in Go","children":{}},"/playground/go/slice-and-array-in-golang":{"label":"Slice And Array In Golang","children":{}},"/playground/go/unit-testing-best-practices-in-golang":{"label":"Unit Testing Best Practices In Golang","children":{}},"/playground/go/use-go-selenium-to-crawl-data":{"label":"Use Go Selenium To Crawl Data","children":{}},"/playground/go/weekly":{"label":"Weekly","children":{"/playground/go/weekly/aug-02":{"label":"Go Commentary #5: Features, Memory Optimization, Minecraft Server, Code Editor, and LLM Tool","children":{}},"/playground/go/weekly/aug-09":{"label":"Go Commentary #6: GUI Framework, Leadership Change","children":{}},"/playground/go/weekly/aug-16":{"label":"Go Commentary #7: Releases, Websockets, and Struct Behavior","children":{}},"/playground/go/weekly/aug-23":{"label":"Go Commentary #8: Jupyter Notebooks, Kubernetes Tools, GopherCon Talks","children":{}},"/playground/go/weekly/aug-30":{"label":"Go Commentary #9: TinyGo, SQLite Vector Search, and Authorization","children":{}},"/playground/go/weekly/dec-06":{"label":"Go Commentary #23: Draft Release Notes for Go 1.24 and weak pointers in Go","children":{}},"/playground/go/weekly/dec-13":{"label":"Go Commentary #24: Coming in Go 1.24: testing/synctest experiment for time and concurrency testing","children":{}},"/playground/go/weekly/jul-05":{"label":"Go Weekly #2: Go 1.23 Iterators","children":{}},"/playground/go/weekly/jul-12":{"label":"Go Commentary #3: Generic Collections, Generics Constraints, AI Bot","children":{}},"/playground/go/weekly/jul-26":{"label":"Go Commentary #4: Ethical Hacking, HTTP Requests, Mac App Development","children":{}},"/playground/go/weekly/june-27":{"label":"Go Weekly #1: Mastering Go Performance - eBPF and PGO Optimization Techniques","children":{}},"/playground/go/weekly/nov-01":{"label":"Go Commentary #18: Fuzz Testing Go HTTP Services","children":{}},"/playground/go/weekly/nov-08":{"label":"Go Commentary #19: Writing secure Go code","children":{}},"/playground/go/weekly/nov-15":{"label":"Go Commentary #20: Go Turns 15","children":{}},"/playground/go/weekly/nov-22":{"label":"Go Commentary #21: Go sync.Once is Simple","children":{}},"/playground/go/weekly/nov-29":{"label":"Go Commentary #22: GoMLX: ML in Go without Python","children":{}},"/playground/go/weekly/oct-04":{"label":"Go Commentary #14: Golang compile-time evaluation and Go bindings to SQLite using wazero","children":{}},"/playground/go/weekly/oct-11":{"label":"Go Commentary #15: Using Go embed, and Reflect","children":{}},"/playground/go/weekly/oct-18":{"label":"Go Commentary #16: Understand sync.Map","children":{}},"/playground/go/weekly/oct-25":{"label":"Go Commentary #17: Leveraging benchstat Projects in Go benchmark and Go Plan9 memo on 450% speeding up calculations","children":{}},"/playground/go/weekly/sep-06":{"label":"Go Commentary #10: Script, Telemetry","children":{}},"/playground/go/weekly/sep-13":{"label":"Go Commentary #11: The Gopher's LLM Revolution - Actors, Frameworks, and the Future of Go","children":{}},"/playground/go/weekly/sep-20":{"label":"Go Commentary #12: CLI Renaissance with Kubernetes, REST, and Terminal Readers in the Age of Complexity","children":{}},"/playground/go/weekly/sep-27":{"label":"Go Commentary #13: Compiler Quests and Vector Vexations","children":{}}}}}},"/playground/market-report":{"label":"Market Report","children":{"/playground/market-report/2023-december":{"label":"Market report December 2023","children":{}},"/playground/market-report/2024-april":{"label":"Market report April 2024","children":{}},"/playground/market-report/2024-august":{"label":"Market report August 2024","children":{}},"/playground/market-report/2024-february":{"label":"Market report February 2024","children":{}},"/playground/market-report/2024-january":{"label":"Market report January 2024","children":{}},"/playground/market-report/2024-july":{"label":"Market report July 2024","children":{}},"/playground/market-report/2024-march":{"label":"Market report March 2024","children":{}},"/playground/market-report/2024-may":{"label":"Market report may 2024","children":{}},"/playground/market-report/2024-october":{"label":"Market report October 2024","children":{}},"/playground/market-report/2024-september":{"label":"Market report September 2024","children":{}}}},"/playground/use-cases":{"label":"Use Cases","children":{"/playground/use-cases/ai-interview-platform-mvp":{"label":"Building MVP for AI-driven interview platform","children":{}},"/playground/use-cases/ai-powered-monthly-project-reports":{"label":"Project reports system: a case study","children":{}},"/playground/use-cases/ai-ruby-travel-assistant-chatbot":{"label":"AI-powered Ruby travel assistant","children":{}},"/playground/use-cases/binance-transfer-matching":{"label":"Building better Binance transfer tracking","children":{}},"/playground/use-cases/bitcoin-alt-performance-tracking":{"label":"Tracking Bitcoin-Altcoin Performance Indicators in BTC Hedging Strategy","children":{}},"/playground/use-cases/building-chatbot-agent-for-project-management-tool":{"label":"Building chatbot agent to streamline project management","children":{}},"/playground/use-cases/building-data-pipeline-ogif-transcriber":{"label":"Building data pipeline for OGIF transcriber","children":{}},"/playground/use-cases/centralized-monitoring-setup-for-trading-platform":{"label":"Setup centralized monitoring system for Hedge Foundation trading platform","children":{}},"/playground/use-cases/create-slides-with-overleaf":{"label":"Create slides with Overleaf and ChatGPT","children":{}},"/playground/use-cases/crypto-market-outperform-chart-rendering":{"label":"Visualizing crypto market performance: BTC-Alt dynamic indicators in Golang","children":{}},"/playground/use-cases/data-archive-and-recovery":{"label":"Building a data archive and recovery strategy for high-volume trading system","children":{}},"/playground/use-cases/database-hardening-for-trading-platform":{"label":"Database hardening for a trading platform","children":{}},"/playground/use-cases/enhancing-cryptocurrency-transfer-logger":{"label":"Transfer mapping: enhancing loggers for better transparency","children":{}},"/playground/use-cases/implement-binance-future-pnl-analysis-page":{"label":"Implement Binance Futures PNL analysis page by Phoenix LiveView","children":{}},"/playground/use-cases/migrate-normal-table-to-timescale-table":{"label":"Migrate regular tables into TimescaleDB hypertables to improve query performance","children":{}},"/playground/use-cases/optimize-init-load-time-for-trading-platform":{"label":"Optimizing initial load time for a Trading Platform","children":{}},"/playground/use-cases/optimizing-ui-for-effective-investment-experience":{"label":"Hedge Foundation - Optimizing UI for effective investment experience","children":{}},"/playground/use-cases/persist-history-using-data-snapshot-pattern":{"label":"Implementing data snapshot pattern to persist historical data","children":{}},"/playground/use-cases/reconstructing_trading_pnl_data_pipeline_approach":{"label":"Reconstructing historical trading PnL: a data pipeline approach","children":{}}}}}},"/site-index":{"label":"Dwarves Index","children":{}},"/updates":{"label":"Updates","children":{"/updates/changelog":{"label":"Changelog","children":{"/updates/changelog/2018-in-review":{"label":"2018 In Review","children":{}},"/updates/changelog/2019-in-review":{"label":"2019 In Review","children":{}},"/updates/changelog/2020-in-review":{"label":"2020 In Review","children":{}},"/updates/changelog/2021-dwarves-of-the-year":{"label":"Dwarves Of The Year 2021","children":{}},"/updates/changelog/2021-in-review":{"label":"2021 In Review","children":{}},"/updates/changelog/2021-whats-new-december":{"label":"What's New in December 2021","children":{}},"/updates/changelog/2021-whats-new-july":{"label":"What's New in July 2021","children":{}},"/updates/changelog/2022-dwarves-of-the-year":{"label":"Dwarves Of The Year 2022","children":{}},"/updates/changelog/2022-in-review":{"label":"2022 In Review","children":{}},"/updates/changelog/2022-summit-engineering-a-good-time":{"label":"Summit 2022: Engineering A Good Time","children":{}},"/updates/changelog/2022-whats-new-january":{"label":"What's New in January 2022","children":{}},"/updates/changelog/2022-whats-new-may":{"label":"What's New in May 2022","children":{}},"/updates/changelog/2023-happy":{"label":"Happy 2023","children":{}},"/updates/changelog/2023-whats-new-december":{"label":"What's New in December 2023","children":{}},"/updates/changelog/2023-whats-new-november":{"label":"What's New in November 2023","children":{}},"/updates/changelog/2023-whats-new-october":{"label":"What's New in October 2023","children":{}},"/updates/changelog/2024-community-meet-up":{"label":"Dwarves’ 2nd community offline meet-up","children":{}},"/updates/changelog/2024-in-review":{"label":"2024 In Review","children":{}},"/updates/changelog/2024-navigating-changes":{"label":"Navigating changes","children":{}},"/updates/changelog/2024-semi-annual-review":{"label":"State of Dwarves: 2024 Semi-annual Review","children":{}},"/updates/changelog/2024-summit-building-bonds-our-way":{"label":"Summit 2024: Building bonds our way","children":{}},"/updates/changelog/2024-whats-new-april":{"label":"What's New in April 2024","children":{}},"/updates/changelog/2024-whats-new-august":{"label":"What's New in August 2024","children":{}},"/updates/changelog/2024-whats-new-december":{"label":"What's New in December 2024","children":{}},"/updates/changelog/2024-whats-new-february":{"label":"What's New in February 2024","children":{}},"/updates/changelog/2024-whats-new-january":{"label":"What's New in January 2024","children":{}},"/updates/changelog/2024-whats-new-july":{"label":"What's New in July 2024","children":{}},"/updates/changelog/2024-whats-new-june":{"label":"What's New in June 2024","children":{}},"/updates/changelog/2024-whats-new-march":{"label":"What's New in March 2024","children":{}},"/updates/changelog/2024-whats-new-may":{"label":"What's New in May 2024","children":{}},"/updates/changelog/2024-whats-new-november":{"label":"What's New in November 2024","children":{}},"/updates/changelog/2024-whats-new-oct":{"label":"What's New in October 2024","children":{}},"/updates/changelog/2024-whats-new-september":{"label":"What's New in September 2024","children":{}},"/updates/changelog/2025-whats-new-february":{"label":"What's New in February 2025","children":{}},"/updates/changelog/road-to-100":{"label":"Road To 100","children":{}}}},"/updates/culture-test":{"label":"Culture Test","children":{}},"/updates/digest":{"label":"Digest","children":{"/updates/digest/1-what-do-you-stand-for":{"label":"Weekly Digest #1: What do you stand for?","children":{}},"/updates/digest/10-from-lean-to-learner":{"label":"Weekly Digest #10: From lean to learner","children":{}},"/updates/digest/11-come-grow-with-us":{"label":"Weekly Digest #11: Come grow with us","children":{}},"/updates/digest/12-summer-moments":{"label":"Weekly Digest #12: Summer moments - Our team's remote work adventures","children":{}},"/updates/digest/13-more-than-lines-of-code":{"label":"Weekly Digest #13: More than lines of code","children":{}},"/updates/digest/14-back-to-the-office":{"label":"Weekly Digest #14: Embracing hybrid work - the best of both worlds","children":{}},"/updates/digest/15-new-year-gathering":{"label":"Weekly Digest #15: New year Gathering: Sharing Tết, starting strong","children":{}},"/updates/digest/2-walk-around-learn-around":{"label":"Weekly Digest #2: Walk around learn around","children":{}},"/updates/digest/3-we-all-start-somewhere":{"label":"Weekly Digest #3: We all start somewhere","children":{}},"/updates/digest/4-finding-your-authentic-tribe":{"label":"Weekly Digest #4: Finding your authentic tribe","children":{}},"/updates/digest/5-delay-the-gratification":{"label":"Weekly Digest #5: Endure the hardship, delay the gratification","children":{}},"/updates/digest/6-stay-for-the-culture":{"label":"Weekly Digest #6: Come for the conversation, stay for the culture","children":{}},"/updates/digest/7-a-journey-through-time":{"label":"Weekly Digest #7: A journey through time","children":{}},"/updates/digest/8-then-came-the-last-days-of-may":{"label":"Weekly Digest #8: Then came the last days of May","children":{}},"/updates/digest/9-a-little-more-speed-for-summer":{"label":"Weekly Digest #9: A little more speed for summer","children":{}}}},"/updates/forward-engineering":{"label":"Forward Engineering","children":{"/updates/forward-engineering/2022":{"label":"Forward Engineering 2022","children":{}},"/updates/forward-engineering/2023-august":{"label":"Forward Engineering August 2023","children":{}},"/updates/forward-engineering/2023-december":{"label":"Forward Engineering December 2023","children":{}},"/updates/forward-engineering/2023-june":{"label":"Forward Engineering June 2023","children":{}},"/updates/forward-engineering/2023-march":{"label":"Forward Engineering March 2023","children":{}},"/updates/forward-engineering/2023-may":{"label":"Forward Engineering May 2023","children":{}},"/updates/forward-engineering/2023-november":{"label":"Forward Engineering November 2023","children":{}},"/updates/forward-engineering/2023-october":{"label":"Forward Engineering October 2023","children":{}},"/updates/forward-engineering/2024-2025":{"label":"Forward Engineering 2024 - 2025","children":{}},"/updates/forward-engineering/2024-quarter-3":{"label":"Forward Engineering Quarter 3, 2024","children":{}},"/updates/forward-engineering/tech-radar-the-introduction":{"label":"Dwarves Tech Radar: The Introduction","children":{}},"/updates/forward-engineering/tech-radar-volume-01":{"label":"Dwarves Tech Radar Volume 01","children":{}},"/updates/forward-engineering/tech-radar-volume-02":{"label":"Dwarves Tech Radar Volume 02","children":{}},"/updates/forward-engineering/tech-radar-volume-03":{"label":"Dwarves Tech Radar Volume 03","children":{}}}},"/updates/fund":{"label":"Fund","children":{"/updates/fund/dwarves-ventures-fund-0":{"label":"Dwarves Ventures Fund 0","children":{}},"/updates/fund/dwarves-ventures-fund-1":{"label":"Dwarves Ventures Fund 1","children":{}}}},"/updates/newsletter":{"label":"Newsletter","children":{"/updates/newsletter/2021-in-review":{"label":"It's a wrap: 2021 in Review","children":{}},"/updates/newsletter/blockchain-and-data":{"label":"The future is blockchain and data","children":{}},"/updates/newsletter/dalat-office":{"label":"Da Lat Office","children":{}},"/updates/newsletter/dwarve-updates-ai-llm":{"label":"The Stage of AI and LLM at Dwarves","children":{}},"/updates/newsletter/dwarves-updates":{"label":"Dwarves Updates","children":{}},"/updates/newsletter/engineer-performance-review":{"label":"Engineer Performance Review","children":{}},"/updates/newsletter/engineering-org-structure":{"label":"Engineering Organizational Structure","children":{}},"/updates/newsletter/growth-stages":{"label":"The Stage of Growth at Dwarves","children":{}},"/updates/newsletter/hiring-stages":{"label":"The stages of hiring at Dwarves","children":{}},"/updates/newsletter/knowledge-base":{"label":"Build your knowledge base","children":{}},"/updates/newsletter/path-to-growth":{"label":"The Path To Growth at Dwarves","children":{}},"/updates/newsletter/project-compliance":{"label":"Project Compliance","children":{}},"/updates/newsletter/the-next-leading-chairs":{"label":"The Next Leading Chairs","children":{}}}},"/updates/ogif":{"label":"Ogif","children":{"/updates/ogif/1-20240405":{"label":"OGIF Office Hours #1: Markdown Presentations, Research Content Pipeline, and Professional Screenshots","children":{}},"/updates/ogif/10-20240614":{"label":"OGIF Office Hours #10 -  Behavioral Patterns and Map Content Organization","children":{}},"/updates/ogif/11-20240621":{"label":"OGIF Office Hours #11 - Design patterns: template method & visitor, Radix sort, and weekly tech commentary","children":{}},"/updates/ogif/12-20240628":{"label":"OGIF Office Hours #12 - Community June updates, Project progress, Go Weekly: Mastering Go Performance - eBPF and PGO Optimization Techniques, Multimodal in RAG (Retrieval Augmented Generation)","children":{}},"/updates/ogif/13-20240705":{"label":"OGIF Office Hours #13 - Go Weekly updates, Radix Sort, Human Feedback Mechanism, and effective ChatGPT usage","children":{}},"/updates/ogif/14-20240712":{"label":"OGIF Office Hours #14 - Generic Collections, Pricing Models, and OGIF Summarizer","children":{}},"/updates/ogif/15-20240719":{"label":"OGIF Office Hours #15 - Architecting AI supervisors, Local-first software, AI code completion overview and crawl list bot command","children":{}},"/updates/ogif/16-20240726":{"label":"OGIF Office Hours #16 - Golang weekly #4, TIL in Dune's query, AI voice clone demo and Re-ranking in RAG system.","children":{}},"/updates/ogif/17-20240802":{"label":"OGIF Office Hours #17 - Community Call July, C4 Model, and Interview Life in the US","children":{}},"/updates/ogif/18-20240809":{"label":"OGIF Office Hours #18 - Golang weekly, Devbox MOC, Search retrieval in RAG, Generative UI, FE monthly #1","children":{}},"/updates/ogif/19-20240821":{"label":"OGIF Office Hours #19 - Golang weekly, Designing for forgiveness, File sharing system design, Dify AI demo","children":{}},"/updates/ogif/2-20240412":{"label":"OGIF Office Hours #2: Devbox as the new Docker, Security Standards, and Understanding Liquidity","children":{}},"/updates/ogif/20-20240823":{"label":"OGIF Office Hours #20 - Golang weekly, Modeling dynamic object properties, Devbox demo, LLM tracing, Cursor AI editor","children":{}},"/updates/ogif/21-20240830":{"label":"OGIF Office Hours #21 - Community engagement, Go weekly, Journey of thought for prompt engineering","children":{}},"/updates/ogif/22-20240906":{"label":"OGIF Office Hours #22 - Hybrid working, Tech market report, Go commentary weekly, AI demo for Go weekly content production.","children":{}},"/updates/ogif/23-20240913":{"label":"OGIF Office Hours #23 - Go weekly, Frontend report, Hybrid working support, and AI mixture agent","children":{}},"/updates/ogif/24-20240920":{"label":"OGIF Office Hours #24 - Go weekly, AI-Driven Workflows, Holistic Team AI Demo, and Figma to UI Component with Claude","children":{}},"/updates/ogif/25-20240927":{"label":"OGIF Office Hours #25 - Team & Community updates, Hybrid culture, Product design commentary, AI Tooling Insights, Golang weekly","children":{}},"/updates/ogif/26-20241004":{"label":"OGIF Office Hours #26 - Product Design Commentary, Go Weekly, Trading App Case Study, Chatbot Evaluations, and Announcement for Essay Assignments","children":{}},"/updates/ogif/27-20241011":{"label":"OGIF Office Hours #27 - Go Weekly, Frontend Report Sep, UX Guide to Prompt with AI, Computing the Union of Two Finite Automata","children":{}},"/updates/ogif/28-20241018":{"label":"OGIF Office Hours #28 - Golang sync.Map, Generative AI UX design patterns, Yelp's AI use cases, Design patterns in LLM application, and Dify github analyzer","children":{}},"/updates/ogif/3-20240419":{"label":"OGIF Office Hours #3 - Generative AI, Tokenomics, and Finance Talks","children":{}},"/updates/ogif/4-20240426":{"label":"OGIF Office Hours #4 - DCA, Devbox","children":{}},"/updates/ogif/41-20250314":{"label":"OGIF Office Hours #41 - ICY-BTC Swap, GitHub Bot, MCP-DB, Pocket Turing, Recapable, and Arbitrage Strategy","children":{}},"/updates/ogif/5-20240503":{"label":"OGIF Office Hours #5 - Singapore market report, C4 modelling, How we created Memo's nested sidebar","children":{}},"/updates/ogif/6-20240510":{"label":"OGIF Office Hours #6 - Looking at the Factory pattern, Erlang state machines, and the Trading Process","children":{}},"/updates/ogif/7-20240517":{"label":"OGIF Office Hours #7 - Echelon EXPO, Programming patterns, and Moonlighting","children":{}},"/updates/ogif/9-20240607":{"label":"OGIF Office Hours #9 -  What's next for June and Behavior Design Patterns","children":{}}}}}}}},"/tags":{"label":"Popular Tags","children":{"/tags/operations":{"label":"#operations","children":{},"count":74},"/tags/hiring":{"label":"#hiring","children":{},"count":59},"/tags/team":{"label":"#team","children":{},"count":47},"/tags/career":{"label":"#career","children":{},"count":43},"/tags/lifeatdwarves":{"label":"#lifeatdwarves","children":{},"count":1},"/tags/performance":{"label":"#performance","children":{},"count":36},"/tags/culture":{"label":"#culture","children":{},"count":9},"/tags/emplpoyee":{"label":"#emplpoyee","children":{},"count":1},"/tags/apprenticeship":{"label":"#apprenticeship","children":{},"count":4},"/tags/internship":{"label":"#internship","children":{},"count":4},"/tags/apprentice":{"label":"#apprentice","children":{},"count":1},"/tags/engineering":{"label":"#engineering","children":{},"count":64},"/tags/communications":{"label":"#communications","children":{},"count":3},"/tags/frontend":{"label":"#frontend","children":{},"count":65},"/tags/full-stack":{"label":"#full-stack","children":{},"count":1},"/tags/engineer":{"label":"#engineer","children":{},"count":2},"/tags/design":{"label":"#design","children":{},"count":31},"/tags/life-at-dwarves":{"label":"#life-at-dwarves","children":{},"count":8},"/tags/senior":{"label":"#senior","children":{},"count":1},"/tags/designer":{"label":"#designer","children":{},"count":1},"/tags/hybrid-working":{"label":"#hybrid-working","children":{},"count":3},"/tags/software":{"label":"#software","children":{},"count":10},"/tags/fullstack":{"label":"#fullstack","children":{},"count":2},"/tags/business-development":{"label":"#business-development","children":{},"count":1},"/tags/hospitality":{"label":"#hospitality","children":{},"count":1},"/tags/case-study":{"label":"#case-study","children":{},"count":28},"/tags/iot":{"label":"#iot","children":{},"count":1},"/tags/blockchain":{"label":"#blockchain","children":{},"count":48},"/tags/startup":{"label":"#startup","children":{},"count":9},"/tags/US":{"label":"#US","children":{},"count":4},"/tags/ride-hailing":{"label":"#ride-hailing","children":{},"count":1},"/tags/fintech":{"label":"#fintech","children":{},"count":16},"/tags/marketplace":{"label":"#marketplace","children":{},"count":2},"/tags/ecommerce":{"label":"#ecommerce","children":{},"count":2},"/tags/dropshipping":{"label":"#dropshipping","children":{},"count":1},"/tags/quant":{"label":"#quant","children":{},"count":1},"/tags/swap":{"label":"#swap","children":{},"count":2},"/tags/healthcare":{"label":"#healthcare","children":{},"count":1},"/tags/mobile":{"label":"#mobile","children":{},"count":1},"/tags/enterprise":{"label":"#enterprise","children":{},"count":10},"/tags/Australia":{"label":"#Australia","children":{},"count":1},"/tags/fnb":{"label":"#fnb","children":{},"count":2},"/tags/early-stage":{"label":"#early-stage","children":{},"count":3},"/tags/browser-extension":{"label":"#browser-extension","children":{},"count":2},"/tags/payment":{"label":"#payment","children":{},"count":1},"/tags/real-estate":{"label":"#real-estate","children":{},"count":1},"/tags/travel":{"label":"#travel","children":{},"count":1},"/tags/Vietnam":{"label":"#Vietnam","children":{},"count":1},"/tags/partnership":{"label":"#partnership","children":{},"count":1},"/tags/consulting":{"label":"#consulting","children":{},"count":22},"/tags/market-report":{"label":"#market-report","children":{},"count":34},"/tags/tech-report":{"label":"#tech-report","children":{},"count":15},"/tags/partners":{"label":"#partners","children":{},"count":1},"/tags/wala":{"label":"#wala","children":{},"count":3},"/tags/film":{"label":"#film","children":{},"count":1},"/tags/energy":{"label":"#energy","children":{},"count":1},"/tags/contribution":{"label":"#contribution","children":{},"count":1},"/tags/community":{"label":"#community","children":{},"count":39},"/tags/network":{"label":"#network","children":{},"count":2},"/tags/handbook":{"label":"#handbook","children":{},"count":41},"/tags/employee":{"label":"#employee","children":{},"count":2},"/tags/earn":{"label":"#earn","children":{},"count":1},"/tags/icy":{"label":"#icy","children":{},"count":7},"/tags/token":{"label":"#token","children":{},"count":2},"/tags/showcase":{"label":"#showcase","children":{},"count":1},"/tags/policies":{"label":"#policies","children":{},"count":1},"/tags/onboarding":{"label":"#onboarding","children":{},"count":1},"/tags/guide":{"label":"#guide","children":{},"count":10},"/tags/meeting":{"label":"#meeting","children":{},"count":4},"/tags/email":{"label":"#email","children":{},"count":22},"/tags/learning":{"label":"#learning","children":{},"count":2},"/tags/careers":{"label":"#careers","children":{},"count":2},"/tags/business":{"label":"#business","children":{},"count":10},"/tags/workflow":{"label":"#workflow","children":{},"count":4},"/tags/remote":{"label":"#remote","children":{},"count":12},"/tags/company":{"label":"#company","children":{},"count":1},"/tags/growth":{"label":"#growth","children":{},"count":2},"/tags/purpose":{"label":"#purpose","children":{},"count":2},"/tags/security":{"label":"#security","children":{},"count":9},"/tags/tooling":{"label":"#tooling","children":{},"count":9},"/tags/ventures":{"label":"#ventures","children":{},"count":3},"/tags/work":{"label":"#work","children":{},"count":17},"/tags/guidline":{"label":"#guidline","children":{},"count":1},"/tags/project":{"label":"#project","children":{},"count":16},"/tags/playbook":{"label":"#playbook","children":{},"count":3},"/tags/client":{"label":"#client","children":{},"count":6},"/tags/guideline":{"label":"#guideline","children":{},"count":15},"/tags/pm":{"label":"#pm","children":{},"count":4},"/tags/billbyhours":{"label":"#billbyhours","children":{},"count":1},"/tags/innovation":{"label":"#innovation","children":{},"count":2},"/tags/framework":{"label":"#framework","children":{},"count":6},"/tags/productivity":{"label":"#productivity","children":{},"count":7},"/tags/UX":{"label":"#UX","children":{},"count":2},"/tags/dwarves":{"label":"#dwarves","children":{},"count":21},"/tags/UX-UI":{"label":"#UX-UI","children":{},"count":11},"/tags/system design":{"label":"#system design","children":{},"count":1},"/tags/internal":{"label":"#internal","children":{},"count":10},"/tags/estimation":{"label":"#estimation","children":{},"count":1},"/tags/tips":{"label":"#tips","children":{},"count":10},"/tags/people":{"label":"#people","children":{},"count":25},"/tags/operation":{"label":"#operation","children":{},"count":7},"/tags/management":{"label":"#management","children":{},"count":4},"/tags/process":{"label":"#process","children":{},"count":9},"/tags/mbti":{"label":"#mbti","children":{},"count":6},"/tags/leadership":{"label":"#leadership","children":{},"count":4},"/tags/checklist":{"label":"#checklist","children":{},"count":17},"/tags/delivery":{"label":"#delivery","children":{},"count":2},"/tags/template":{"label":"#template","children":{},"count":20},"/tags/ESTJ":{"label":"#ESTJ","children":{},"count":1},"/tags/INTJ":{"label":"#INTJ","children":{},"count":1},"/tags/ISTJ":{"label":"#ISTJ","children":{},"count":1},"/tags/ISTP":{"label":"#ISTP","children":{},"count":1},"/tags/policy":{"label":"#policy","children":{},"count":1},"/tags/teamwork":{"label":"#teamwork","children":{},"count":2},"/tags/practice":{"label":"#practice","children":{},"count":6},"/tags/idea":{"label":"#idea","children":{},"count":1},"/tags/personalities":{"label":"#personalities","children":{},"count":1},"/tags/okr":{"label":"#okr","children":{},"count":1},"/tags/goal":{"label":"#goal","children":{},"count":2},"/tags/transparency":{"label":"#transparency","children":{},"count":1},"/tags/human-resource":{"label":"#human-resource","children":{},"count":1},"/tags/forward-proxy":{"label":"#forward-proxy","children":{},"count":1},"/tags/agile":{"label":"#agile","children":{},"count":6},"/tags/behavior-driven-development":{"label":"#behavior-driven-development","children":{},"count":1},"/tags/testing":{"label":"#testing","children":{},"count":4},"/tags/ubiquitous-language":{"label":"#ubiquitous-language","children":{},"count":1},"/tags/react":{"label":"#react","children":{},"count":14},"/tags/migrations":{"label":"#migrations","children":{},"count":1},"/tags/uilibraries":{"label":"#uilibraries","children":{},"count":1},"/tags/form":{"label":"#form","children":{},"count":1},"/tags/ux-ui":{"label":"#ux-ui","children":{},"count":2},"/tags/backend":{"label":"#backend","children":{},"count":4},"/tags/golang":{"label":"#golang","children":{},"count":44},"/tags/decoder":{"label":"#decoder","children":{},"count":1},"/tags/json":{"label":"#json","children":{},"count":1},"/tags/data":{"label":"#data","children":{},"count":14},"/tags/materialized-view":{"label":"#materialized-view","children":{},"count":1},"/tags/sql":{"label":"#sql","children":{},"count":3},"/tags/database":{"label":"#database","children":{},"count":8},"/tags/data-warehouse":{"label":"#data-warehouse","children":{},"count":1},"/tags/scrum":{"label":"#scrum","children":{},"count":2},"/tags/technicaldebt":{"label":"#technicaldebt","children":{},"count":1},"/tags/projectmanagement":{"label":"#projectmanagement","children":{},"count":1},"/tags/hooks":{"label":"#hooks","children":{},"count":2},"/tags/components":{"label":"#components","children":{},"count":1},"/tags/multi-column-index":{"label":"#multi-column-index","children":{},"count":1},"/tags/index":{"label":"#index","children":{},"count":1},"/tags/composite-index":{"label":"#composite-index","children":{},"count":1},"/tags/write-heavy":{"label":"#write-heavy","children":{},"count":1},"/tags/inventory-platform":{"label":"#inventory-platform","children":{},"count":1},"/tags/scalability":{"label":"#scalability","children":{},"count":1},"/tags/reliability":{"label":"#reliability","children":{},"count":2},"/tags/doordash":{"label":"#doordash","children":{},"count":1},"/tags/low-latency":{"label":"#low-latency","children":{},"count":1},"/tags/observability":{"label":"#observability","children":{},"count":5},"/tags/automata":{"label":"#automata","children":{},"count":1},"/tags/erlang":{"label":"#erlang","children":{},"count":1},"/tags/elixir":{"label":"#elixir","children":{},"count":5},"/tags/fsm":{"label":"#fsm","children":{},"count":1},"/tags/go":{"label":"#go","children":{},"count":5},"/tags/error":{"label":"#error","children":{},"count":1},"/tags/ai":{"label":"#ai","children":{},"count":38},"/tags/LLM":{"label":"#LLM","children":{},"count":17},"/tags/machine-learning":{"label":"#machine-learning","children":{},"count":2},"/tags/shares":{"label":"#shares","children":{},"count":1},"/tags/founder":{"label":"#founder","children":{},"count":1},"/tags/prompt":{"label":"#prompt","children":{},"count":1},"/tags/chatgpt":{"label":"#chatgpt","children":{},"count":1},"/tags/zettelkasten":{"label":"#zettelkasten","children":{},"count":1},"/tags/rust":{"label":"#rust","children":{},"count":10},"/tags/trait":{"label":"#trait","children":{},"count":1},"/tags/subscription":{"label":"#subscription","children":{},"count":1},"/tags/pricing":{"label":"#pricing","children":{},"count":1},"/tags/product":{"label":"#product","children":{},"count":1},"/tags/AI":{"label":"#AI","children":{},"count":18},"/tags/entertainment":{"label":"#entertainment","children":{},"count":1},"/tags/data-engineering":{"label":"#data-engineering","children":{},"count":4},"/tags/system-design":{"label":"#system-design","children":{},"count":2},"/tags/architecture":{"label":"#architecture","children":{},"count":4},"/tags/etl":{"label":"#etl","children":{},"count":1},"/tags/wasm":{"label":"#wasm","children":{},"count":2},"/tags/devops":{"label":"#devops","children":{},"count":5},"/tags/tool":{"label":"#tool","children":{},"count":3},"/tags/DX":{"label":"#DX","children":{},"count":1},"/tags/radar":{"label":"#radar","children":{},"count":9},"/tags/technique":{"label":"#technique","children":{},"count":9},"/tags/swift":{"label":"#swift","children":{},"count":7},"/tags/tutorial":{"label":"#tutorial","children":{},"count":5},"/tags/design-pattern":{"label":"#design-pattern","children":{},"count":9},"/tags/creational-design-pattern":{"label":"#creational-design-pattern","children":{},"count":1},"/tags/gang-of-four":{"label":"#gang-of-four","children":{},"count":9},"/tags/license":{"label":"#license","children":{},"count":1},"/tags/software-design":{"label":"#software-design","children":{},"count":2},"/tags/software-architecture":{"label":"#software-architecture","children":{},"count":3},"/tags/graphical-notation":{"label":"#graphical-notation","children":{},"count":2},"/tags/web":{"label":"#web","children":{},"count":9},"/tags/behavior-patterns":{"label":"#behavior-patterns","children":{},"count":2},"/tags/updates":{"label":"#updates","children":{},"count":39},"/tags/search-engine":{"label":"#search-engine","children":{},"count":1},"/tags/duckdb":{"label":"#duckdb","children":{},"count":3},"/tags/transformers.js":{"label":"#transformers.js","children":{},"count":1},"/tags/hybrid-search":{"label":"#hybrid-search","children":{},"count":1},"/tags/macos":{"label":"#macos","children":{},"count":3},"/tags/data-modeling":{"label":"#data-modeling","children":{},"count":1},"/tags/research":{"label":"#research","children":{},"count":3},"/tags/dcos":{"label":"#dcos","children":{},"count":5},"/tags/product-design":{"label":"#product-design","children":{},"count":7},"/tags/report":{"label":"#report","children":{},"count":8},"/tags/directory-structure":{"label":"#directory-structure","children":{},"count":2},"/tags/file-management":{"label":"#file-management","children":{},"count":2},"/tags/file-system":{"label":"#file-system","children":{},"count":2},"/tags/permissions":{"label":"#permissions","children":{},"count":1},"/tags/instructions":{"label":"#instructions","children":{},"count":10},"/tags/database-modelling":{"label":"#database-modelling","children":{},"count":1},"/tags/react.js":{"label":"#react.js","children":{},"count":2},"/tags/docker":{"label":"#docker","children":{},"count":11},"/tags/crypto":{"label":"#crypto","children":{},"count":1},"/tags/workshop":{"label":"#workshop","children":{},"count":1},"/tags/discussion":{"label":"#discussion","children":{},"count":6},"/tags/demo":{"label":"#demo","children":{},"count":1},"/tags/event":{"label":"#event","children":{},"count":6},"/tags/labs":{"label":"#labs","children":{},"count":28},"/tags/radio":{"label":"#radio","children":{},"count":3},"/tags/solana":{"label":"#solana","children":{},"count":7},"/tags/amm":{"label":"#amm","children":{},"count":1},"/tags/techecosystem":{"label":"#techecosystem","children":{},"count":1},"/tags/summit":{"label":"#summit","children":{},"count":4},"/tags/data-structure":{"label":"#data-structure","children":{},"count":1},"/tags/bloom-filter":{"label":"#bloom-filter","children":{},"count":1},"/tags/big-o":{"label":"#big-o","children":{},"count":1},"/tags/distributed-system":{"label":"#distributed-system","children":{},"count":1},"/tags/crdt":{"label":"#crdt","children":{},"count":2},"/tags/data-types":{"label":"#data-types","children":{},"count":1},"/tags/data-structures":{"label":"#data-structures","children":{},"count":2},"/tags/sequential-reads":{"label":"#sequential-reads","children":{},"count":1},"/tags/sequential-writes":{"label":"#sequential-writes","children":{},"count":1},"/tags/random-reads":{"label":"#random-reads","children":{},"count":1},"/tags/random-writes":{"label":"#random-writes","children":{},"count":1},"/tags/sargable-queries":{"label":"#sargable-queries","children":{},"count":1},"/tags/zookeeper":{"label":"#zookeeper","children":{},"count":1},"/tags/kafka":{"label":"#kafka","children":{},"count":1},"/tags/engineering/data":{"label":"#engineering/data","children":{},"count":5},"/tags/data-pipeline":{"label":"#data-pipeline","children":{},"count":1},"/tags/mapreduce":{"label":"#mapreduce","children":{},"count":1},"/tags/distributed":{"label":"#distributed","children":{},"count":3},"/tags/hadoop":{"label":"#hadoop","children":{},"count":2},"/tags/vector-database":{"label":"#vector-database","children":{},"count":4},"/tags/brainery":{"label":"#brainery","children":{},"count":2},"/tags/google-cloud":{"label":"#google-cloud","children":{},"count":1},"/tags/Google-Data-Studio":{"label":"#Google-Data-Studio","children":{},"count":1},"/tags/google-data-fusion":{"label":"#google-data-fusion","children":{},"count":1},"/tags/ETL":{"label":"#ETL","children":{},"count":2},"/tags/CDAP":{"label":"#CDAP","children":{},"count":1},"/tags/google-dataproc":{"label":"#google-dataproc","children":{},"count":1},"/tags/streaming":{"label":"#streaming","children":{},"count":1},"/tags/htmx":{"label":"#htmx","children":{},"count":2},"/tags/code-generation":{"label":"#code-generation","children":{},"count":1},"/tags/typesafe":{"label":"#typesafe","children":{},"count":1},"/tags/url-redirect":{"label":"#url-redirect","children":{},"count":1},"/tags/url-rewrite":{"label":"#url-rewrite","children":{},"count":1},"/tags/http":{"label":"#http","children":{},"count":1},"/tags/seo":{"label":"#seo","children":{},"count":1},"/tags/error-handling":{"label":"#error-handling","children":{},"count":1},"/tags/software-development":{"label":"#software-development","children":{},"count":1},"/tags/database-management":{"label":"#database-management","children":{},"count":1},"/tags/machine learning":{"label":"#machine learning","children":{},"count":1},"/tags/llm":{"label":"#llm","children":{},"count":59},"/tags/feedback":{"label":"#feedback","children":{},"count":2},"/tags/mechanism":{"label":"#mechanism","children":{},"count":1},"/tags/modeling":{"label":"#modeling","children":{},"count":2},"/tags/js":{"label":"#js","children":{},"count":2},"/tags/nocode":{"label":"#nocode","children":{},"count":1},"/tags/git":{"label":"#git","children":{},"count":2},"/tags/presentation":{"label":"#presentation","children":{},"count":1},"/tags/history":{"label":"#history","children":{},"count":1},"/tags/content":{"label":"#content","children":{},"count":6},"/tags/performance-review":{"label":"#performance-review","children":{},"count":2},"/tags/assessment":{"label":"#assessment","children":{},"count":1},"/tags/dfg":{"label":"#dfg","children":{},"count":2},"/tags/moc":{"label":"#moc","children":{},"count":3},"/tags/guidelines":{"label":"#guidelines","children":{},"count":3},"/tags/oss":{"label":"#oss","children":{},"count":1},"/tags/OGIF":{"label":"#OGIF","children":{},"count":1},"/tags/rag":{"label":"#rag","children":{},"count":5},"/tags/search":{"label":"#search","children":{},"count":1},"/tags/evaluation":{"label":"#evaluation","children":{},"count":3},"/tags/knowledge":{"label":"#knowledge","children":{},"count":2},"/tags/tech-radar":{"label":"#tech-radar","children":{},"count":1},"/tags/evaluating-tech":{"label":"#evaluating-tech","children":{},"count":1},"/tags/k8s":{"label":"#k8s","children":{},"count":1},"/tags/catchup":{"label":"#catchup","children":{},"count":5},"/tags/tauri":{"label":"#tauri","children":{},"count":1},"/tags/micro-frontend":{"label":"#micro-frontend","children":{},"count":3},"/tags/local-first":{"label":"#local-first","children":{},"count":1},"/tags/data-synchronization":{"label":"#data-synchronization","children":{},"count":1},"/tags/data-ownership":{"label":"#data-ownership","children":{},"count":1},"/tags/real-time-collaboration":{"label":"#real-time-collaboration","children":{},"count":1},"/tags/R&D":{"label":"#R&D","children":{},"count":1},"/tags/memo":{"label":"#memo","children":{},"count":13},"/tags/observer-pattern":{"label":"#observer-pattern","children":{},"count":1},"/tags/ops":{"label":"#ops","children":{},"count":2},"/tags/nft":{"label":"#nft","children":{},"count":2},"/tags/clojure":{"label":"#clojure","children":{},"count":1},"/tags/algorithms":{"label":"#algorithms","children":{},"count":1},"/tags/sorting":{"label":"#sorting","children":{},"count":1},"/tags/reward":{"label":"#reward","children":{},"count":3},"/tags/recording":{"label":"#recording","children":{},"count":1},"/tags/event-sourcing":{"label":"#event-sourcing","children":{},"count":1},"/tags/standardization":{"label":"#standardization","children":{},"count":1},"/tags/work-adoption":{"label":"#work-adoption","children":{},"count":1},"/tags/design-thinking":{"label":"#design-thinking","children":{},"count":2},"/tags/SDLC":{"label":"#SDLC","children":{},"count":1},"/tags/SQL":{"label":"#SQL","children":{},"count":1},"/tags/strategy-design-pattern":{"label":"#strategy-design-pattern","children":{},"count":1},"/tags/behavior-pattern":{"label":"#behavior-pattern","children":{},"count":2},"/tags/field-notes":{"label":"#field-notes","children":{},"count":1},"/tags/bounty":{"label":"#bounty","children":{},"count":3},"/tags/behavioral-pattern":{"label":"#behavioral-pattern","children":{},"count":1},"/tags/investment":{"label":"#investment","children":{},"count":1},"/tags/personal-finance":{"label":"#personal-finance","children":{},"count":1},"/tags/ogif":{"label":"#ogif","children":{},"count":29},"/tags/evm":{"label":"#evm","children":{},"count":4},"/tags/foundry":{"label":"#foundry","children":{},"count":1},"/tags/visitor-design-pattern":{"label":"#visitor-design-pattern","children":{},"count":1},"/tags/writing":{"label":"#writing","children":{},"count":1},"/tags/english":{"label":"#english","children":{},"count":1},"/tags/Frontend":{"label":"#Frontend","children":{},"count":3},"/tags/prompt-engineering":{"label":"#prompt-engineering","children":{},"count":4},"/tags/open-source":{"label":"#open-source","children":{},"count":2},"/tags/ai-powered":{"label":"#ai-powered","children":{},"count":1},"/tags/intent-classification":{"label":"#intent-classification","children":{},"count":1},"/tags/prompting":{"label":"#prompting","children":{},"count":1},"/tags/log":{"label":"#log","children":{},"count":1},"/tags/pillar":{"label":"#pillar","children":{},"count":3},"/tags/metric":{"label":"#metric","children":{},"count":1},"/tags/ai-agents":{"label":"#ai-agents","children":{},"count":2},"/tags/ai-integration":{"label":"#ai-integration","children":{},"count":1},"/tags/tracing":{"label":"#tracing","children":{},"count":1},"/tags/caching":{"label":"#caching","children":{},"count":1},"/tags/project-management":{"label":"#project-management","children":{},"count":1},"/tags/copilots":{"label":"#copilots","children":{},"count":2},"/tags/team-management":{"label":"#team-management","children":{},"count":1},"/tags/aider":{"label":"#aider","children":{},"count":2},"/tags/cline":{"label":"#cline","children":{},"count":1},"/tags/realtime api":{"label":"#realtime api","children":{},"count":1},"/tags/qwen2.5":{"label":"#qwen2.5","children":{},"count":1},"/tags/openhand":{"label":"#openhand","children":{},"count":1},"/tags/predicted output":{"label":"#predicted output","children":{},"count":1},"/tags/ai-evaluation":{"label":"#ai-evaluation","children":{},"count":1},"/tags/foundation-model":{"label":"#foundation-model","children":{},"count":1},"/tags/fine-tuning":{"label":"#fine-tuning","children":{},"count":1},"/tags/function-calling":{"label":"#function-calling","children":{},"count":1},"/tags/generative-ui":{"label":"#generative-ui","children":{},"count":1},"/tags/protocol":{"label":"#protocol","children":{},"count":1},"/tags/mcp":{"label":"#mcp","children":{},"count":3},"/tags/reinforcement-learning":{"label":"#reinforcement-learning","children":{},"count":3},"/tags/document-processing":{"label":"#document-processing","children":{},"count":1},"/tags/information-retrieval":{"label":"#information-retrieval","children":{},"count":1},"/tags/vector database":{"label":"#vector database","children":{},"count":1},"/tags/supervisor-architecture":{"label":"#supervisor-architecture","children":{},"count":1},"/tags/mongodb":{"label":"#mongodb","children":{},"count":1},"/tags/pattern":{"label":"#pattern","children":{},"count":1},"/tags/salesforce":{"label":"#salesforce","children":{},"count":1},"/tags/use cases":{"label":"#use cases","children":{},"count":2},"/tags/yelp":{"label":"#yelp","children":{},"count":1},"/tags/tuning-llm":{"label":"#tuning-llm","children":{},"count":2},"/tags/langchain":{"label":"#langchain","children":{},"count":1},"/tags/anchor":{"label":"#anchor","children":{},"count":2},"/tags/blockchain-bridge":{"label":"#blockchain-bridge","children":{},"count":1},"/tags/web3":{"label":"#web3","children":{},"count":3},"/tags/btc":{"label":"#btc","children":{},"count":1},"/tags/foundational-topics":{"label":"#foundational-topics","children":{},"count":5},"/tags/distributed-systems":{"label":"#distributed-systems","children":{},"count":1},"/tags/PoS":{"label":"#PoS","children":{},"count":1},"/tags/smart-contract":{"label":"#smart-contract","children":{},"count":1},"/tags/zk-proof":{"label":"#zk-proof","children":{},"count":1},"/tags/defi":{"label":"#defi","children":{},"count":2},"/tags/ethereum":{"label":"#ethereum","children":{},"count":2},"/tags/liquidity":{"label":"#liquidity","children":{},"count":1},"/tags/multisign-wallet":{"label":"#multisign-wallet","children":{},"count":1},"/tags/NFT":{"label":"#NFT","children":{},"count":1},"/tags/proof-of-knowledge":{"label":"#proof-of-knowledge","children":{},"count":1},"/tags/zk-rollup":{"label":"#zk-rollup","children":{},"count":2},"/tags/polygon":{"label":"#polygon","children":{},"count":1},"/tags/StarkNet":{"label":"#StarkNet","children":{},"count":1},"/tags/ton":{"label":"#ton","children":{},"count":2},"/tags/zero-knowledge":{"label":"#zero-knowledge","children":{},"count":1},"/tags/devbox":{"label":"#devbox","children":{},"count":17},"/tags/nix":{"label":"#nix","children":{},"count":9},"/tags/containerization":{"label":"#containerization","children":{},"count":4},"/tags/virtualization":{"label":"#virtualization","children":{},"count":4},"/tags/frontend,":{"label":"#frontend,","children":{},"count":1},"/tags/graphql":{"label":"#graphql","children":{},"count":1},"/tags/reactjs":{"label":"#reactjs","children":{},"count":2},"/tags/css":{"label":"#css","children":{},"count":4},"/tags/atomic-css":{"label":"#atomic-css","children":{},"count":1},"/tags/mock-service-worker":{"label":"#mock-service-worker","children":{},"count":1},"/tags/api-mocking":{"label":"#api-mocking","children":{},"count":1},"/tags/web-development-tool":{"label":"#web-development-tool","children":{},"count":1},"/tags/atomic-design":{"label":"#atomic-design","children":{},"count":1},"/tags/polymorphic-component":{"label":"#polymorphic-component","children":{},"count":1},"/tags/typescript":{"label":"#typescript","children":{},"count":4},"/tags/translation":{"label":"#translation","children":{},"count":1},"/tags/CSS":{"label":"#CSS","children":{},"count":1},"/tags/guides":{"label":"#guides","children":{},"count":1},"/tags/responsive-design":{"label":"#responsive-design","children":{},"count":1},"/tags/css-in-js":{"label":"#css-in-js","children":{},"count":1},"/tags/tip":{"label":"#tip","children":{},"count":1},"/tags/dark-mode":{"label":"#dark-mode","children":{},"count":1},"/tags/html":{"label":"#html","children":{},"count":4},"/tags/accessibility":{"label":"#accessibility","children":{},"count":4},"/tags/rendering":{"label":"#rendering","children":{},"count":1},"/tags/dom":{"label":"#dom","children":{},"count":2},"/tags/cssom":{"label":"#cssom","children":{},"count":1},"/tags/render-tree":{"label":"#render-tree","children":{},"count":1},"/tags/hsl":{"label":"#hsl","children":{},"count":1},"/tags/a11y":{"label":"#a11y","children":{},"count":1},"/tags/client-side":{"label":"#client-side","children":{},"count":1},"/tags/storage":{"label":"#storage","children":{},"count":1},"/tags/javascript":{"label":"#javascript","children":{},"count":4},"/tags/modules":{"label":"#modules","children":{},"count":1},"/tags/frontend/performance":{"label":"#frontend/performance","children":{},"count":2},"/tags/analytics-tools":{"label":"#analytics-tools","children":{},"count":1},"/tags/analytics-platform":{"label":"#analytics-platform","children":{},"count":1},"/tags/engineering/frontend":{"label":"#engineering/frontend","children":{},"count":1},"/tags/concurrency":{"label":"#concurrency","children":{},"count":2},"/tags/parallelism":{"label":"#parallelism","children":{},"count":1},"/tags/validation":{"label":"#validation","children":{},"count":1},"/tags/fronten":{"label":"#fronten","children":{},"count":1},"/tags/state-management":{"label":"#state-management","children":{},"count":2},"/tags/web-performance":{"label":"#web-performance","children":{},"count":2},"/tags/animation":{"label":"#animation","children":{},"count":1},"/tags/design-system":{"label":"#design-system","children":{},"count":1},"/tags/storybook":{"label":"#storybook","children":{},"count":1},"/tags/hook":{"label":"#hook","children":{},"count":1},"/tags/React":{"label":"#React","children":{},"count":1},"/tags/nextjs":{"label":"#nextjs","children":{},"count":2},"/tags/server-component":{"label":"#server-component","children":{},"count":1},"/tags/caching-data":{"label":"#caching-data","children":{},"count":1},"/tags/data-fetching":{"label":"#data-fetching","children":{},"count":1},"/tags/swr-infinite":{"label":"#swr-infinite","children":{},"count":1},"/tags/web-design":{"label":"#web-design","children":{},"count":1},"/tags/scroll-driven-animations":{"label":"#scroll-driven-animations","children":{},"count":1},"/tags/animations":{"label":"#animations","children":{},"count":1},"/tags/intersection-observer":{"label":"#intersection-observer","children":{},"count":1},"/tags/shadow-dom":{"label":"#shadow-dom","children":{},"count":1},"/tags/web-api":{"label":"#web-api","children":{},"count":1},"/tags/state-mangement":{"label":"#state-mangement","children":{},"count":1},"/tags/global-state-management":{"label":"#global-state-management","children":{},"count":1},"/tags/threejs":{"label":"#threejs","children":{},"count":1},"/tags/social-networks":{"label":"#social-networks","children":{},"count":1},"/tags/useEffect":{"label":"#useEffect","children":{},"count":1},"/tags/parsing":{"label":"#parsing","children":{},"count":1},"/tags/fonts":{"label":"#fonts","children":{},"count":1},"/tags/variable-fonts":{"label":"#variable-fonts","children":{},"count":1},"/tags/native-modules":{"label":"#native-modules","children":{},"count":1},"/tags/vitejs":{"label":"#vitejs","children":{},"count":1},"/tags/esm":{"label":"#esm","children":{},"count":1},"/tags/wai-aria":{"label":"#wai-aria","children":{},"count":1},"/tags/webassembly":{"label":"#webassembly","children":{},"count":1},"/tags/sandbox":{"label":"#sandbox","children":{},"count":1},"/tags/websocket":{"label":"#websocket","children":{},"count":1},"/tags/protocols":{"label":"#protocols","children":{},"count":1},"/tags/component":{"label":"#component","children":{},"count":1},"/tags/DOM":{"label":"#DOM","children":{},"count":1},"/tags/virtual-dom":{"label":"#virtual-dom","children":{},"count":1},"/tags/iframe":{"label":"#iframe","children":{},"count":1},"/tags/postMessage":{"label":"#postMessage","children":{},"count":1},"/tags/finite-automata":{"label":"#finite-automata","children":{},"count":1},"/tags/pattern-matching":{"label":"#pattern-matching","children":{},"count":1},"/tags/state-machines":{"label":"#state-machines","children":{},"count":1},"/tags/vim":{"label":"#vim","children":{},"count":1},"/tags/interface":{"label":"#interface","children":{},"count":1},"/tags/language":{"label":"#language","children":{},"count":5},"/tags/java":{"label":"#java","children":{},"count":1},"/tags/programming":{"label":"#programming","children":{},"count":1},"/tags/generics":{"label":"#generics","children":{},"count":2},"/tags/import":{"label":"#import","children":{},"count":1},"/tags/package":{"label":"#package","children":{},"count":1},"/tags/profiling":{"label":"#profiling","children":{},"count":1},"/tags/go-weekly":{"label":"#go-weekly","children":{},"count":24},"/tags/networking":{"label":"#networking","children":{},"count":7},"/tags/iterators":{"label":"#iterators","children":{},"count":1},"/tags/kernel-programing":{"label":"#kernel-programing","children":{},"count":1},"/tags/cybersecurity":{"label":"#cybersecurity","children":{},"count":2},"/tags/serverless":{"label":"#serverless","children":{},"count":1},"/tags/agents":{"label":"#agents","children":{},"count":4},"/tags/monitoring":{"label":"#monitoring","children":{},"count":1},"/tags/overleaf":{"label":"#overleaf","children":{},"count":1},"/tags/slide":{"label":"#slide","children":{},"count":1},"/tags/finance":{"label":"#finance","children":{},"count":1},"/tags/real-time":{"label":"#real-time","children":{},"count":1},"/tags/phoenix-live-view":{"label":"#phoenix-live-view","children":{},"count":1},"/tags/timescaledb":{"label":"#timescaledb","children":{},"count":1},"/tags/newsletter":{"label":"#newsletter","children":{},"count":44},"/tags/wrap-up":{"label":"#wrap-up","children":{},"count":7},"/tags/tech radar":{"label":"#tech radar","children":{},"count":1},"/tags/doty":{"label":"#doty","children":{},"count":5},"/tags/wfh":{"label":"#wfh","children":{},"count":1},"/tags/software engineer":{"label":"#software engineer","children":{},"count":1},"/tags/meet-up":{"label":"#meet-up","children":{},"count":4},"/tags/changelog":{"label":"#changelog","children":{},"count":1},"/tags/ICY":{"label":"#ICY","children":{},"count":1},"/tags/test":{"label":"#test","children":{},"count":1},"/tags/weekly-digest":{"label":"#weekly-digest","children":{},"count":15},"/tags/discord":{"label":"#discord","children":{},"count":35},"/tags/motivation":{"label":"#motivation","children":{},"count":1},"/tags/meetup":{"label":"#meetup","children":{},"count":2},"/tags/technology":{"label":"#technology","children":{},"count":5},"/tags/forward-engineering":{"label":"#forward-engineering","children":{},"count":14},"/tags/tech-community":{"label":"#tech-community","children":{},"count":1},"/tags/funding":{"label":"#funding","children":{},"count":2},"/tags/office-hours":{"label":"#office-hours","children":{},"count":28}}}},"slug":["playground","go","weekly"],"childMemos":[{"content":"\n## [Go Features By Version](https://antonz.org/which-go/)\n\n- Context:\n\n  - Go is released every six months.\n  - Each major Go release is supported until there are two newer major releases.\n  - Critical problems are fixed by issuing minor revisions.\n\n- Solution:\n\n  ![](assets/go-features-by-version.png)\n\n## [Make Your Programs Use Less Memory](https://github.com/dkorunic/betteralign)\n\n- Context:\n\n  - Package [fieldalignment](https://pkg.go.dev/golang.org/x/tools/go/analysis/passes/fieldalignment) defines an Analyzer that detects structs that would use less memory if their fields were sorted.\n\n- Solution:\n\n  - betteralign is fork of fieldalignment with:\n    - skips over generated files, either files with known \"generated\" suffix (\\_generated.go, \\_gen.go, .gen.go, .pb.go, .pb.gw.go) or due to package-level comment containing Code generated by... DO NOT EDIT. string,\n    - skips over test files (files with \\_test.go suffix),\n    - skips over structs marked with comment betteralign:ignore,\n    - doesn't lose comments (field comments, doc comments, floating comments or otherwise) but the comment position heuristics is still work in progress,\n    - does very reliable atomic file I/O with strong promise not to corrupt and/or lose contents upon rewrite (not on Windows platform),\n    - has more thorough testing in regards to expected optimised vs golden results,\n    - integrates better with environments with restricted CPU and/or memory resources (Docker containers, K8s containers, LXC, LXD etc).\n\n## [A Go-powered Minecraft 1.21 server](https://github.com/ZeppelinMC/Zeppelin)\n\n- Context:\n\n  - Blazingly fast, highly optimized server implementation written in Go for Minecraft 1.21\n\n## [A Source Code Editor in Pure Go](https://github.com/jmigpin/editor)\n\n- Auto-indentation of wrapped lines.\n- No code coloring (except comments and strings).\n- Many TextArea utilities: undo/redo, replace, comment, ...\n- Handles big files.\n- Start external processes from the toolbar with a click, capturing the output to a row.\n- Drag and drop files/directories to the editor.\n- Detects if files opened are changed outside the editor.\n- Plugin support\n  - examples such as gotodefinition and autocomplete below.\n- Golang specific:\n  - Calls goimports if available when saving a .go file.\n  - Clicking on .go files identifiers will jump to the identifier definition (needs gopls).\n  - Debug utility for go programs (GoDebug cmd).\n    - allows to go back and forth in time to consult code values.\n- Language Server Protocol (LSP) (code analysis):\n  - -lsproto cmd line option\n  - basic support for gotodefinition and completion\n  - mostly being tested with clangd and gopls\n- Inline complete\n  - code completion by hitting the tab key (uses LSP).\n\n![](assets/go-editor-image.png)\n\n## [Ollama 0.3 Quickly Run Large Language Models](https://github.com/ollama/ollama)\n\n![](assets/ollama.png)\n\n---\n\n- https://antonz.org/which-go\n- https://github.com/dkorunic/betteralign\n- https://pkg.go.dev/golang.org/x/tools/go/analysis/passes/fieldalignment\n- https://github.com/ZeppelinMC/Zeppelin\n- https://github.com/jmigpin/editor\n- https://github.com/ollama/ollama\n","title":"Go Commentary #5: Features, Memory Optimization, Minecraft Server, Code Editor, and LLM Tool","short_title":"#5 Go 1.23 features, Memory, Minecraft, and More","description":"Explore Go version features, memory optimization techniques, a Go-powered Minecraft server, a pure Go source code editor, and a tool for running large language models.","tags":["golang","go-weekly","networking"],"pinned":false,"draft":false,"hiring":false,"authors":["fuatto"],"date":"Fri Aug 02 2024 00:00:00 GMT+0000 (Coordinated Universal Time)","filePath":"playground/go/weekly/aug-02.md","slugArray":["playground","go","weekly","aug-02"]},{"content":"\n## [Cogent Core: A New GUI Framework for Go](https://www.cogentcore.org/blog/initial-release)\n\n- GUI framework written in Go that allows you Code Once, Rune Everywhere (Core) (macOS, Windows, Linux, iOS, Android and web)\n\n- The same Cogent Core app running on many devices using the same code:\n\n![](assets/cogent-core-multi-devices.png)\n\n- Simple Hello World app:\n\n```go\npackage main\n\nimport \"cogentcore.org/core/core\"\n\nfunc main() {\n\tb := core.NewBody()\n\tcore.NewButton(b).SetText(\"Hello, World!\")\n\tb.RunMainWindow()\n}\n```\n\n- Supports all usual GUI widgets:\n\n```go\ncore.NewButton(b).SetText(\"Send\").SetIcon(icons.Send).OnClick(func(e events.Event) {\n\tcore.MessageSnackbar(b, \"Message sent\")\n})\ncore.NewText(b).SetText(\"Name:\").SetTooltip(\"Enter your name in the text field\")\ncore.NewTextField(b).SetPlaceholder(\"Jane Doe\")\nvalue := 0.5\nspinner := core.Bind(&value, core.NewSpinner(b))\nslider := core.Bind(&value, core.NewSlider(b))\nspinner.OnChange(func(e events.Event) {\n\tslider.Update()\n})\nslider.OnChange(func(e events.Event) {\n\tspinner.Update()\n})\ncore.NewColorButton(b).SetColor(colors.Orange)\ntype language struct {\n\tName   string\n\tRating int\n}\nsl := []language{{\"Go\", 10}, {\"Python\", 5}}\ncore.NewTable(b).SetSlice(&sl).OnChange(func(e events.Event) {\n\tcore.MessageSnackbar(b, fmt.Sprintf(\"Languages: %v\", sl))\n})\n```\n\n![](assets/cogent-core-widgets.png)\n\n- Interactive plots of data\n\n```go\ntype Data struct {\n\tTime   float32\n\tUsers  float32\n\tProfit float32\n}\nplotcore.NewPlotEditor(b).SetSlice([]Data{\n\t{0, 500, 1520},\n\t{1, 800, 860},\n\t{2, 1600, 930},\n\t{3, 1400, 682},\n})\n```\n\n![](assets/cogent-core-plots.png)\n\n- Key features:\n\n  - A full set of GUI widgets, with built-in support for most elements of [Material 3](https://m3.material.io/) standard\n\n    - tooltips\n    - drag-and-drop\n    - sprites\n    - popup completion\n    - full text editor with code highlighting\n    - ...\n\n  - Extension styling properties makes styling easy\n\n  - Responsive widget elements enables 1 codebase run across platforms\n\n  - Transparent implementation of widgets makes customization easy\n\n  - Dynamic color system\n\n  - ...\n\n- Full software ecosystem\n\n  ![](assets/cogent-core-neural-network.png)\n\n  ![](assets/cogent-core-cogent-code.png)\n\n  ![](assets/cogent-core-cogent-canvas.png)\n\n## [Russ Cox Steps Down as Tech Lead of Go](https://groups.google.com/g/golang-dev/c/0OqBkS2RzWw/m/GzWvX5u6AQAJ?pli=1)\n\n- Russ stepped down as Tech Lead of Go after 12 years, as Austin Clements taking the role.\n\n- Now Russ is fulling working on Oscar - an AI agent system to help maintain OSS (including Gaby)\n\n- Sources:\n  - https://go.googlesource.com/oscar/+/refs/heads/master/README.md\n  - https://go.googlesource.com/oscar/+/refs/heads/master/internal\n\n---\n\n- https://www.cogentcore.org/blog/initial-release\n- https://groups.google.com/g/golang-dev/c/0OqBkS2RzWw/m/GzWvX5u6AQAJ?pli=1\n- https://go.googlesource.com/oscar/+/refs/heads/master/README.md\n- https://go.googlesource.com/oscar/+/refs/heads/master/internal\n","title":"Go Commentary #6: GUI Framework, Leadership Change","short_title":"#6 Cogent Core, Russ Cox stepping down","description":"Introducing Cogent Core, a new GUI framework for Go, and announcing Russ Cox stepping down as Tech Lead of Go after 12 years.","tags":["golang","go-weekly","networking"],"pinned":false,"draft":false,"hiring":false,"authors":["fuatto"],"date":"Fri Aug 09 2024 00:00:00 GMT+0000 (Coordinated Universal Time)","filePath":"playground/go/weekly/aug-09.md","slugArray":["playground","go","weekly","aug-09"]},{"content":"\n## [Go 1.23 Release Note](https://go.dev/doc/go1.23)\n\n- Full notes that you should skim through to get full-fledged of Go 1.23\n\n## [A New Home for nhooyr/websocket](https://coder.com/blog/websocket)\n\n- [nhooyr/websocket](https://github.com/nhooyr/websocket) is adopted by [Coder](https://coder.com/), CDE - Cloud Development Environment\n\n## [Go structs are copied on assignment ](https://jvns.ca/blog/2024/08/06/go-structs-copied-on-assignment/)\n\n- Inspired by [Common Go Mistakes](https://100go.co/)\n\n```go\ntype Thing struct {\n    Name string\n}\n\nfunc main() {\n  thing := Thing{\"record\"}\n  other_thing := thing\n  other_thing.Name = \"banana\"\n  fmt.Println(thing)            // {record}\n}\n```\n\n```go\ntype Thing struct {\n  Name string\n}\n\nfunc findThing(things []Thing, name string) *Thing {\n  for _, thing := range things {\n    if thing.Name == name {\n      return &thing\n    }\n  }\n  return nil\n}\n\nfunc main() {\n  things := []Thing{Thing{\"record\"}, Thing{\"banana\"}}\n  thing := findThing(things, \"record\")\n  thing.Name = \"gramaphone\"\n  fmt.Println(things)           // [{record} {banana}]\n}\n```\n\n=> fix:\n\n```go\nfunc findThing(things []Thing, name string) *Thing {\n  for i := range things {\n    if things[i].Name == name {\n      return &things[i]\n    }\n  }\n  return nil\n}\n```\n\n```go\nfunc main() {\n\tx := []int{1, 2, 3, 4, 5}\n\ty := x[2:3]\n\tfmt.Println(y)\n\ty = append(y, 555)          // y = {3, 555}\n\tfmt.Println(x)              // {1, 2, 3, 555, 5}\n}\n```\n\n=> fix:\n\n```go\nfunc main() {\n\tx := []int{1, 2, 3, 4, 5}\n\ty := x[2:3:3]\n\tfmt.Println(y)\n\ty = append(y, 555)          // y = {3, 555}\n\tfmt.Println(x)              // {1, 2, 3, 4, 5}\n}\n```\n\n---\n\n- https://go.dev/doc/go1.23\n- https://coder.com/blog/websocket\n- https://github.com/coder/websocket\n- https://jvns.ca/blog/2024/08/06/go-structs-copied-on-assignment/\n- https://100go.co/\n","title":"Go Commentary #7: Releases, Websockets, and Struct Behavior","short_title":"#7 Go 1.23, Websockets, and Structs","description":"Exploring Go 1.23 release notes, the new home for nhooyr/websocket, and common mistakes with Go structs and slices.","tags":["golang","go-weekly","networking"],"pinned":false,"draft":false,"hiring":false,"authors":["fuatto"],"date":"Fri Aug 16 2024 00:00:00 GMT+0000 (Coordinated Universal Time)","filePath":"playground/go/weekly/aug-16.md","slugArray":["playground","go","weekly","aug-16"]},{"content":"\n## [GoNB: A Go Notebook Kernel for Jupyter](https://github.com/janpfeifer/gonb)\n\n- Auto-complete and contextual help while coding.\n- Rich content display: HTML, markdown (with latex), images, javascript, svg, videos, etc.\n\n![](assets/go-commentary-aug-23_gonb-auto-complete.webp)\n\n- Widgets (sliders, buttons) support: interact using HTML elements\n- Plotly integration using [go-plotly](https://github.com/go-echarts/go-echarts)\n- Apache ECharts integration using [gonb-echarts](https://github.com/janpfeifer/gonb-echarts) and [go-echarts](https://github.com/go-echarts/go-echarts)\n\n![](assets/go-commentary-aug-23_gonb-chart.webp)\n\n## [kubetrim: Trim Your KUBECONFIG Automatically](https://github.com/alexellis/kubetrim)\n\n```cli\n$ kubectx\n\ndefault\ndo-lon1-openfaas-cluster\nkind-2\nkind-ingress\n\n$ kubetrim\n\nkubetrim (dev) by Alex Ellis\n\nLoaded: /home/alex/.kube/config. Checking..\n  - kind-2: ✅\n  - kind-ingress: ❌ - (failed to connect to cluster: Get \"https://127.0.0.1:40349/api/v1/nodes\": dial tcp 127.0.0.1:40349: connect: connection refused)\n  - default: ✅\n  - do-lon1-openfaas-cluster: ❌ - (failed to connect to cluster: Get \"https://da39a3ee5e6b4b0d3255bfef95601890afd80709.k8s.ondigitalocean.co.uk/api/v1/nodes\": dial tcp: lookup da39a3ee5e6b4b0d3255bfef95601890afd80709.k8s.ondigitalocean.co.uk on 127.0.0.53:53: no such host)\nUpdated: /home/alex/.kube/config (in 364ms).\n\n$ kubectx\n\ndefault\nkind-2\n```\n\n## [12 Talks from GopherCon UK 2024](https://youtube.com/playlist?list=PLDWZ5uzn69ezR6D6FUj_iBSOyRc9xaZFP&si=IdFGYzOivQqFRsVb)\n\n- Key highlights:\n  1. **Performance Testing Tools**: One of the standout presentations was about a home-grown performance testing tool used to replay HTTP access logs against infrastructure setups. This tool was crucial for performance testing at scale, particularly during low-traffic periods, ensuring the system’s responsiveness without disrupting overnight operations.\n  2. **Software Design and Complexity**: A session by Shivam Acharya and Peter Chai delved into the complexities of software design, discussing how complexity should be embraced and managed thoughtfully. They explored how decisions in API design can either simplify or complicate the interaction between different system components.\n  3. **Event-Driven Workflows**: Another notable talk covered the implementation of event-driven workflows, highlighting the challenges and decisions in designing a technology-agnostic library that could work with various technologies like Kafka, Redux, Postgres, and MySQL.\n  4. **AI and the Future of Work**: There was also a provocative discussion on how AI is influencing the future of jobs in tech, encouraging developers to think about how they can stay relevant as automation and AI continue to evolve.\n\n---\n\n- https://github.com/janpfeifer/gonb\n- https://github.com/go-echarts/go-echarts\n- https://github.com/janpfeifer/gonb-echarts\n- https://github.com/go-echarts/go-echarts\n- https://github.com/alexellis/kubetrim\n- https://youtube.com/playlist?list=PLDWZ5uzn69ezR6D6FUj_iBSOyRc9xaZFP&si=IdFGYzOivQqFRsVb\n","title":"Go Commentary #8: Jupyter Notebooks, Kubernetes Tools, GopherCon Talks","short_title":"#8 GoNB, kubetrim, and GopherCon UK 2024","description":"Explore GoNB for Jupyter notebooks, kubetrim for KUBECONFIG management, and key highlights from GopherCon UK 2024 talks, covering performance testing, software design, event-driven workflows, and AI's impact on tech jobs.","tags":["golang","go-weekly","networking"],"pinned":false,"draft":false,"hiring":false,"authors":["fuatto"],"date":"Fri Aug 23 2024 00:00:00 GMT+0000 (Coordinated Universal Time)","filePath":"playground/go/weekly/aug-23.md","slugArray":["playground","go","weekly","aug-23"]},{"content":"\n## [TinyGo 0.33.0: The Go Compiler for 'Small Places'](https://github.com/tinygo-org/tinygo/releases/tag/v0.33.0)\n\n- Context:\n\n  - TinyGo is a Go compiler designed for small environments like microcontrollers, WebAssembly (wasm/wasi), and command-line tools.\n\n  - It utilizes Go language libraries and LLVM to offer an alternative method for compiling Go programs\n\n- Changelog highlights:\n\n  - **Go 1.23 support** (including the new range-over-func language feature)\n  - ...\n\n## [sqlite-vec: A Vector Search Extension for SQLite](https://github.com/asg017/sqlite-vec)\n\n- Context:\n\n  - An extremely small, \"fast enough\" vector search SQLite extension that runs anywhere.\n    - Store and query float, int8, and binary vectors in vec0 virtual tables\n    - Written in pure C, no dependencies, runs anywhere SQLite runs (Linux/MacOS/Windows, in the browser with WASM, Raspberry Pis, etc.)\n    - Pre-filter vectors with rowid IN (...) subquerie\n\n- Usage:\n\n```\ngo get -u github.com/asg017/sqlite-vec-go-bindings/ncruces\n```\n\n```go\npackage main\n\nimport (\n\t_ \"embed\"\n\t\"log\"\n\n\t_ \"github.com/asg017/sqlite-vec-go-bindings/ncruces\"\n\t\"github.com/ncruces/go-sqlite3\"\n)\n\nfunc main() {\n\tdb, err := sqlite3.Open(\":memory:\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tstmt, _, err := db.Prepare(`SELECT vec_version()`)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tstmt.Step()\n\tlog.Printf(\"vec_version=%s\\n\", stmt.ColumnText(0))\n\tstmt.Close()\n}\n```\n\n```sql\n.load ./vec0\n\ncreate virtual table vec_examples using vec0(\n  sample_embedding float[8]\n);\n\n-- vectors can be provided as JSON or in a compact binary format\ninsert into vec_examples(rowid, sample_embedding)\n  values\n    (1, '[-0.200, 0.250, 0.341, -0.211, 0.645, 0.935, -0.316, -0.924]'),\n    (2, '[0.443, -0.501, 0.355, -0.771, 0.707, -0.708, -0.185, 0.362]'),\n    (3, '[0.716, -0.927, 0.134, 0.052, -0.669, 0.793, -0.634, -0.162]'),\n    (4, '[-0.710, 0.330, 0.656, 0.041, -0.990, 0.726, 0.385, -0.958]');\n\n\n-- KNN style query\nselect\n  rowid,\n  distance\nfrom vec_examples\nwhere sample_embedding match '[0.890, 0.544, 0.825, 0.961, 0.358, 0.0196, 0.521, 0.175]'\norder by distance\nlimit 2;\n/*\n┌───────┬──────────────────┐\n│ rowid │     distance     │\n├───────┼──────────────────┤\n│ 2     │ 2.38687372207642 │\n│ 1     │ 2.38978505134583 │\n└───────┴──────────────────┘\n*/\n```\n\n## [Permify 1.0: Open Source Authorization as a Service](https://github.com/Permify/permify)\n\n- Permify is an open-source authorization as a service inspired by [Google Zanzibar](https://storage.googleapis.com/pub-tools-public-publication-data/pdf/41f08f03da59f5518802898f68730e247e23c331.pdf).\n\n- **Centralize & Standardize Your Authorization**: Abstract your authorization logic from your codebase and application logic to easily reason, test, and debug your authorization. Behave your authorization as a sole entity and move faster with in your core development.\n\n- **Build Granular Permissions For Any Case You Have**: You can create granular (resource-specific, hierarchical, context aware, etc) permissions and policies using Permify's domain specific language that is compatible with RBAC, ReBAC and ABAC.\n\n- **Set Authorization For Your Tenants By Default**: Set up isolated authorization logic and custom permissions for your vendors/organizations (tenants) and manage them in a single place.\n\n- **Scale Your Authorization As You Wish**: Achieve lightning-fast response times down to 10ms for access checks with a proven infrastructure inspired by Google Zanzibar.\n\n---\n\n- https://github.com/tinygo-org/tinygo/releases/tag/v0.33.0\n- https://github.com/asg017/sqlite-vec\n- https://github.com/Permify/permify/releases/tag/v1.0.0\n- https://storage.googleapis.com/pub-tools-public-publication-data/pdf/41f08f03da59f5518802898f68730e247e23c331.pdf\n","title":"Go Commentary #9: TinyGo, SQLite Vector Search, and Authorization","short_title":"#9 TinyGo, SQLite vector search, and Permify","description":"Exploring TinyGo's latest release, a new vector search extension for SQLite, and an open-source authorization service inspired by Google Zanzibar.","tags":["golang","go-weekly","networking"],"pinned":false,"draft":false,"hiring":false,"authors":["fuatto"],"date":"Fri Aug 30 2024 00:00:00 GMT+0000 (Coordinated Universal Time)","filePath":"playground/go/weekly/aug-30.md","slugArray":["playground","go","weekly","aug-30"]},{"content":"\n## [Draft Release Notes Go 1.24](https://tip.golang.org/doc/go1.24)\n\n### Go 1.24 is not yet released. These are work-in-progress release notes. Go 1.24 is expected to be released in February 2025.\n\n- Fully supports *generic type aliases*: a type alias may be parameterized like a defined type\n\n```go\ntype (\n\tnodeList = []*Node  // nodeList and []*Node are identical types\n\tPolar    = polar    // Polar and polar denote identical types\n)\n```\n\n  => Specs:\n\n```go\ntype set[P comparable] = map[P]bool\ntype A[P any] = P    // illegal: P is a type parameter\n```\n\n  => the feature can be disabled by setting `GOEXPERIMENT=noaliastypeparams`; but the `aliastypeparams` setting will be removed for Go 1.25.\n\n- Some updates for tools `go tool` or `-tool` flag, new `tests` analyzer for `go vet`\n\n- Some updates for Cgo, Runtime, Compiler, Linker, Bootstrap\n\n- Some updates for stdlibs:\n\n  - The new `os.Root` type provides the ability to perform filesystem operations within a specific directory.\n\n  - The `os.OpenRoot` function opens a directory and returns an `os.Root`. Methods on `os.Root` operate within the directory and do not permit paths that refer to locations outside the directory, including ones that follow symbolic links out of the directory.\n\n    `os.Root.Open` opens a file for reading.\n\n    `os.Root.Create` creates a file.\n\n    `os.Root.OpenFile` is the generalized open call.\n\n    `os.Root.Mkdir` creates a directory.\n\n  - Some updates for `crypto`, `hash` package\n\n  - Some updates for `net/http` including support for HTTP/2 protocol settings in `Transport` and `Server`\n\n  - New implementation for `sync.Map` that will improve overall performance and resolve some long-standing issues\n\n\n## [Weak Pointers in Go: Why They Matter Now](https://victoriametrics.com/blog/go-weak-pointer/)\n\n### Definition:\n\nA type of reference to an object that does not prevent the object from being garbage collected\n\n=> `weak` package:\n\n```go\ntype Pointer[T any] struct {\n\tu unsafe.Pointer\n}\n\n// Make creates a weak pointer from a strong pointer to some value of type T.\nfunc Make[T any](ptr *T) Pointer[T] {\n  //...\n}\n```\n\n- If the memory they’re pointing to gets cleaned up, the weak pointer automatically becomes `nil` — so there’s no risk of accidentally pointing to freed memory => they are safe\n\n```go\ntype T struct {\n  a int\n  b int\n}\n\nfunc main() {\n  a := new(string)\n  println(\"original:\", a)\n\n  // make a weak pointer\n  weakA := weak.Make(a)\n\n  runtime.GC()\n\n  // use weakA\n  strongA := weakA.Strong()\n  println(\"strong:\", strongA, a)\n\n  runtime.GC()\n\n  // use weakA again\n  strongA = weakA.Strong()\n  println(\"strong:\", strongA)\n}\n\n// Output:\n// original: 0x1400010c670\n// strong: 0x1400010c670 0x1400010c670\n// strong: 0x0\n```\n\n- After the first garbage collection `runtime.GC()`, the weak pointer weakA still points to the memory because we’re still using the variable a in the `println(\"strong:\", strongA, a)` line. The memory can’t be cleaned up yet since it’s in use.\n- But when the second garbage collection runs, the strong reference (a) isn’t used anymore. That means the garbage collector can safely clean up the memory, leaving `weakA.Strong()` to return `nil`.\n\n### Use case\n\n- Canonicalization maps, where you only want to keep one copy of a piece of data around \n- Initial purpose is in internal packages, e.g: `unique`\n\n```go\nfunc main() {\n\th1 := unique.Make(\"Hello\")\n\th2 := unique.Make(\"Hello\")\n\tw1 := unique.Make(\"World\")\n\n\tfmt.Println(\"h1:\", h1)\n\tfmt.Println(\"h2:\", h2)\n\tfmt.Println(\"w1:\", w1)\n\tfmt.Println(\"h1 == h2:\", h1 == h2)\n\tfmt.Println(\"h1 == w1:\", h1 == w1)\n}\n\n// Output:\n// h1: {0x14000090270}\n// h2: {0x14000090270}\n// w1: {0x14000090280}\n// h1 == h2: true\n// h1 == w1: false\n```\n\n### How does it work\n\n- Having a in-between tiny object (8bytes)\n\n![](assets/weak-pointer-indirection-reference.webp)\n\n- This setup lets the garbage collector clean up weak pointers to a specific object all at once, efficiently: \n  - the collector only needs to set the pointer in the indirection object to nil (or 0x0). No need to go around updating each weak pointer individually.\n\n![](assets/weak-pointer-gc-reclaim.webp)\n\n---\n\nhttps://tip.golang.org/doc/go1.24\n\nhttps://victoriametrics.com/blog/go-weak-pointer/  ","title":"Go Commentary #23: Draft Release Notes for Go 1.24 and weak pointers in Go","short_title":"#23 Draft Release Notes for Go 1.24 and weak pointers in Go","description":"Draft Release Notes for Go 1.24 and the incoming of weak pointers in Go","tags":["golang","go-weekly"],"pinned":false,"draft":false,"hiring":false,"authors":["fuatto"],"date":"Fri Dec 06 2024 00:00:00 GMT+0000 (Coordinated Universal Time)","filePath":"playground/go/weekly/dec-06.md","slugArray":["playground","go","weekly","dec-06"]},{"content":"\n## [Coming in Go 1.24: testing/synctest experiment for time and concurrency testing](https://danp.net/posts/synctest-experiment/)\n\n### Context\n\n```go\nfunc Test(t *testing.T) {\n    before := time.Now()\n    time.Sleep(time.Second)\n    after := time.Now()\n    if d := after.Sub(before); d != time.Second {\n        t.Fatalf(\"took %v\", d)\n    }\n}\n```\n\n- Traditional hack\n\n```go\nfunc Test(t *testing.T) {\n    before := time.Now()\n    time.Sleep(time.Second)\n    after := time.Now()\n    if d := after.Sub(before); d >= 2*time.Second {\n        t.Fatalf(\"took %v\", d)\n    }\n}\n```\n\n- It's still flaky because it depends on the system clock.\n\n\n\n### Solution\n\n- The `testing/synctest` package is an experiment to provide a more deterministic way to test time and concurrency in Go.\n\n```go\nimport (\n\t\"testing\"\n\t\"testing/synctest\"\n\t\"time\"\n)\n\nfunc Test(t *testing.T) {\n\tsynctest.Run(func() {\n\t\tbefore := time.Now()\n\t\ttime.Sleep(time.Second)\n\t\tafter := time.Now()\n\t\tif d := after.Sub(before); d != time.Second {\n\t\t\tt.Fatalf(\"took %v\", d)\n\t\t}\n\t})\n}\n```\n\n- And then use [gotip](https://pkg.go.dev/golang.org/dl/gotip) with `GOEXPERIMENT=synctest`\n\n### Extending to concurrency\n\n```go\nfunc Test(t *testing.T) {\n\tctx := context.Background()\n\n\tctx, cancel := context.WithCancel(ctx)\n\n\tvar hits atomic.Int32\n\tgo func() {\n\t\ttick := time.NewTicker(time.Millisecond)\n\t\tdefer tick.Stop()\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase <-ctx.Done():\n\t\t\t\treturn\n\t\t\tcase <-tick.C:\n\t\t\t\thits.Add(1)\n\t\t\t}\n\t\t}\n\t}()\n\n\ttime.Sleep(3 * time.Millisecond)\n\tcancel()\n\n\tgot := int(hits.Load())\n\tif want := 3; got != want {\n\t\tt.Fatalf(\"got %v, want %v\", got, want)\n\t}\n}\n```\n\n- It's flaky because of the initial delay of the Ticker\n\n- Wrap the test in `synctest.Run` to make it deterministic\n\n```go\nfunc Test(t *testing.T) {\n\tsynctest.Run(func() {\n\t\tctx := context.Background()\n\n\t\tctx, cancel := context.WithCancel(ctx)\n\n\t\tvar hits atomic.Int32\n\t\tgo func() {\n\t\t\ttick := time.NewTicker(time.Millisecond)\n\t\t\tdefer tick.Stop()\n\t\t\tfor {\n\t\t\t\tselect {\n\t\t\t\tcase <-ctx.Done():\n\t\t\t\t\treturn\n\t\t\t\tcase <-tick.C:\n\t\t\t\t\thits.Add(1)\n\t\t\t\t}\n\t\t\t}\n\t\t}()\n\n\t\ttime.Sleep(4 * time.Millisecond)\n\t\tcancel()\n\n\t\tgot := int(hits.Load())\n\t\tif want := 3; got != want {\n\t\t\tt.Fatalf(\"got %v, want %v\", got, want)\n\t\t}\n\t})\n}\n```\n\n### Conclusion\n\n- It seems that `testing/synctest` will significantly improve testing code that involves time or concurrency. Example in go source: [https://go-review.googlesource.com/c/go/+/630382](https://go-review.googlesource.com/c/go/+/630382)\n\n- You can try it yourself now by using `gotip` and setting `GOEXPERIMENT=synctest`. When Go 1.24 comes out GOEXPERIMENT=synctest will still be required.\n\n- Review the [main proposal](https://github.com/golang/go/issues/67434) and share any experience you have.\n\n---\n\nhttps://danp.net/posts/synctest-experiment/\n\nhttps://go-review.googlesource.com/c/go/+/630382\n\nhttps://github.com/golang/go/issues/67434","title":"Go Commentary #24: Coming in Go 1.24: testing/synctest experiment for time and concurrency testing","short_title":"#24 Go 1.24 testing/synctest experiment for time and concurrency testing","description":"Go 1.24 testing/synctest experiment for time and concurrency testing","tags":["golang","go-weekly"],"pinned":false,"draft":false,"hiring":false,"authors":["fuatto"],"date":"Fri Dec 13 2024 00:00:00 GMT+0000 (Coordinated Universal Time)","filePath":"playground/go/weekly/dec-13.md","slugArray":["playground","go","weekly","dec-13"]},{"content":"\n\n## [Why People are Angry over Go 1.23 Iterators](https://www.gingerbill.org/article/2024/06/17/go-iterator-design/)\n\n- Context:\n    - Most languages provide standardized way to iterate over values stored in [containers](https://en.wikipedia.org/wiki/Container_(abstract_data_type)).\n    \n- Problem:\n\n    - Go has `for` `range` for maps, slices, strings, arrays and channels but no generic mechanism for user-written containers.\n\n    - Short list of some non-generic iterators:\n        - *runtime.CallersFrames*: returns `runtime.Frames` iterates over stack frames; `Frames` has a `Next` method and a bool to check if there are more frames.\n\n        - *bufio.Scanner*: iterates through an `io.Reader`; `Scan` method advances to the next value, `Bytes` method to return the value and `Err` to return error.\n\n        - *database/sql.Rows*: iterates through the results of a query; also has `Scan` method.\n    \n    - Before Generics were introduced, no way to write an interface that described an iterator that would cover all of the use cases...\n\n- Solution:\n\n    - Go 1.22 proposal of adding package `iter` can range over integers and functions:\n\n    ```go\n    type (\n\t    Seq[V any]     func(yield func(V) bool) bool\n\t    Seq2[K, V any] func(yield func(K, V) bool) bool\n    )\n    ```\n    (Seq2 represents a sequence of paired values: key-value, index-value or value-error)\n    \n    - An iterator is a function that passes successive elements of a sequence to a callback function `yield`, it returns true if it should continue, false if it should stop.\n\n    ```go\n    type (\n        Yield[V any] func(V bool)\n        Yield2[K, V any] func(K,V) bool\n    )\n    ```\n\n    - Examples:\n\n    ```go\n    func Backward[E any](s []E) func(func(int, E) bool) {\n        return func(yield func(int, E) bool) {\n            for i := len(s)-1; i >= 0; i-- {\n                if !yield(i, s[i]) {\n                    // Where clean-up code goes\n                    return\n                }\n            }\n        }\n    }\n\n    s := []string{\"a\", \"b\", \"c\"}\n    for _, el in range Backward(s) {\n\t    fmt.Print(el, \" \")\n    }\n    // c b a\n    ```\n\n- Conclusion:\n    - The `for range` is getting complex:\n        - *return true* => *continue*\n        - *return false* => *break*\n    - Feels too functional than an imperative language\n    - Still the purpose is good, let's wait to see the adoption in community after awhile\n\n---\n\n- https://www.gingerbill.org/article/2024/06/17/go-iterator-design/\n- https://github.com/golang/go/issues/61897\n- https://en.wikipedia.org/wiki/Container_(abstract_data_type)\n","title":"Go Weekly #2: Go 1.23 Iterators","short_title":"#2 Go 1.23 Iterators","description":"Exploring the new Go package for iterators - learn what it is, what the controversy is about, and how to use it.","tags":["golang","iterators","go-weekly"],"pinned":false,"draft":false,"hiring":false,"authors":["fuatto"],"date":"Fri Jul 05 2024 00:00:00 GMT+0000 (Coordinated Universal Time)","filePath":"playground/go/weekly/jul-05.md","slugArray":["playground","go","weekly","jul-05"]},{"content":"\n## [Writing generic collection types in Go: the missing documentation](https://www.dolthub.com/blog/2024-07-01-golang-generic-collections/#the-solution)\n\n- Context:\n\n  - Generics were released in Go 1.18 (~2y), is not used very much - only in some good cases for methods in _slices_ and _maps_ packages.\n\n- Problem:\n\n  - Wanted to write a sortable Set (slice or map) of any type but the documents for a generic collection are poor and immature.\n\n  ```go\n  type Sortable[T comparable] interface {\n      Less(member T) bool\n  }\n\n  type Name struct {\n      First string\n      Last string\n  }\n\n  func (n Name) Less(member Name) bool {\n      return n.First < member.First || n.First == member.First && n.Last < member.Last\n  }\n\n  var _ Sortable[Name] = Name{}\n  ```\n\n  ```go\n  type SortableSet[T Sortable] interface { // cannot use generic type Sortable[T comparable] without instantiation\n      Add(member T)\n      Size() int\n      Contains(member T) bool\n      Sorted() []T\n  }\n  ```\n\n  - Can try what built-in slices does in slices.go\n\n  ```go\n  func Index[S ~[]E, E comparable](s S, v E) int {\n      for i := range s {\n          if v == s[i] {\n              return i\n          }\n      }\n      return -1\n  }\n  ```\n\n  ```go\n  type SortableSet[T Sortable[E], E comparable] interface {\n      Add(member T)\n      Size() int\n      Contains(member T) bool\n      Sorted() []T\n  }\n  ```\n\n  - But not work for map:\n\n  ```go\n  type MapSet[T Sortable[E], E comparable] struct {\n      members map[T]struct{} // invalid map key type T (missing comparable constraint)\n  }\n  ```\n\n- Solution:\n\n  ```go\n  // Type set used only for constraints, not vars\n  type SortableConstraint[T comparable] interface {\n      comparable\n      Sortable[T]\n  }\n\n  type SortableSet[T SortableConstraint[T]] interface {\n      Add(member T)\n      Size() int\n      Contains(member T) bool\n      Sorted() []T\n  }\n\n  type SliceSet[T SortableConstraint[T]] struct {\n      members []T\n  }\n\n  type MapSet[T SortableConstraint[T]] struct {\n      members map[T]struct{}\n  }\n  ```\n\n- Conclusion:\n\n  - Current Google rearch results are not really helpful since the immaturity\n\n  - The official Go documentations (proposal/ language spec) are too long\n\n  - This article is very handy as considerably pioneering in real life implementation at [@Dolt](https://github.com/dolthub/dolt)\n\n  - Cheat sheet found in spec by the author:\n\n  ```\n  type argument      type constraint                // constraint satisfaction\n\n  int                interface{ ~int }              // satisfied: int implements interface{ ~int }\n  string             comparable                     // satisfied: string implements comparable (string is strictly comparable)\n  []byte             comparable                     // not satisfied: slices are not comparable\n  any                interface{ comparable; int }   // not satisfied: any does not implement interface{ int }\n  any                comparable                     // satisfied: any is comparable and implements the basic interface any\n  struct{f any}      comparable                     // satisfied: struct{f any} is comparable and implements the basic interface any\n  any                interface{ comparable; m() }   // not satisfied: any does not implement the basic interface interface{ m() }\n  interface{ m() }   interface{ comparable; m() }   // satisfied: interface{ m() } is comparable and implements the basic interface interface{ m() }\n\n  ```\n\n## [Russ Cox is working on a bot](https://github.com/golang/go/discussions/67901)\n\n- Context:\n\n  - As there is [@gopherbot](https://github.com/gopherbot) to try to help automate: labeling, commenting, changing issues' status...\n\n  - Gaby (Go AI Bot) is being built (experiment) for what LLMs can be used effectively (including identifying what they should not be used for).\n\n  - Source is not official nor open, can help snoop around in [this search](https://github.com/golang/go/issues?q=is%3Aissue+is%3Aopen+commenter%3Agabyhelp) and help send feedback.\n\n---\n\n- https://www.dolthub.com/blog/2024-07-01-golang-generic-collections/#the-solution\n- https://go.dev/ref/spec\n- https://github.com/golang/go/discussions/67901\n- https://pkg.go.dev/rsc.io/gaby\n","title":"Go Commentary #3: Generic Collections, Generics Constraints, AI Bot","short_title":"#3 Generic Collections, Generics Constraints, AI Bot","description":"Implementing generic collections in Go: challenges and solutions, with examples of sortable sets and constraints. Updates on Go's generics support and insights on a new AI bot being developed for the Go community. Stay current with Go's evolving ecosystem and best practices for using generics effectively.","tags":["golang","go-weekly","generics"],"pinned":false,"draft":false,"hiring":false,"authors":["fuatto"],"date":"Fri Jul 12 2024 00:00:00 GMT+0000 (Coordinated Universal Time)","filePath":"playground/go/weekly/jul-12.md","slugArray":["playground","go","weekly","jul-12"]},{"content":"\n## [Using Go to send 500 Million HTTP Requests to 2.5 Million Hosts](https://www.moczadlo.com/2024/how-i-sent-500-million-http-requests-in-under-24h)\n\n- Context:\n\n  - (Ethical hacking) To send 500 million of non RFC HTTP/1.1 requests to 2.5 million hosts in approx. a couple of hours.\n\n  - Chose Go because of great concurrency support and fast. (The author did try Rust but too hard to understand)\n\n- Problems:\n\n  - If you use `curl` to send the requests (0.5s per request) 1 by 1 from single machine => 7.9 years.\n\n  - Data transfer perspective (not that much):\n\n    - 500 million requests \\* 1 KB (average request size) ≈ 478 GB\n    - 500 million responses \\* 5 KB (average response size) ≈ 2.33 TB\n\n  - Break down what HTTP client does in each call:\n\n  ```go\n  resp, err := http.Get(\"https://example.com\")\n  ```\n\n        1. Resolve DNS\n        2. TCP connect to another machine\n        3. TLS handshake (generate and exchange cryptographic keys)\n        4. Prepare HTTP request to send (normalize, encode)\n        5. Wait for response and read it\n        6. Parse response (decode, normalize and parse)\n        7. Close connection (optional)\n\n  - Measured results of sending HTTP/1.1 requests to subdomains of `*.wordpress.com` (wordpress.com has [wildcard dns](https://en.wikipedia.org/wiki/Wildcard_DNS_record) to prevent caching) shows that:\n\n  ![](assets/http-request-timings.webp)\n\n  - Resolving DNS and opening new TLS connection is slow (~160ms) but probably not notice how slow it is because the browser will open connect once and reuse it for many requests and HTTP/2 or HTTP/3 would be faster.\n\n  - Can't rely on reusing connections since the need of sending many requests to many different hosts in different networks.\n\n  - Would get rate-limited or banned quickly.\n\n- Solution: Spread the load on many servers\n\n  - Remove what we can from the steps: `Request parsing` and `DNS resolution`. (Simple crafted HTTP/1.1 requests by hand and [massdns](https://github.com/blechschmidt/massdns) to resolve thousands of DNS records in a couple of seconds)\n\n  - Design the HTTP/1.1 sending mechanism:\n\n    - Multiple worker pools that piped together:\n\n      1. Request generation pool\n      2. Sender pool\n      3. Response pool\n\n    ![](assets/cannon-diagram.webp)\n\n    - Use a concurrency-safe [queue](https://github.com/enriquebris/goconcurrentqueue) to seperate the worker pools and to reuse the objects and memory as much as possible.\n\n  - Choose `fasthttp` over `net/http` to get x10 faster according to the [benmark](https://github.com/valyala/fasthttp?tab=readme-ov-file#http-client-comparison-with-nethttp)\n\n  - Optimize the fasthttp's client to get rid of normalization step (fork and edit the lib)\n\n    ```go\n    req := rawfasthttp.AcquireRequest()\n    resp := rawfasthttp.AcquireResponse()\n\n    rawBytes := []byte(\"GET / HTTP/1.1\\r\\nHost: example.com\\r\\n\\r\\n\")\n\n    req.SetRequestRaw(rawBytes)\n\n    err := client.Do(req, resp)\n    ```\n\n  - Override the `Dial` function to use the resolved IP addresses:\n\n    ```go\n    // single instance of custom dialer\n    customDialer = &rawfasthttp.TCPDialer{}\n\n    req := rawfasthttp.AcquireRequest()\n    resp := rawfasthttp.AcquireResponse()\n\n    resolved_ip := \"127.0.0.1\"\n\n    req.SetDial(func(addr string) (net.Conn, error) {\n        return customDialer.Dial(resolved_ip)\n    })\n\n    // ...\n    ```\n\n  - Optimize TLS handshake to prevent wasting CPU cycles by hardcoding the keys but had not enough time to change the fork so skipped.\n\n  - Split 2.5 million hosts into chunks with 200 hosts per chunk (not take more than a couple of minutes to complete but big enough to not waste time on creating new connections). (200 is optimal for the usecase, the worker pods were prone to fail => minimize the lost requests/ retries)\n\n  - Chose DigitalOcean with K8s to scale (cheapest one - 2TB+ of bandwidth per droplet). Also DigitalOcean gives new public IP for each droplet to avoid being banned from Cloudfare.\n\n  - Wrote a auto-scroller to scale the deployment up and down based on the targets in queue (0 to 60 pods in a couple of minutes)\n\n- Conclusion:\n\n  - The final results:\n\n    - Each pod achieved 100-400 requests per second\n    - Scaled to 60 pods\n    - Sent 500 million HTTP/1.1 requests to 2.5 million hosts in just a couple of hours\n\n  - Although there will be a next post for a further detailed result,\n\n## [How I build simple Mac apps using Go](https://dev.to/progrium/how-i-build-simple-mac-apps-using-go-104j)\n\n- Context:\n\n  - There were no bindinds to native Mac APIs for Go => [DarwinKit](https://github.com/progrium/darwinkit)\n\n    - Bindings for [33 frameworks](https://pkg.go.dev/github.com/progrium/darwinkit/macos@main#section-directories) with near complete coverage:\n      - 2,353 classes\n      - 23,822 methods and properties\n      - 9,519 constants/enums\n      - 543 structs\n    - Automatic conversion and use of native Go builtin types in APIs\n    - Support for block arguments as Go functions with properly typed arguments\n    - Pre-made delegate implementations you can simply set Go functions on\n    - 1-to-1 mapping to Objective-C symbols while still idiomatic to Go\n    - Documentation for all symbols including a link to official Apple docs on that symbol\n    - Growing collection of high-quality example starter apps for sponsors\n\n- Future:\n\n  - There are no bindings to Apple framework functions. The team are working on generating native Go function bindings for every framework function. Meanwhile, there is a workaround that involves using CGO (which DarwinKit is trying to help you avoid).\n\n  - On the way of making DarwinKit not use CGO at all! Using [purego](https://github.com/ebitengine/purego), we can call into Apple frameworks without involving CGO. This will improve build time, make smaller binaries, and allow DarwinKit to be used in programs that need to avoid CGO for whatever reason.\n\n  - For iOS and mobile devs, generated bindings are for MacOS for now. Any contribution is welcome.\n\n---\n\n- https://www.moczadlo.com/2024/how-i-sent-500-million-http-requests-in-under-24h\n- https://dev.to/progrium/how-i-build-simple-mac-apps-using-go-104j\n- https://github.com/progrium/darwinkit\n","title":"Go Commentary #4: Ethical Hacking, HTTP Requests, Mac App Development","short_title":"#4 Ethical Hacking, HTTP Requests, Mac App Development","description":"This post explores two cutting-edge applications of Go programming. First, it details an ethical hacking project that successfully sent 500 million HTTP requests to 2.5 million hosts using Go's concurrency features and custom optimizations. The article then introduces DarwinKit, a powerful Go library for creating native Mac applications without Objective-C or Swift. Both examples demonstrate Go's versatility in handling high-performance networking tasks and cross-platform development, showcasing its potential for complex, scalable projects in cybersecurity and application development.","tags":["golang","go-weekly","networking"],"pinned":false,"draft":false,"hiring":false,"authors":["fuatto"],"date":"Fri Jul 26 2024 00:00:00 GMT+0000 (Coordinated Universal Time)","filePath":"playground/go/weekly/jul-26.md","slugArray":["playground","go","weekly","jul-26"]},{"content":"\n## [An Applied Introduction to eBPF with Go](https://sazak.io/articles/an-applied-introduction-to-ebpf-with-go-2024-06-06)\n\n- Context:\n\n  - We usually write software in user space (outside the OS's kernel, e.g: user apps like utilities, programming languages, GUI...).\n\n  ![](assets/user-space-vs-kernel-space-basic-system-calls.png)\n\n- Problem:\n\n  - When profiling the application: if we do it from user space (e.g: [pprof](https://go.dev/blog/pprof)) => result is not reliable because there will be some overhead of each layer on top of the CPU/ memory.\n\n  - 2 initial options:\n    - _Edit the Kernel Source Code_: not really practical since the usecase is trivial amount. (pending for years to be adopted by distros)\n    - _Write a Kernel Model_: this is more practical however, regular maintenance is inevitable as keeping up with the new kernel versions + risking corrupting the Kernel (e.g: if the module has a bug => crash the whole system)\n\n- Solution:\n\n  - **BPF** was originally used in Linux to filter network packets.\n  - **eBPF (Extended Berkeley Packet Filter)** allows to trace syscalls, user space/ library functions, network packets... => system performance, monitoring, security...\n\n  ![](assets/ebpf_overview.webp)\n\n  - _How it works:_\n    - Pre-defined hooks: system calls, function entry/exit, kernel tracepoints, network events...\n    - eBPF programs are event-driven, run at certain hook point then:\n      - Safe checked by Verifier\n      - Then compiled by JIT compiler from bytecode to instructions\n    - Execute the desired code right before actual system calls\n\n  ![](assets/ebpf.png)\n\n- Conclusion:\n  - Powerful tool to dive deep in Kernel therefore many applicable usecase: systems programming, observability, security...\n  - For profiling usecase, can use existing projects: [Parca](https://www.parca.dev/docs/overview/), [Pyroscope](https://pyroscope.io/) or [PGO](https://go.dev/doc/pgo) (from Go 1.20) for convenience.\n\n## [The Profile-Guided Optimization Experience at Grab](https://engineering.grab.com/profile-guided-optimisation)\n\n- Context:\n\n  - PGO (Profile-Guided Optimization) is introduced in Go version 1.20, a.k.a FDO (feedback-directed optimization), a technique collects and feeds the profile data back to the next compilier build.\n  - From the 2nd build/release, expectedly improving 2-14% performance (on-going for future builds)\n\n  ![](assets/high-level-pgo.png)\n\n- Problem:\n\n  - Grab wanted to experiment this to some of their services: use self-managed database [TalariaDB](https://github.com/grab/talaria), orchestrated service and a monorepo one.\n\n- Results:\n\n  - In a service cluster's image that uses TalariaDB, add `-PGO=./talaria.PGO` to the `go build` command: 10% CPU usage reduction, 30% memory usage reduction and 38% volume usage reduction.\n  - On the orchestrated service: the reduction is only around 5% << the effort the enable PGO => not substaintial\n  - Monorepo service is currently not supported since needing a seperated pprof service and a build process supporting PGO arguments to attach/retrieve pprof file\n\n- Conclusion:\n  - Applicable on simple, yet low-effort deployed services\n\n---\n\n- https://sazak.io/articles/an-applied-introduction-to-ebpf-with-go-2024-06-06\n- https://www.redhat.com/en/blog/architecting-containers-part-1-why-understanding-user-space-vs-kernel-space-matters\n- https://ebpf.io/what-is-ebpf/\n- https://www.parca.dev/docs/overview/\n- https://pyroscope.io/\n\n- https://engineering.grab.com/profile-guided-optimisation\n- https://go.dev/doc/pgo\n","title":"Go Weekly #1: Mastering Go Performance - eBPF and PGO Optimization Techniques","short_title":"#1 eBPF and PGO Optimization Techniques","description":"Explore advanced Go optimization techniques using eBPF for kernel-level insights and Profile-Guided Optimization (PGO) for compiler enhancements. Learn how to boost performance and efficiency in Go applications.","tags":["golang","kernel-programing","go-weekly"],"pinned":false,"draft":false,"hiring":false,"authors":["fuatto"],"date":"Thu Jun 27 2024 00:00:00 GMT+0000 (Coordinated Universal Time)","filePath":"playground/go/weekly/june-27.md","slugArray":["playground","go","weekly","june-27"]},{"content":"\n## [Fuzz Testing Go HTTP Services](https://packagemain.tech/p/fuzzing-http-services-golang)\n\nContext:\n\n- You can't envision all of the possible inputs your code could receive => You can only find bugs that you expect to find\n\nSolution:\n\n- Since Go 1.18, fuzzing was added to Go's std testing package\n\n```\nThe steps to create a fuzz test in Go are the following:\n\nIn a _test.go file create a function that starts with Fuzz which accepts *testing.F\n\nAdd corpus seeds using f.Add() to allow fuzzer to generate the data based on it.\n\nCall fuzz target using f.Fuzz() by passing fuzzing arguments which our target function accepts.\n\nStart the fuzzer using regular go test command, but with the –fuzz=Fuzz flag\n```\n\n- Example:\n\n```go\nfunc Equal(a []byte, b []byte) bool {\n  for i := range a {\n    // can panic with runtime error: index out of range.\n    if a[i] != b[i] {\n      return false\n    }\n  }\n\n  return true\n}\n```\n\n```go\n// Fuzz test\nfunc FuzzEqual(f *testing.F) {\n\n  // Seed corpus addition\n  f.Add([]byte{'f', 'u', 'z', 'z'}, []byte{'t', 'e', 's', 't'})\n\n  // Fuzz target with fuzzing arguments\n  f.Fuzz(func(t *testing.T, a []byte, b []byte) {\n    // Call our target function and pass fuzzing arguments\n    Equal(a, b)\n  })\n}\n```\n\n- Fuzzing HTTP Services\n\n```go\ntype Request struct {\n  Limit  int `json:\"limit\"`\n  Offset int `json:\"offset\"`\n}\n\ntype Response struct {\n  Results    []int `json:\"items\"`\n  PagesCount int   `json:\"pagesCount\"`\n}\n```\n\n```go\nfunc ProcessRequest(w http.ResponseWriter, r *http.Request) {\n  var req Request\n\n  // Decode JSON request\n  if err := json.NewDecoder(r.Body).Decode(&req); err != nil {\n    http.Error(w, err.Error(), http.StatusBadRequest)\n    return\n  }\n\n  // Apply offset and limit to some static data\n  all := make([]int, 1000)\n  start := req.Offset\n  end := req.Offset + req.Limit\n  res := Response{\n    Results:    all[start:end],\n    PagesCount: len(all) / req.Limit,\n  }\n\n  // Send JSON response\n  if err := json.NewEncoder(w).Encode(res); err != nil {\n    http.Error(w, err.Error(), http.StatusInternalServerError)\n    return\n  }\n\n  w.WriteHeader(http.StatusOK)\n}\n```\n\n```go\nfunc FuzzProcessRequest(f *testing.F) {\n  // Create sample inputs for the fuzzer\n  testRequests := []Request{\n    {Limit: -10, Offset: -10},\n    {Limit: 0, Offset: 0},\n    {Limit: 100, Offset: 100},\n    {Limit: 200, Offset: 200},\n  }\n\n  // Add to the seed corpus\n  for _, r := range testRequests {\n    if data, err := json.Marshal(r); err == nil {\n      f.Add(data)\n    }\n  }\n\n  // Create a test server\n  srv := httptest.NewServer(http.HandlerFunc(ProcessRequest))\n  defer srv.Close()\n\n  // Fuzz target with a single []byte argument\n  f.Fuzz(func(t *testing.T, data []byte) {\n    var req Request\n    if err := json.Unmarshal(data, &req); err != nil {\n      // Skip invalid JSON requests that may be generated during fuzz\n      t.Skip(\"invalid json\")\n    }\n\n    // Pass data to the server\n    resp, err := http.DefaultClient.Post(srv.URL, \"application/json\", bytes.NewBuffer(data))\n    if err != nil {\n      t.Fatalf(\"unable to call server: %v, data: %s\", err, string(data))\n    }\n\n    defer resp.Body.Close()\n\n    // Skip BadRequest errors\n    if resp.StatusCode == http.StatusBadRequest {\n      t.Skip(\"invalid json\")\n    }\n\n    // Check status code\n    if resp.StatusCode != http.StatusOK {\n      t.Fatalf(\"non-200 status code %d\", resp.StatusCode)\n    }\n  })\n}\n```\n\n```\ngo test --fuzz=Fuzz -fuzztime=30s\n--- FAIL: FuzzProcessRequest (0.02s)\n    --- FAIL: FuzzProcessRequest (0.00s)\n        runtime error: integer divide by zero\n        runtime error: slice bounds out of range\n```\n\nConclusion:\n\n- Can detect hard-to-spot bugs with weird unexpected inputs\n\n\n---\n\nhttps://packagemain.tech/p/fuzzing-http-services-golang\n\n\n","title":"Go Commentary #18: Fuzz Testing Go HTTP Services","short_title":"#18 Fuzz Testing Go HTTP Services","description":"Understanding how to use Fuzz Testing in Go","tags":["golang","go-weekly"],"pinned":false,"draft":false,"hiring":false,"authors":["fuatto"],"date":"Fri Nov 01 2024 00:00:00 GMT+0000 (Coordinated Universal Time)","filePath":"playground/go/weekly/nov-01.md","slugArray":["playground","go","weekly","nov-01"]},{"content":"\n## [Writing secure Go code](https://jarosz.dev/article/writing-secure-go-code/)\n\n**Context**: \n\n  What does it mean to keep security in mind when writing Go code?\n\n**Solution**:\n\n  Answer these questions:\n\n    - How do we stay informed about the Go security announcements?\n    - How do we keep our Go code patched and up to date?\n    - How do we test our Go code focusing on security and robustness?\n    - What are CVEs, and where do we learn about the most common software vulnerabilities?\n\n  How do we stay informed about the Go security announcements?\n\n   - Subscribe to `golang-announce@googlegroups.com` to get all critical security information right from the source.\n\n  How do we keep our Go code patched and up to date?\n\n   - Keeping Go version up to date: even though we don’t use the latest and greatest language features, bumping the Go version gives us all security patches for discovered vulnerabilities. Also, the new Go version ensures compatibility with newer dependencies. It protects our applications from potential integration issues.\n\n   - Check accordingly which security issues and CVEs addressed in what Go releases and update `go.mod`.\n\n   - Check for compatibility and dependency problems.\n\n  How do we test our Go code focusing on security and robustness? \n\n   - Use Go tooling for static code analysers:\n  \n     - Old school `go vet` to detect syntax errors, unused variables, unreachable areas of codebase, goroutine mistakes...\n\n     - `staticcheck`\n\n        ```\n        go install honnef.co/go/tools/cmd/staticcheck@latest\n        ```\n\n        e.g: test on NGIX Agent cloned repo\n\n        ```\n        ➜  agent git:(main) ✗ staticcheck ./...\n        ```\n\n        to detect packages, methods or functions are deprecated:\n\n        ```bash...\n        src/core/metrics/sources/cpu.go:111:9: times.Total is deprecated: Total returns the total number of seconds in a CPUTimesStat Please do not use this internal function. (SA1019)\n        ...\n        test/component/nginx-app-protect/monitoring/monitoring_test.go:15:8: \"github.com/golang/protobuf/jsonpb\" is deprecated: Use the \"google.golang.org/protobuf/encoding/protojson\" package instead. (SA1019)\n        ```\n        \n        to detect unused variables and fields:\n\n        ```bash\n        src/core/metrics/sources/nginx_plus.go:74:2: field endpoints is unused (U1000)\n        src/core/metrics/sources/nginx_plus.go:75:2: field streamEndpoints is unused (U1000)\n        src/core/metrics/sources/nginx_plus_test.go:94:2: var availableZones is unused (U1000)\n        ```\n        \n        to detect code quality problems:\n\n        ```bash\n        src/core/nginx.go:791:4: ineffective break statement. Did you mean to break out of the outer loop? (SA4011)\n        ```\n\n      - `golangci-lint`\n\n        ```\n        go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest\n        ```\n\n        e.g: test on NGIX Agent cloned repo\n\n        ```\n        ➜  agent git:(main) ✗ golangci-lint run ./...\n        ```\n\n        suggestions for improving the code:\n\n        ```\n        src/extensions/nginx-app-protect/monitoring/processor/nap_test.go:60:14: S1025: the argument is already a string, there's no need to use fmt. Sprintf (gosimple)\n        logEntry: fmt.Sprintf(`%s`, func() string {\n        ^\n        ```\n\n        ```\n        src/plugins/common.go:85:5: S1009: should omit nil check; len() for []string is defined as zero (gosimple)\n        if loadedConfig.Extensions != nil && len(loadedConfig.Extensions) > 0 {\n            ^\n        ```\n\n      - Detect race conditions\n\n        ```\n        go test -race\n        ```\n\n   - Scanning source code for vulnerabilities\n\n     - `govulncheck`\n\n        ```\n        go install golang.org/x/vuln/cmd/govulncheck@latest\n        ```\n\n        ```\n          ➜  habit git:(main) ✗ govulncheck\n          No vulnerabilities found.\n        ```\n\n        ```\n        ➜  habit git:(main) ✗ govulncheck -mode binary -show verbose habit\n        ```\n\n        ```\n        Scanning your binary for known vulnerabilities...\n\n        Fetching vulnerabilities from the database...\n\n        Checking the binary against the vulnerabilities...\n\n        === Symbol Results ===\n\n        No vulnerabilities found.\n\n        === Package Results ===\n\n        Vulnerability #1: GO-2023-2186\n            Incorrect detection of reserved device names on Windows in path/filepath\n          More info: https://pkg.go.dev/vuln/GO-2023-2186\n          Standard library\n            Found in: path/filepath@go1.20.5\n            Fixed in: path/filepath@go1.20.11\n\n        === Module Results ===\n\n        Vulnerability #1: GO-2024-3107\n            Stack exhaustion in Parse in go/build/constraint\n          More info: https://pkg.go.dev/vuln/GO-2024-3107\n          Standard library\n            Found in: stdlib@go1.20.5\n            Fixed in: stdlib@go1.22.7\n        ...\n\n        Vulnerability #18: GO-2023-1878\n            Insufficient sanitisation of Host header in net/http\n          More info: https://pkg.go.dev/vuln/GO-2023-1878\n          Standard library\n            Found in: stdlib@go1.20.5\n            Fixed in: stdlib@go1.20.6\n\n        Your code is affected by 0 vulnerabilities.\n        This scan also found 1 vulnerability in packages you import and 18\n        vulnerabilities in modules you require, but your code doesn't appear to call\n        these vulnerabilities.\n        ```\n\n     - `gosec`\n      \n       ```\n       go install github.com/securego/gosec/v2/cmd/gosec@latest\n       ```\n\n       e.g: test on [brutus](https://github.com/CyberRoute/bruter) repo - an open-source experimental [OSINT](https://en.wikipedia.org/wiki/Open-source_intelligence) app for testing web server configuration.\n\n       ```\n       gosec ./...\n       ```\n\n       spotted [CWE-295](https://cwe.mitre.org/data/definitions/295.html) \n\n       ```\n       ...\n\n       [/.../bruter/pkg/fuzzer/randomua.go:69] - G404 (CWE-338): Use of weak random number generator (math/rand or math/rand/v2 instead of crypto/rand) (Confidence: MEDIUM, Severity: HIGH)\n           68:\n         > 69:  randomIndex := rand.Intn(len(userAgents))\n           70:  return userAgents[randomIndex]\n\n       ...\n\n       [/.../bruter/pkg/server/config.go:40] - G402 (CWE-295): TLS InsecureSkipVerify set true. (Confidence: HIGH, Severity: HIGH)\n           39:  customTransport := &http.Transport{\n         > 40:   TLSClientConfig: &tls.Config{InsecureSkipVerify: true},\n           41:  }\n\n       ...\n       ```\n\n   - Fuzzing\n\n     - Extremely helpful in finding potential security flaws like buffer overflows, SQL injections, DoS attacks and XSS attacks\n\n     - Further read on [Fuzzing test HTTP services Golang](./nov-01.md)\n\n---\n\nhttps://jarosz.dev/article/writing-secure-go-code/\n\nhttps://github.com/CyberRoute/bruter\n\nhttps://en.wikipedia.org/wiki/Open-source_intelligence\n\nhttps://cwe.mitre.org/data/definitions/295.html","title":"Go Commentary #19: Writing secure Go code","short_title":"#19 Writing secure Go code","description":"Pratices to write secure Go code","tags":["golang","go-weekly"],"pinned":false,"draft":false,"hiring":false,"authors":["fuatto"],"date":"Fri Nov 08 2024 00:00:00 GMT+0000 (Coordinated Universal Time)","filePath":"playground/go/weekly/nov-08.md","slugArray":["playground","go","weekly","nov-08"]},{"content":"\n## [Go Turns 15](https://go.dev/blog/15years)\n\n- So much has changed since [Go's 10 year anniversery](https://go.dev/blog/10years)\n\n  - Go’s user base x3 in the past five years, making it one of the fastest growing languages. \n  - From its beginnings just fifteen years ago, Go has become a top 10 language and the language of the modern cloud.\n\n- It's a year of for loop:\n\n  - [Go 1.22 in February](https://go.dev/blog/go1.22)\n\n    - Fixed the accidental sharing of loop variables between iterations:\n\n    ```go\n    func main() {\n      done := make(chan bool)\n\n      values := []string{\"a\", \"b\", \"c\"}\n      for _, v := range values {\n          go func() {\n              fmt.Println(v)\n              done <- true\n          }()\n      }\n\n      // wait for all goroutines to complete before exiting\n      for _ = range values {\n          <-done\n      }\n    }\n    ```\n\n    - Support for ranging over integer\n\n    ```go\n    package main\n\n    import \"fmt\"\n\n    func main() {\n        for i := range 10 {\n            fmt.Println(10 - i)\n        }\n        fmt.Println(\"go1.22 has lift-off!\")\n    }\n    ```\n\n    - Improved performance\n\n      - Memory optimization in the Go runtime improves CPU performance by 1-3%, while also reducing the memory overhead of most Go programs by around 1%.\n\n      - In Go 1.21, we shipped profile-guided optimization (PGO) for the Go compiler and this functionality continues to improve. One of the optimizations added in 1.22 is improved devirtualization, allowing static dispatch of more interface method calls. Most programs will see improvements between 2-14% with PGO enabled.\n\n    - Standard library additions\n\n      - A new **math/rand/v2** package provides a cleaner, more consistent API and uses higher-quality, faster pseudo-random generation algorithms. See the proposal for additional details.\n\n      - The patterns used by **net/http.ServeMux** now accept methods and wildcards.\n\n        For example, the router accepts a pattern like *GET /task/{id}/*, which matches only GET requests and captures the value of the {id} segment in a map that can be accessed through Request values.\n\n      - A new *Null[T]* type in **database/sql** provides a way to scan nullable columns.\n\n      - A Concat function was added in package **slices**, to concatenate multiple slices of any type.\n\n  - [Go 1.23 in August](https://go.dev/blog/go1.23)\n\n    - Range expressions in a *“for-range”* loop may now be iterator functions, such as ```func(func(K) bool)```. This supports user-defined iterators over arbitrary sequences. There are several additions to the standard slices and maps packages that work with iterators, as well as a new iter package. As an example, if you wish to collect the keys of a map m into a slice and then sort its values, you can do that in Go 1.23 with slices.Sorted(maps.Keys(m)).\n\n    - Preview support for generic type aliases.\n\n    - Tool improvements\n      \n      - Starting with Go 1.23, it’s possible for the Go toolchain to collect usage and breakage statistics to help understand how the Go toolchain is used, and how well it is working. This is *Go telemetry*, an opt-in system. Please consider opting in to help us keep Go working well and better understand Go usage. \n\n      - The go command has new conveniences. For example, running ```go env -changed``` makes it easier to see only those settings whose effective value differs from the default value, and ```go mod tidy -diff``` helps determine the necessary changes to the *go.mod* and *go.sum* files without modifying them. Read more on the Go command in the release notes.\n      \n      - The ```go vet``` subcommand now reports symbols that are too new for the intended Go version. \n\n- For next 15 years:\n\n  - Evolving Go to better leverage the capabilities of current and future hardware\n\n  - Go 1.24 will have a totally new map implementation under the hood that’s more efficient on modern CPUs. \n  \n  - Prototyping new garbage collection algorithms designed around the capabilities and constraints of modern hardware. \n\n  - Some improvements will be in the form of new APIs and tools so Go developers can better leverage modern hardware.\n\n  - Working on making Go better for AI—and AI better for Go (LangChainGo & Genkit)\n  \n\n\n---\n\nhttps://go.dev/blog/15years\n\nhttps://go.dev/blog/10years\n\nhttps://go.dev/blog/go1.22\n\nhttps://go.dev/blog/go1.23","title":"Go Commentary #20: Go Turns 15","short_title":"#20 Go Turns 15","description":"The 15th anniversary of the Go open source release","tags":["golang","go-weekly"],"pinned":false,"draft":false,"hiring":false,"authors":["fuatto"],"date":"Fri Nov 15 2024 00:00:00 GMT+0000 (Coordinated Universal Time)","filePath":"playground/go/weekly/nov-15.md","slugArray":["playground","go","weekly","nov-15"]},{"content":"\n## [Go sync.Once is simple... Is it really?](https://victoriametrics.com/blog/go-sync-once/)\n\n### What is sync.Once?\n\n- \"Once is an object that will perform exactly one action\"\n\n```go\nvar once sync.Once\nvar conf Config\n\nfunc GetConfig() Config {\n    once.Do(func() {\n        conf = fetchConfig()\n    })\n    return conf\n}\n```\n\n- If `GetConfig()` is called multiple times, `fetchConfig()` is executed only once.\n\n```go\ntype Singleton struct {\n    // fields\n}\n\nvar (\n    instance *Singleton\n    once     sync.Once\n)\n\nfunc GetSingleton() *Singleton {\n    once.Do(func() {\n        instance = &Singleton{}\n    })\n    return instance\n}\n```\n\n- The benefit: it delays certain operations until they are first needed (lazy-loading), which can improve runtime performance and reduce initial memory usage.\n\n```go\nvar once sync.Once\n\nfunc main() {\n    once.Do(func() {\n        fmt.Println(\"This will be printed once\")\n    })\n\n    once.Do(func() {\n        fmt.Println(\"This will not be printed\")\n    })\n}\n\n// Output:\n// This will be printed once\n```\n\n- No built-in way to reset a sync.Once, so if the function passed to Once.Do panics while running, the future calls to `Do(f)` won't run f again and will be tricky to catch the panic and handle the error afterward\n\n```go\nvar once sync.Once\nvar config Config\n\nfunc GetConfig() (Config, error) {\n    var err error\n    once.Do(func() {\n        config, err = fetchConfig()\n    })\n    return config, err\n}\n```\n\n- From Go 1.21, we get: `OnceFunc`, `OnceValue` and `OnceValues`\n\n```go\n// If f panics, the returned function will panic with the same value on every call. (cached)\nfunc OnceFunc(f func()) func() { \n  ...\n}\n\n// returns the value returned by f\nfunc OnceValue[T any](f func() T) func() T {\n  ...\n}\n\n// returns the values returned by f\nfunc OnceValues[T1, T2 any](f func() (T1, T2)) func() (T1, T2) {\n  ...\n}\n```\n\n- Example use:\n\n```go\nvar config Config\n\nvar getConfigOnce = sync.OnceValues(fetchConfig)\n\nfunc main() {\n  var err error\n\n  config, err = getConfigOnce()\n  if err != nil {\n    log.Fatalf(\"Failed to fetch config: %v\", err)\n  }\n  ...\n}\n```\n\n### How it works?\n\n- The implementation of Once\n\n```go\ntype Once struct {\n\tdone atomic.Uint32\n\tm    Mutex\n}\n```\n\n- Simply use mutex to lock and allows only 1 goroutine to enter; then if `done` is still 0 (function f hasn't run yet) set done to 1 and runs f()\n\n=> Original version of sync.Once, written by Rob Pike in 2010\n```go\nfunc (o *Once) Do(f func()) {\n\to.m.Lock()\n\tdefer o.m.Unlock()\n\n\tif o.done.Load() == 0 {\n\t\to.done.Store(1)\n\t\tf()\n\t}\n}\n```\n\n- Not performant since it always locks first (goroutines wait on each other) whenever Do(f) is called.\n\n=> check the flag done first before the lock\n\n```go\nfunc (o *Once) Do(f func()) {\n  if atomic.LoadUint32(&o.done) == 1 {\n    return\n  }\n\n  // slow path\n  o.m.Lock()\n  defer o.m.Unlock()\n\n  if o.done.Load() == 0 {\n    o.done.Store(1)\n    f()\n  }\n}\n```\n\n- This introduces the race condition\n\n![](assets/go-sync-once-done-mistake.webp)\n\n=> add defer to when setting flag\n\n```go\nfunc (o *Once) Do(f func()) {\n  if o.done.Load() == 1 {\n    return\n  }\n\n  // slow path\n  o.m.Lock()\n  defer o.m.Unlock()\n\n  if o.done.Load() == 0 {\n    defer o.done.Store(1)\n    f()\n  }\n}\n```\n\n- Since Go compiler supports inlining (taking the function's code and paste it directly to where the function is called) optimization\n\n```go\nfunc (o *Once) Do(f func()) {\n\tif o.done.Load() == 0 {\n\t\to.doSlow(f)\n\t}\n}\n\nfunc (o *Once) doSlow(f func()) {\n\to.m.Lock()\n\tdefer o.m.Unlock()\n\n\tif o.done.Load() == 0 {\n\t\tdefer o.done.Store(1)\n\t\tf()\n\t}\n}\n```\n\n---\n\nhttps://victoriametrics.com/blog/go-sync-once/\n\nhttps://go.dev/ref/mem","title":"Go Commentary #21: Go sync.Once is Simple","short_title":"#21 Go sync.Once is Simple","description":"Understanding Go's sync.Once - A Deep Dive into Single-Execution Guarantees and Atomic Operations","tags":["golang","go-weekly"],"pinned":false,"draft":false,"hiring":false,"authors":["fuatto"],"date":"Fri Nov 22 2024 00:00:00 GMT+0000 (Coordinated Universal Time)","filePath":"playground/go/weekly/nov-22.md","slugArray":["playground","go","weekly","nov-22"]},{"content":"\n## [GoMLX: ML in Go without Python](https://eli.thegreenplace.net/2024/gomlx-ml-in-go-without-python)\n\n### How ML models are implemented\n\n- Written in Python, using frameworks like TensorFlow, JAX or Pytorch that take care of:\n\n  - Expressive way to describe the model architecture, including auto-differentiation for training.\n  - Efficient implementation of computational primitives on common HW: CPUs, GPUs and TPUs.\n\n![](assets/openxla-diagram-with-gopher.png)\n\n- The frameworks that provide high-level primitives to define and translate ML models to a common interchange format called StableHLO (High-Level Operations).\n\n- The OpenXLA system, which includes two major components: the XLA compiler translating HLO to HW machine code, and PJRT - the runtime component responsible for managing HW devices, moving data (tensors) between the host CPU and these devices, executing tasks, sharding and so on.\n\n- HW that executes these models efficiently. (C/C++ hidden complexity)\n\n### GoMLX\n\n- Wraps XLA - access to all building blocks TF and JAX use\n\n### Examples\n\n- a CNN (convolutional neural network) without any Python, training it on [CIFAR-10](https://www.cs.toronto.edu/~kriz/cifar.html)\n\nas expected, Go code is longer and more explicit\n```go\n// define the model graph\nfunc C10ConvModel(mlxctx *mlxcontext.Context, spec any, inputs []*graph.Node) []*graph.Node {\n  batchedImages := inputs[0]\n  g := batchedImages.Graph()\n  dtype := batchedImages.DType()\n  batchSize := batchedImages.Shape().Dimensions[0]\n  logits := batchedImages\n\n  layerIdx := 0\n  nextCtx := func(name string) *mlxcontext.Context {\n    newCtx := mlxctx.Inf(\"%03d_%s\", layerIdx, name)\n    layerIdx++\n    return newCtx\n  }\n\n  // Convolution / activation layers\n  logits = layers.Convolution(nextCtx(\"conv\"), logits).Filters(32).KernelSize(3).PadSame().Done()\n  logits.AssertDims(batchSize, 32, 32, 32)\n  logits = activations.Relu(logits)\n  logits = layers.Convolution(nextCtx(\"conv\"), logits).Filters(32).KernelSize(3).PadSame().Done()\n  logits = activations.Relu(logits)\n  logits = graph.MaxPool(logits).Window(2).Done()\n  logits = layers.DropoutNormalize(nextCtx(\"dropout\"), logits, graph.Scalar(g, dtype, 0.3), true)\n  logits.AssertDims(batchSize, 16, 16, 32)\n\n  logits = layers.Convolution(nextCtx(\"conv\"), logits).Filters(64).KernelSize(3).PadSame().Done()\n  logits.AssertDims(batchSize, 16, 16, 64)\n  logits = activations.Relu(logits)\n  logits = layers.Convolution(nextCtx(\"conv\"), logits).Filters(64).KernelSize(3).PadSame().Done()\n  logits.AssertDims(batchSize, 16, 16, 64)\n  logits = activations.Relu(logits)\n  logits = graph.MaxPool(logits).Window(2).Done()\n  logits = layers.DropoutNormalize(nextCtx(\"dropout\"), logits, graph.Scalar(g, dtype, 0.5), true)\n  logits.AssertDims(batchSize, 8, 8, 64)\n\n  logits = layers.Convolution(nextCtx(\"conv\"), logits).Filters(128).KernelSize(3).PadSame().Done()\n  logits.AssertDims(batchSize, 8, 8, 128)\n  logits = activations.Relu(logits)\n  logits = layers.Convolution(nextCtx(\"conv\"), logits).Filters(128).KernelSize(3).PadSame().Done()\n  logits.AssertDims(batchSize, 8, 8, 128)\n  logits = activations.Relu(logits)\n  logits = graph.MaxPool(logits).Window(2).Done()\n  logits = layers.DropoutNormalize(nextCtx(\"dropout\"), logits, graph.Scalar(g, dtype, 0.5), true)\n  logits.AssertDims(batchSize, 4, 4, 128)\n\n  // Flatten logits, and apply dense layer\n  logits = graph.Reshape(logits, batchSize, -1)\n  logits = layers.Dense(nextCtx(\"dense\"), logits, true, 128)\n  logits = activations.Relu(logits)\n  logits = layers.DropoutNormalize(nextCtx(\"dropout\"), logits, graph.Scalar(g, dtype, 0.5), true)\n  numClasses := 10\n  logits = layers.Dense(nextCtx(\"dense\"), logits, true, numClasses)\n  return []*graph.Node{logits}\n}\n```\n\n```go\n// the classifier\nfunc main() {\n  flagCheckpoint := flag.String(\"checkpoint\", \"\", \"Directory to load checkpoint from\")\n  flag.Parse()\n\n  mlxctx := mlxcontext.New()\n  backend := backends.New()\n\n  _, err := checkpoints.Load(mlxctx).Dir(*flagCheckpoint).Done()\n  if err != nil {\n    panic(err)\n  }\n  mlxctx = mlxctx.Reuse() // helps sanity check the loaded context\n  exec := mlxcontext.NewExec(backend, mlxctx.In(\"model\"), func(mlxctx *mlxcontext.Context, image *graph.Node) *graph.Node {\n    // Convert our image to a tensor with batch dimension of size 1, and pass\n    // it to the C10ConvModel graph.\n    image = graph.ExpandAxes(image, 0) // Create a batch dimension of size 1.\n    logits := cnnmodel.C10ConvModel(mlxctx, nil, []*graph.Node{image})[0]\n    // Take the class with highest logit value, then remove the batch dimension.\n    choice := graph.ArgMax(logits, -1, dtypes.Int32)\n    return graph.Reshape(choice)\n  })\n\n  // classify takes a 32x32 image and returns a Cifar-10 classification according\n  // to the models. Use C10Labels to convert the returned class to a string\n  // name. The returned class is from 0 to 9.\n  classify := func(img image.Image) int32 {\n    input := images.ToTensor(dtypes.Float32).Single(img)\n    outputs := exec.Call(input)\n    classID := tensors.ToScalar[int32](outputs[0])\n    return classID\n  }\n\n  // ...\n}\n```\n\n- [a Gemma2 from Kaggle](https://www.kaggle.com/models/google/gemma-2) example\n\n```go\nvar (\n  flagDataDir   = flag.String(\"data\", \"\", \"dir with converted weights\")\n  flagVocabFile = flag.String(\"vocab\", \"\", \"tokenizer vocabulary file\")\n)\n\nfunc main() {\n  flag.Parse()\n  ctx := context.New()\n\n  // Load model weights from the checkpoint downloaded from Kaggle.\n  err := kaggle.ReadConvertedWeights(ctx, *flagDataDir)\n  if err != nil {\n    log.Fatal(err)\n  }\n\n  // Load tokenizer vocabulary.\n  vocab, err := sentencepiece.NewFromPath(*flagVocabFile)\n  if err != nil {\n    log.Fatal(err)\n  }\n\n  // Create a Gemma sampler and start sampling tokens.\n  sampler, err := samplers.New(backends.New(), ctx, vocab, 256)\n  if err != nil {\n    log.Fatalf(\"%+v\", err)\n  }\n\n  start := time.Now()\n  output, err := sampler.Sample([]string{\n    \"Are bees and wasps similar?\",\n  })\n  if err != nil {\n    log.Fatalf(\"%+v\", err)\n  }\n  fmt.Printf(\"\\tElapsed time: %s\\n\", time.Since(start))\n  fmt.Printf(\"Generated text:\\n%s\\n\", strings.Join(output, \"\\n\\n\"))\n}\n```\n\n### Conclusion\n\n- Using GoMLX can help implement ML inference in Go without Python\n\n- Since it's a relatively new project, it may be a little risky for production uses for now.\n\n---\n\nhttps://eli.thegreenplace.net/2024/gomlx-ml-in-go-without-python\n\nhttps://www.cs.toronto.edu/~kriz/cifar.html\n\nhttps://www.kaggle.com/models/google/gemma-2","title":"Go Commentary #22: GoMLX: ML in Go without Python","short_title":"#22 GoMLX: ML in Go without Python","description":"Running Machine Learning inference in Go without Python","tags":["golang","go-weekly"],"pinned":false,"draft":false,"hiring":false,"authors":["fuatto"],"date":"Fri Nov 29 2024 00:00:00 GMT+0000 (Coordinated Universal Time)","filePath":"playground/go/weekly/nov-29.md","slugArray":["playground","go","weekly","nov-29"]},{"content":"\n## [Prep: Golang comptime. Pure blasphemy](https://github.com/pijng/prep)\n\n- A small Go tool that enables compile-time function evaluation. By using `prep.Comptime`, you can evaluate functions at build time, replacing them with their computed results. Just like `comptime` from Zig. Except it's not.\n\n- Features\n  - Compile-Time Evaluation: Replace function calls with their computed results at build time.\n  - Simple Integration: Use prep as both a Go library and a standalone executable.\n  - Tooling Support: Easily integrate prep with your Go build process using -toolexec.\n\n```go\npackage main\n\nimport (\n  \"fmt\"\n  \"github.com/pijng/prep\"\n)\n\nfunc main() {\n  // This will be evaluated at compile-time\n  result := prep.Comptime(fibonacci(300))\n\n  fmt.Println(\"Result:\", result)\n}\n\nfunc fibonacci(n int) int {\n  fmt.Printf(\"calculating fibonacci for %d\\n\", n)\n\n  if n <= 1 {\n    return n\n  }\n\n  return fibonacci(n-1) + fibonacci(n-2)\n}\n```\n\n- Build `go build -a -toolexec=\"prep <absolute/path/to/project>\" main.go`\n\n- Limitations\n\n  - Currently, prep.Comptime only supports basic literals as arguments.\n\n  ```go\n  // Pass a basic literal directly\n  func job() {\n    prep.Comptime(myFunc(1))\n  }\n\n  // Use a variable with the value of basic literal from the same scope as wrapped function\n  func job() {\n    x := 1\n    y := 2\n    prep.Comptime(myFunc(x, y))\n  }\n  ```\n\n  - Only functions that can be fully resolved with the provided literal arguments can be evaluated at compile-time, therefore it is impossible to use any values from IO operations.\n\n## [go-sqlite3: Go bindings to SQLite using wazero](https://github.com/ncruces/go-sqlite3)\n\n- Go module **github.com/ncruces/go-sqlite3** is a cgo-free SQLite wrapper. It provides a **database/sql** compatible driver, as well as direct access to most of the C SQLite API.\n\n- It wraps a Wasm build of SQLite, and uses wazero as the runtime. Go, [wazero](https://github.com/tetratelabs/wazero) and x/sys are the only runtime dependencies.\n\n```go\n\nimport \"database/sql\"\nimport _ \"github.com/ncruces/go-sqlite3/driver\"\nimport _ \"github.com/ncruces/go-sqlite3/embed\"\n\nvar version string\ndb, _ := sql.Open(\"sqlite3\", \"file:demo.db\")\ndb.QueryRow(`SELECT sqlite_version()`).Scan(&version)\n```\n\n---\n\nhttps://github.com/pijng/prep\n\nhttps://github.com/ncruces/go-sqlite3\n\nhttps://github.com/tetratelabs/wazero\n","title":"Go Commentary #14: Golang compile-time evaluation and Go bindings to SQLite using wazero","short_title":"#14 Compile-time eval & SQLite with wazero","description":"A quick toolings for compile-time evaluation and SQLite wrapper with WebAssembly runtime for Go","tags":["golang","go-weekly"],"pinned":false,"draft":false,"hiring":false,"authors":["fuatto"],"date":"Fri Oct 04 2024 00:00:00 GMT+0000 (Coordinated Universal Time)","filePath":"playground/go/weekly/oct-04.md","slugArray":["playground","go","weekly","oct-04"]},{"content":"\n## [Using Go Embed](https://www.bytesizego.com/blog/go-embed)\n\n- The ```go:embed``` directive tells the Go compiler to include files and folders into the compiled binary at build time. This means your application can access these resources directly from memory without needing to read from the disk at runtime.\n\n- Usage: \n\n  - with a single file message.txt (\"hello from bytesizego!\")\n\n  ```go\n  package main\n\n  import (\n    _ \"embed\"\n    \"fmt\"\n  )\n\n  //go:embed message.txt\n  var message string\n\n  func main() {\n    fmt.Println(message) // hello from bytesizego!\n  }\n\n  ```\n\n  - with multiple files\n\n  ```go\n  package main\n\n  import (\n    _ \"embed\"\n    \"fmt\"\n  )\n\n  //go:embed messages/*.txt\n  var messages embed.FS\n\n  func main() {\n    files, _ := messages.ReadDir(\"messages\")\n    for _, file := range files {\n      data, _ := messages.ReadFile(\"messages/\" + file.Name())\n      fmt.Printf(\"File: %s\\nContent: %s\\n\\n\", file.Name(), data)\n    }\n  }\n  ```\n\n  - with a directory (the path specified in ReadFile is relative to the embedded root.)\n\n  ```go\n  package main\n\n  import (\n    \"embed\"\n    \"fmt\"\n  )\n\n  //go:embed static\n  var staticFiles embed.FS\n\n  func main() {\n    data, _ := staticFiles.ReadFile(\"static/index.html\")\n    fmt.Println(string(data))\n  }\n  ```\n\n\n- Limitations:\n\n  - File Size: Embedding large files can significantly increase your binary size.\n  - File Changes: Changes to the embedded files require recompilation.\n\n## [Reflecting on Go Reflection](https://www.dolthub.com/blog/2024-10-04-reflecting-on-reflect/)\n\n  - Context: using generative AI tooling, generated code using Reflect package\n\n  ```go\n  bsVal := reflect.ValueOf(blockStore).Elem()\n\n  tables := bsVal.FieldByName(\"tables\")\n\n  typ := tables.Type()\n  fmt.Printf(\"tables.Type: %v\\n\", typ)\n  for i := 0; i < typ.NumField(); i++ {\n    fmt.Printf(\"tables %d: %s\\n\", i, typ.Field(i).Name)\n  }\n  for i := 0; i < typ.NumMethod(); i++ {\n    fmt.Printf(\"method %d: %s\\n\", i, typ.Method(i).Name)\n  }\n  ```\n\n  - [Laws of Reflection](https://go.dev/blog/laws-of-reflection)\n\n    - Reflection goes from interface value to reflection object\n\n    - Reflection goes from reflection object to interface value\n\n    - To modify a reflection object, the value must be settable\n\n    => In short, the *Interface* method is the inverse of the *ValueOf* function, except that its result is always of static type interface{}.\n    Reiterating: Reflection goes from interface values to reflection objects and back again.\n\n  - Zeroth Law: Use reflect at your own peril. Misuse it, and it will *panic* with no regrets.\n\n---\n\nhttps://www.bytesizego.com/blog/go-embed\n\nhttps://www.dolthub.com/blog/2024-10-04-reflecting-on-reflect/\n","title":"Go Commentary #15: Using Go embed, and Reflect","short_title":"#15 Go embed and Reflect","description":"Quick notes on Go embed and Go Reflect","tags":["golang","go-weekly"],"pinned":false,"draft":false,"hiring":false,"authors":["fuatto"],"date":"Fri Oct 11 2024 00:00:00 GMT+0000 (Coordinated Universal Time)","filePath":"playground/go/weekly/oct-11.md","slugArray":["playground","go","weekly","oct-11"]},{"content":"\n## [Go sync.Map: The Right Tool for the Right Job](https://victoriametrics.com/blog/go-sync-map/index.html)\n\n- Context:\n\n  ```go\n  func main() {\n      m := make(map[string]int)\n\n      go func() {\n          for {\n              m[\"blog\"] = 1\n          }\n      }()\n\n      go func() {\n          for {\n              fmt.Println(m[\"blog\"])\n          }\n      }()\n\n      select{} // block-forever trick\n  }\n  // fatal error: concurrent map read and map write\n\n  ```\n\n- sync.Map:\n\n  - **sync.Map** takes care of all that locking (or atomic operations) for you - so no manual locking needed, and no worrying about race conditions.\n\n  - reading, writing, and deleting keys faster\n\n  ```go\n    func main() {\n      var syncMap sync.Map\n\n      // store a key-value pair\n      syncMap.Store(\"blog\", \"VictoriaMetrics\")\n\n      // load a value by key \"blog\"\n      value, ok := syncMap.Load(\"blog\")\n      fmt.Println(value, ok)\n\n      // delete a key-value pair by key \"blog\"\n      syncMap.Delete(\"blog\")\n      value, ok = syncMap.Load(\"blog\")\n      fmt.Println(value, ok)\n    }\n\n    // Output:\n    // VictoriaMetrics true\n    // <nil> false\n  ```\n\n  ```go\n  func (m *Map) Load(key any) (value any, ok bool)\n\n  func (m *Map) Store(key, value any)\n  func (m *Map) LoadOrStore(key, value any) (actual any, loaded bool)\n\n  func (m *Map) Delete(key any)\n  func (m *Map) LoadAndDelete(key any) (value any, loaded bool)\n  func (m *Map) CompareAndDelete(key, old any) (deleted bool)\n\n  func (m *Map) Swap(key, value any) (previous any, loaded bool)\n  func (m *Map) CompareAndSwap(key, old, new any) (swapped bool)\n\n  func (m *Map) Range(f func(key, value any) bool)\n  func (m *Map) Clear()\n  ```\n\n- even when iterate through a map while writing is not safe\n\n  ```go\n    func main() {\n      m := make(map[string]int)\n\n      go func() {\n          for {\n              m[\"blog\"] = 1\n          }\n      }()\n\n      go func() {\n          for {\n              for range m {\n                  fmt.Println(\"iterating\")\n              }\n          }\n      }()\n\n      select{} // block-forever trick\n    }\n\n    // fatal error: concurrent map iteration and map write\n  ```\n\n  - With **sync.Map.Range**, it’s designed to handle concurrent reads and writes during iteration without locking up the entire map. The trade-off, though, is that you might not get a perfectly consistent snapshot of the map while you’re iterating.\n\n\n- How it works:\n\n  - two separate native maps: the readonly map and the dirty map.\n\n  ```go\n    type Map struct {\n      mu Mutex\n      read atomic.Pointer[readOnly]\n      dirty map[any]*entry\n      misses int\n    }\n\n    type readOnly struct {\n      m       map[any]*entry\n      amended bool // true if the dirty map contains some key not in m.\n    }\n\n    type entry struct {\n      p atomic.Pointer[any]\n    }\n  ```\n\n  - readonly map is where the fast, lock-free lookups happen; built around an atomic.Pointer, which lets multiple goroutines access it without needing to lock anything. (ideal for scenarios where data is mostly being read and not frequently modified) \n  => the readonly map might not always hold the most up-to-date data, therefore dirty map\n\n  - dirty map stores any new entries that get added while the readonly map is still being used for lookups\n\n  ![syncmap_structure](assets/syncmap_structure.png)\n\n  => dirty map contains all the data from the readonly map, along with any new entries that haven’t yet been promoted to the readonly map\n\n  - when you update a value, all you need to do is update this pointer. Since both the readonly and dirty maps point to the same entry\n\n  ![double_pointer_indirection_syncmap](assets/double_pointer_indirection_syncmap.png)\n\n  - The behavior of the pointer in the entry struct defines the state of the entry in the map, and there are 3 possible states:\n\n    - **Normal state**: This is when the entry is valid. The pointer p is pointing to a real value, and the entry exists in those maps, meaning it’s actively in use and can be read without any issues.\n\n    - **Deleted state**: When an entry is deleted from a sync.Map, it’s not immediately removed from the readonly maps. Instead, the pointer p is simply set to nil, signaling that the entry has been deleted but still exists in the maps.\n\n    - **Expunged state**: This is a special state where the key is fully removed. The entry is marked with a special sentinel value that indicates it’s been completely deleted.\n\n  ![state_chart_syncmap](assets/state_chart_syncmap.png)\n\n\n---\n\nhttps://victoriametrics.com/blog/go-sync-map/index.html\n","title":"Go Commentary #16: Understand sync.Map","short_title":"#16 Understand sync.Map","description":"Understanding sync.Map and using the right tools for atomic operations in Go.","tags":["golang","go-weekly"],"pinned":false,"draft":false,"hiring":false,"authors":["fuatto"],"date":"Fri Oct 18 2024 00:00:00 GMT+0000 (Coordinated Universal Time)","filePath":"playground/go/weekly/oct-18.md","slugArray":["playground","go","weekly","oct-18"]},{"content":"\n## [Leveraging benchstat Projections in Go Benchmark Analysis!](https://www.bwplotka.dev/2024/go-microbenchmarks-benchstat/)\n\nContext: (golang.org/x/perf/cmd/benchstat)\n\n  - Old-school: \n\n    1. Creating the benchmark test code:\n\n      ```go\n        func BenchmarkFoo(b *testing.B) {\n          b.Run(...)\n        }\n      ```\n      \n    2. Running the benchmark for the version A of your code\n\n    ```bash\n      export bench=v1 && go test \\\n      -run '^$' -bench '^BenchmarkFoo' \\\n      -benchtime 5s -count 6 -cpu 2 -benchmem -timeout 999m \\\n      | tee ${bench}.txt \n    ```\n\n    3. Running the benchmark for the version B of your code \n\n    4. Analyze the A/B benchmark results\n    ```bash\n      benchstat base=v1.txt new=v2.txt\n    ``` \n\n  Example:\n\n  - to compare the encoding efficiency of the [Remote Write 1.0](https://prometheus.io/docs/specs/remote_write_spec/) protocol to the [2.0 version](https://prometheus.io/docs/specs/remote_write_spec_2_0/) for different sample sizes, ideally across different compressions and two different Go protobuf encoders (marshallers).\n\n    ```go\n      package across_versions\n\n      // ...\n\n      /*\n        export bench=v2 && go test \\\n          -run '^$' -bench '^BenchmarkEncode' \\\n          -benchtime 5s -count 6 -cpu 2 -benchmem -timeout 999m \\\n        | tee ${bench}.txt\n      */\n      func BenchmarkEncode(b *testing.B) {\n        for _, sampleCase := range sampleCases {\n          b.Run(fmt.Sprintf(\"sample=%v\", sampleCase.samples), func(b *testing.B) {\n            batch := utils.GeneratePrometheusMetricsBatch(sampleCase.config)\n\n            // Commenting out what we used in v1.txt\n            //msg := utils.ToV1(batch, true, true)\n            msg := utils.ToV2(utils.ConvertClassicToCustom(batch))\n\n            compr := newCompressor(\"zstd\")\n            marsh := newMarshaller(\"protobuf\")\n\n            b.ReportAllocs()\n            b.ResetTimer()\n            for i := 0; i < b.N; i++ {\n              out, err := marsh.marshal(msg)\n              testutil.Ok(b, err)\n\n              out = compr.compress(out)\n              b.ReportMetric(float64(len(out)), \"bytes/message\")\n            }\n          })\n        }\n      }\n    ```\n\n    ```bash\n    $ benchstat base=v1.txt new=v2.txt\n    goos: darwin\n    goarch: arm64\n    pkg: go-microbenchmarks-benchstat/across_versions\n                          │     base     │                new                 │\n                          │    sec/op    │   sec/op     vs base               │\n    Encode/sample=200-2      264.7µ ± 3%   107.0µ ± 4%  -59.58% (p=0.002 n=6)\n    Encode/sample=2000-2    2672.9µ ± 3%   900.3µ ± 3%  -66.32% (p=0.002 n=6)\n    Encode/sample=10000-2   13.335m ± 4%   3.299m ± 6%  -75.26% (p=0.002 n=6)\n    geomean                  2.113m        682.4µ       -67.70%\n\n                          │     base      │                 new                  │\n                          │ bytes/message │ bytes/message  vs base               │\n    Encode/sample=200-2      5.964Ki ± 1%    5.534Ki ± 0%   -7.21% (p=0.002 n=6)\n    Encode/sample=2000-2     45.88Ki ± 0%    33.45Ki ± 0%  -27.08% (p=0.002 n=6)\n    Encode/sample=10000-2    227.4Ki ± 0%    122.0Ki ± 3%  -46.33% (p=0.002 n=6)\n    geomean                  39.62Ki         28.27Ki       -28.66%\n\n                          │     base      │                 new                 │\n                          │     B/op      │     B/op      vs base               │\n    Encode/sample=200-2     336.76Ki ± 0%   64.02Ki ± 0%  -80.99% (p=0.002 n=6)\n    Encode/sample=2000-2    1807.7Ki ± 0%   370.8Ki ± 0%  -79.49% (p=0.002 n=6)\n    Encode/sample=10000-2    9.053Mi ± 0%   1.322Mi ± 0%  -85.40% (p=0.002 n=6)\n    geomean                  1.739Mi        317.9Ki       -82.14%\n\n                          │    base     │                 new                 │\n                          │  allocs/op  │ allocs/op   vs base                 │\n    Encode/sample=200-2      2.000 ± 0%   2.000 ± 0%        ~ (p=1.000 n=6) ¹\n    Encode/sample=2000-2    10.000 ± 0%   2.000 ± 0%  -80.00% (p=0.002 n=6)\n    Encode/sample=10000-2   16.000 ± 0%   2.000 ± 0%  -87.50% (p=0.002 n=6)\n    geomean                  6.840        2.000       -70.76%\n    ¹ all samples are equal\n\n    ```\n\n    -> Limitations:\n\n      - **Difficult to track changes**: easy to lost track of when current optimizations are not helping, and need to revert to previous states.\n\n      - **Accidental benchmark changes**: Unintentional modifications to the benchmark code can lead to unreliable comparisons and are hard to notice in this flow.\n\n      - **Limited collaboration**: hard to share/replicate, esp for bigger projects, where reviews need to ensure the reliability of the author’s benchmark/claimed results.\n\n  - New-school:\n\n\n  ```bash\n    export bench=allcases && go test \\\n    -run '^$' -bench '^BenchmarkFoo' \\\n    -benchtime 5s -count 6 -cpu 2 -benchmem -timeout 999m \\\n    | tee ${bench}.txt \n  ```\n\n  ```go\n  package across_cases\n\n  // ...\n\n  /*\n    export bench=allcases && go test \\\n      -run '^$' -bench '^BenchmarkEncode' \\\n      -benchtime 5s -count 6 -cpu 2 -benchmem -timeout 999m \\\n    | tee ${bench}.txt\n  */\n  func BenchmarkEncode(b *testing.B) {\n    for _, sampleCase := range sampleCases {\n      b.Run(fmt.Sprintf(\"sample=%v\", sampleCase.samples), func(b *testing.B) {\n        for _, compr := range compressionCases {\n          b.Run(fmt.Sprintf(\"compression=%v\", compr.name()), func(b *testing.B) {\n            for _, protoCase := range protoCases {\n              b.Run(fmt.Sprintf(\"proto=%v\", protoCase.name), func(b *testing.B) {\n                for _, marshaller := range marshallers {\n                  b.Run(fmt.Sprintf(\"encoder=%v\", marshaller.name()), func(b *testing.B) {\n                    msg := protoCase.msgFromConfigFn(sampleCase.config)\n\n                    b.ReportAllocs()\n                    b.ResetTimer()\n                    for i := 0; i < b.N; i++ {\n                      out, err := marshaller.marshal(msg)\n                      testutil.Ok(b, err)\n\n                      out = compr.compress(out)\n                      b.ReportMetric(float64(len(out)), \"bytes/message\")\n                    }\n                  })\n                }\n              })\n            }\n          })\n        }\n      })\n    }\n  }\n\n  var (\n    sampleCases = []struct {\n      samples int\n      config  utils.GenerateConfig\n    }{\n      {samples: 200, config: generateConfig200samples},\n      {samples: 2000, config: generateConfig2000samples},\n      {samples: 10000, config: generateConfig10000samples},\n    }\n    compressionCases = []*compressor{\n      newCompressor(\"\"),\n      newCompressor(remote.SnappyBlockCompression),\n      newCompressor(\"zstd\"),\n    }\n    protoCases = []struct {\n      name            string\n      msgFromConfigFn func(config utils.GenerateConfig) vtprotobufEnhancedMessage\n    }{\n      {\n        name: \"prometheus.WriteRequest\",\n        msgFromConfigFn: func(config utils.GenerateConfig) vtprotobufEnhancedMessage {\n          return utils.ToV1(utils.GeneratePrometheusMetricsBatch(config), true, true)\n        },\n      },\n      {\n        name: \"io.prometheus.write.v2.Request\",\n        msgFromConfigFn: func(config utils.GenerateConfig) vtprotobufEnhancedMessage {\n          return utils.ToV2(utils.ConvertClassicToCustom(utils.GeneratePrometheusMetricsBatch(config)))\n        },\n      },\n    }\n    marshallers = []*marshaller{\n      newMarshaller(\"protobuf\"), newMarshaller(\"vtprotobuf\"),\n    }\n  )\n\n  ```\n\n  - In Jan 2023, benchstat is [rewritten](https://cs.opensource.google/go/x/perf/+/02c55175bb825ade4507ee5d459ea6a1ab6e0af5)\n\n  ```bash\n  benchstat -row \".name /sample /compression /encoder\" -filter \"/compression:zstd /encoder:protobuf\" -col /proto allcases.txt\n  ```\n\n  ```bash\n  goos: darwin\n  goarch: arm64\n  pkg: go-microbenchmarks-benchstat/across_cases\n                            │ prometheus.WriteRequest │   io.prometheus.write.v2.Request   │\n                            │         sec/op          │   sec/op     vs base               │\n  Encode 200 zstd protobuf                 268.8µ ± 2%   103.3µ ± 7%  -61.57% (p=0.002 n=6)\n  Encode 2000 zstd protobuf               2671.4µ ± 5%   877.4µ ± 4%  -67.16% (p=0.002 n=6)\n  Encode 10000 zstd protobuf              12.834m ± 2%   3.059m ± 8%  -76.16% (p=0.002 n=6)\n  geomean                                  2.097m        652.1µ       -68.90%\n\n                            │ prometheus.WriteRequest │    io.prometheus.write.v2.Request    │\n                            │      bytes/message      │ bytes/message  vs base               │\n  Encode 200 zstd protobuf                5.949Ki ± 0%   5.548Ki ±  0%   -6.73% (p=0.002 n=6)\n  Encode 2000 zstd protobuf               45.90Ki ± 0%   33.49Ki ±  0%  -27.03% (p=0.002 n=6)\n  Encode 10000 zstd protobuf              227.8Ki ± 1%   121.4Ki ± 25%  -46.70% (p=0.002 n=6)\n  geomean                                 39.62Ki        28.26Ki        -28.68%\n\n                            │ prometheus.WriteRequest │   io.prometheus.write.v2.Request    │\n                            │          B/op           │     B/op      vs base               │\n  Encode 200 zstd protobuf               336.00Ki ± 0%   64.00Ki ± 0%  -80.95% (p=0.002 n=6)\n  Encode 2000 zstd protobuf              1799.8Ki ± 1%   368.0Ki ± 0%  -79.55% (p=0.002 n=6)\n  Encode 10000 zstd protobuf              9.015Mi ± 2%   1.312Mi ± 0%  -85.44% (p=0.002 n=6)\n  geomean                                 1.732Mi        316.3Ki       -82.17%\n\n                            │ prometheus.WriteRequest │   io.prometheus.write.v2.Request    │\n                            │        allocs/op        │ allocs/op   vs base                 │\n  Encode 200 zstd protobuf                  2.000 ± 0%   2.000 ± 0%        ~ (p=1.000 n=6) ¹\n  Encode 2000 zstd protobuf                10.000 ± 0%   2.000 ± 0%  -80.00% (p=0.002 n=6)\n  Encode 10000 zstd protobuf               16.000 ± 0%   2.000 ± 0%  -87.50% (p=0.002 n=6)\n  geomean                                   6.840        2.000       -70.76%\n  ¹ all samples are equal\n\n  ```\n\n  -> Limitations:\n\n  - Rerunning benchmarks with a large amount of cases takes significantly time (slower feedback loop!).\n  - It yields more complex benchmarking code, which makes it hard to iterate on, and spot places where you benchmark the testing code vs the portion of the code you wanted to.\n  - For continuous production use, it does not make sense to commit that benchmark with all cases, which are no longer being continued. It fits better to capture such a benchmark in some remote branch for future reference though.\n\nConclusion:\n\n  - Should use both in a hybrid approach, depending on your goals. \n\n  - Can even use more features like `-format csv` to export to sheets and render charts\n\n## [Go Plan9 Memo, Speeding Up Calculations 450%](https://pehringer.info/go_plan9_memo.html)\n\nContext \n\n- want more power than Go's concurrency, encounter SIMD - Same Instruction Muliple Data, that many languages either have compiler optimizations use simd or libs that support it.\n\n- \"I just want a package that offers a thin abstraction layer over arithmetic and bitwise simd operations.\"\n\n- Go's assembler uses [Plan9](https://9p.io/plan9/)'s assemblers guidance which uses target platforms instructions and registers with slight modifications to their names and usage. This means that x86 Plan9 is different then say arm Plan9.\n\n  ```\n  example\n  ┣━ AddInts_amd64.s\n  ┗━ main.go\n  ```\n\n  ```\n  // +build amd64\n\n  TEXT ·AddInts(SB), 4, $0\n      MOVL    left+0(FP), AX\n      MOVL    right+8(FP), BX\n      ADDL    BX, AX\n      MOVL    AX, int+16(FP)\n      RET\n  ```\n\n  ```go\n  package main\n\n  import \"fmt\"\n\n  func AddInts(left, right) int\n\n  func main() {\n      fmt.Println(\"1 + 2 = \", AddInts(1, 2))\n  }\n  ```\n\n  **LINE 1**: The file contains amd64 specific instructions, so we need to include a Go build tag to make sure Go does not try to compile this file for non x86 machines.\n\n  **LINE 3**: You can think of this line as the functions declaration. TEXT declares that this is a function or text section. ·AddInts(SB) specifies our functions name. 4 represents “NOSPLIT” which we need for some reason. And $0 is the size of the function’s stack frame (used for local variables). It’s zero in this case because we can easily fit everything into the registers.\n\n  **LINE 4 & 5**: Go’s calling convention is to put the function arguments onto the stack. So we MOVe both Long 32-bit values into the AX and BX registers by dereferencing the frame pointer (FP) with the appropriate offsets. The first argument is stored at offset 0. The second argument is stored at offset 8 (int’s only need 4 bytes but I think Go offsets all arguments by 8 to maintain memory alignment).\n\n  **LINE 6**: Add the Long 32-bit value in AX (left) with the Long 32-bit value in BX. And store the resulting Long 32-bit value in AX.\n\n  **LINE 7 & 8**: Go’s calling convention (as far as I can tell) is to put the function return values after its arguments on the stack. So we MOVe the Long 32-bit values in the AX register onto the stack by dereferencing the frame pointer (FP) with the appropriate offset. Which is 16 in this case.\n\n  ![](assets/SmallVectorsFloat32Addition.png)\n  ![](assets/MediumVectorsFloat32Addition.png)\n  ![](assets/LargeVectorsFloat32Addition.png)\n\nConclusion:\n\n- There is roughly a 200-450% speed up depending on the number of elements using Plan9. Hope this inspires others to use it.\n\n- The package currently supports x84 only, hopefully arm in future.\n\n---\n\nhttps://www.bwplotka.dev/2024/go-microbenchmarks-benchstat/\n\nhttps://pehringer.info/go_plan9_memo.html\n\n\n","title":"Go Commentary #17: Leveraging benchstat Projects in Go benchmark and Go Plan9 memo on 450% speeding up calculations","short_title":"#17 Leveraging benchstat Projects in Go benchmark and Go Plan9 memo on 450% speeding up calculations","description":"Understanding benchstat usage in Go benchmark and Go Plan9 on boosting up performance","tags":["golang","go-weekly"],"pinned":false,"draft":false,"hiring":false,"authors":["fuatto"],"date":"Fri Oct 25 2024 00:00:00 GMT+0000 (Coordinated Universal Time)","filePath":"playground/go/weekly/oct-25.md","slugArray":["playground","go","weekly","oct-25"]},{"content":"\n## [Script: Making it easy to write shell-like scripts in Go](https://github.com/bitfield/script)\n\n- Go library that simplifies writing shell-like scripts by providing a fluent API for common operations like file manipulation, text processing, and command execution.\n\n- Key features:\n\n  - Chainable methods for piping operations\n  - Easy file and directory operations\n  - Text processing functions (grep, sed-like replacements)\n  - Command execution and output handling\n  - Error handling integrated into the API\n\n- Usage:\n\n  ```go\n  // Read the contents of a file as a string\n  contents, err := script.File(\"test.txt\").String()\n\n  // Count the number of lines that match a pattern\n  numErrors, err := script.File(\"test.txt\").Match(\"Error\").CountLines()\n\n  // Filter all the results through some arbitrary Go function\n  script.Stdin().Match(\"Error\").FilterLine(strings.ToUpper).Stdout()\n\n\n  // Append the first 10 arguments to a file\n  script.Args().Concat().Match(\"Error\").First(10).AppendFile(\"/var/log/errors.txt\")\n\n  // Simple HTTP request\n  script.Get(\"https://wttr.in/London?format=3\").Stdout()\n  // Output:\n  // London: 🌦   +13°C\n  ```\n\n## [Go Telemetry](https://go.dev/blog/gotelemetry)\n\n- Context:\n\n  - the Go toolchain can collect usage and breakage statistics that help the Go team understand how the Go toolchain is used and how well it is working.\n\n  ![](assets/dataflow.png)\n\n- Usage:\n\n  ```\n  go telemetry on\n\n  go telemetry off\n\n  // revert to the default mode of local-only telemetry\n  go telemetry local\n  ```\n\n---\n\nhttps://github.com/bitfield/script\n\nhttps://go.dev/blog/gotelemetry\n\nhttps://go.dev/doc/telemetry\n","title":"Go Commentary #10: Script, Telemetry","short_title":"#10 Script, Telemetry","description":"Exploring a Go library for shell-like scripting and Go's telemetry feature.","tags":["golang","go-weekly","networking"],"pinned":false,"draft":false,"hiring":false,"authors":["fuatto"],"date":"Fri Sep 06 2024 00:00:00 GMT+0000 (Coordinated Universal Time)","filePath":"playground/go/weekly/sep-06.md","slugArray":["playground","go","weekly","sep-06"]},{"content":"\n## [Go Survey](https://google.qualtrics.com/jfe/form/SV_ei0CDV2K9qQIsp8?s=b)\n\n- The feedbacks from us - Gophers will help Go Team to understand:\n  - How Go is being used across various industries and organizations\n  - The challenges you face as a Go developer\n  - The features and improvements you’d like to see in future releases\n  - How we can better support the thriving Go community\n\n## [Building LLM-powered applications in Go](https://go.dev/blog/llmpowered)\n\nAh, the sweet smell of progress mixed with the stench of hype. Welcome to the brave new world of Go, where Large Language Models reign supreme and every developer suddenly fancies themselves an AI expert. But before we dive headfirst into this cesspool of buzzwords and overengineered solutions, let's take a moment to examine what's really going on in our beloved gopher-land.\n\nThe LLM Gold Rush: Go's Ticket to Relevance? It seems the Go team has finally woken up to the fact that LLMs are the new darling of the tech world. Their recent blog post on \"Building LLM-powered applications in Go\" reads like a desperate attempt to stay relevant in a landscape dominated by Python frameworks. But here's the kicker - they might actually be onto something.\n\nGo's strengths in concurrency and networking make it a natural fit for the distributed nature of LLM applications. It's like watching a middle-aged dad suddenly discover he's got a knack for TikTok dances - unexpected, slightly uncomfortable, but oddly compelling.\n\nLet's look at their RAG server example:\n\n```Go\nfunc main() {\n\tctx := context.Background()\n\twvClient, err := initWeaviate(ctx)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tapiKey := os.Getenv(\"GEMINI_API_KEY\")\n\tgenaiClient, err := genai.NewClient(ctx, option.WithAPIKey(apiKey))\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer genaiClient.Close()\n\n\tserver := &ragServer{\n\t\tctx:      ctx,\n\t\twvClient: wvClient,\n\t\tgenModel: genaiClient.GenerativeModel(generativeModelName),\n\t\tembModel: genaiClient.EmbeddingModel(embeddingModelName),\n\t}\n\n\tmux := http.NewServeMux()\n\tmux.HandleFunc(\"POST /add/\", server.addDocumentsHandler)\n\tmux.HandleFunc(\"POST /query/\", server.queryHandler)\n\n\tport := cmp.Or(os.Getenv(\"SERVERPORT\"), \"9020\")\n\taddress := \"localhost:\" + port\n\tlog.Println(\"listening on\", address)\n\tlog.Fatal(http.ListenAndServe(address, mux))\n}\n```\n\n[full version at](https://github.com/golang/example/blob/master/ragserver/ragserver/main.go)\n\nSimple, clean, and to the point. No fancy decorators, no convoluted class hierarchies - just good old Go simplicity. It's almost refreshing in a world of over-abstracted Python monstrosities.\n\nBut here's where things get interesting. The Go team isn't content with just providing raw tools; they're pushing frameworks like LangChainGo and Genkit. It's as if they've looked at the Python ecosystem and thought, \"Hey, we can create incomprehensible abstractions too!\"\n\nLangChainGo: Because We Needed Another Layer of Abstraction LangChainGo promises to be the silver bullet for all your LLM needs. Want to switch vector databases without rewriting your entire codebase? LangChainGo's got you covered:\n\n```Go\ntype VectorStore interface {\n    AddDocuments(ctx context.Context, docs []schema.Document, options ...Option) ([]string, error)\n    SimilaritySearch(ctx context.Context, query string, numDocuments int, options ...Option) ([]schema.Document, error)\n}\n```\n\nIt's a beautiful interface, really. So clean, so abstract. But let's be real - how often are you actually switching vector databases? This is solution in search of a problem, the software equivalent of a Swiss Army knife when all you needed was a bottle opener.\n\nGenkit: Google's Answer to... Everything? Not to be outdone, Google throws its hat into the ring with Genkit. It's like LangChain, but with that special Google touch that screams, \"We'll deprecate this in two years, but trust us for now!\"\n\nGenkit promises \"production features\" and \"integrated developer tooling.\" Because apparently, what the world really needed was another way to manage prompts and deployments. It's as if Google looked at the mess of AI tooling and thought, \"You know what this needs? More complexity!\"\n\n### [The Ergo Framework: Erlang's Ghost Haunts Go](https://github.com/ergo-services/ergo)\n\nJust when you thought we couldn't possibly need another framework, along comes Ergo. It's bringing the actor model to Go, because apparently, we all miss the days of Erlang and its byzantine approach to concurrency.\n\nErgo boasts features like _Network Transparency_, _Observability_ and a _Supervisor Tree_. It's like they've taken every buzzword from distributed systems and thrown them into a blender. The result? A framework that promises to solve problems you didn't even know you had.\n\nHere's a taste of their \"Quick Start\":\n\n```bash\n$ ergo -init MyNode \\\n      -with-app MyApp \\\n      -with-sup MyApp:MySup \\\n      -with-actor MySup:MyActor \\\n      -with-web MyWeb \\\n      -with-actor MyActor2 \\\n      -with-observer\n```\n\nBecause nothing says \"simplicity\" like a command line that looks like it was designed by a committee of enterprise architects.\n\nThe Gopher's Dilemma So here we are, standing at the crossroads of Go's future. On one side, we have the simplicity and performance that made Go great. On the other, we have a smorgasbord of frameworks and abstractions promising to turn Go into a one-stop shop for all your LLM needs.\n\nThe question is, do we really need all this? Are we solving real problems, or are we just creating new ones in the name of \"progress\"?\n\nDon't get me wrong - it's exciting to see Go evolving and adapting to new challenges. But let's not lose sight of what made Go great in the first place. We don't need to become Python or Erlang. We need to be the best damn Go we can be.\n\nAs we forge ahead into this brave new world of LLMs and AI, let's remember the virtues of simplicity and pragmatism. By all means, let's embrace new technologies and paradigms. But let's do it the Go way - with clear, concise code that solves real problems, not imaginary ones.\n\nThe future of Go in the LLM era is bright, but it's up to us to ensure it doesn't become a tangled mess of frameworks and abstractions. Let's build tools that empower developers, not confuse them. After all, isn't that what Go was all about in the first place?\n\nRemember, in the world of software development, the only constant is change. But that doesn't mean we have to lose our way. Stay sharp, stay critical, and above all, stay Go.\n\n---\n\nhttps://go.dev/blog/survey2024-h2\n\nhttps://go.dev/blog/llmpowered\n\nhttps://github.com/ergo-services/ergo\n","title":"Go Commentary #11: The Gopher's LLM Revolution - Actors, Frameworks, and the Future of Go","short_title":"#11 Actors, Frameworks, and the Future of Go","description":"A critical look at Go's evolving role in the LLM ecosystem and the frameworks shaping its future","tags":["golang","go-weekly"],"pinned":false,"draft":false,"hiring":false,"authors":["fuatto"],"date":"Fri Sep 13 2024 00:00:00 GMT+0000 (Coordinated Universal Time)","filePath":"playground/go/weekly/sep-13.md","slugArray":["playground","go","weekly","sep-13"]},{"content":"\n## [kl: An interactive Kubernetes log viewer for your terminal](https://github.com/robinovitch61/kl)\n\nAn interactive Kubernetes log viewer for your terminal.\n\n```\n// Example usage of kl\nkl --context my-context,other-context -n default,other-ns\n```\n\n![](assets/kl1.png)\n\n![](assets/kl2.png)\n\n![](assets/kl3.png)\n\n![](assets/kl4.png)\n\n- This tool allows you to view logs across multiple containers, pods, and even clusters. It's like kubectl logs on steroids, which begs the question: why isn't this functionality built into kubectl itself? The fragmentation of the Kubernetes ecosystem continues unabated, with each new tool solving a problem that arguably shouldn't exist in the first place.\n\n## [Restish](https://rest.sh/#/)\n\n- A \"CLI for interacting with REST-ish HTTP APIs.\" Because apparently, cURL and HTTPie weren't enough. Restish boasts features like automatic API discovery and generated commands:\n\n```\n# Perform an HTTP GET request\n$ restish api.rest.sh/types\n\n# Above is equivalent to:\n$ restish GET https://api.rest.sh/types\n```\n\n```https\nHTTP/2.0 200 OK\nContent-Length: 278\nContent-Type: application/cbor\nDate: Tue, 19 Apr 2022 21:17:58 GMT\n\n{\n  $schema: \"https://api.rest.sh/schemas/TypesModel.json\"\n  boolean: true\n  integer: 42\n  nullable: null\n  number: 123.45\n  object: {\n    binary: 0xdeadc0de\n    binary_long: 0x00010203040506070809...\n    date: 2022-04-23\n    date_time: 2022-04-23T21:41:58.20449651Z\n    url: \"https://rest.sh/\"\n  }\n  string: \"Hello, world!\"\n  tags: [\"example\", \"short\"]\n}\n```\n\nWhile it's undeniably clever, one has to wonder: are we solving real problems, or are we just creating more abstraction layers to satisfy our insatiable appetite for \"developer experience\"? The irony of using a CLI to interact with REST APIs – which were designed for machine-to-machine communication – is not lost on me.\n\n## [A fast full-text cli reader (works also with lobste.rs articles content)](https://github.com/piqoni/cast-text)\n\n- A \"zero latency, easy-to-use full-text news terminal reader.\" Yes, you read that correctly. In 2024, we're excited about reading RSS feeds in the terminal. It's as if we've come full circle, rejecting the rich multimedia experiences of modern web browsers in favor of monospaced fonts and ANSI color codes.\n\n```\n// Reading lobste.rs with cast-text\ncast-text -rss https://lobste.rs/rss\n```\n\n![](assets/cast-text.png)\n\nThe Pendulum Swings This trend towards CLI tools in Go is part of a larger pendulum swing in our industry. We've gone from command-line interfaces to graphical UIs, from desktop applications to web apps, and now we're seeing a resurgence of terminal-based tools. It's as if we're collectively suffering from option paralysis, overwhelmed by the complexity of modern software stacks and yearning for the perceived simplicity of text-based interfaces.\n\nBut here's the rub: these new CLI tools are often just as complex as their graphical counterparts. They're built on layers of abstractions, requiring knowledge of specific command syntaxes and flags. We haven't simplified; we've just shifted the complexity to a different domain.\n\n---\n\nhttps://github.com/robinovitch61/kl\n\nhttps://rest.sh/#/\n\nhttps://github.com/piqoni/cast-text\n","title":"Go Commentary #12: CLI Renaissance with Kubernetes, REST, and Terminal Readers in the Age of Complexity","short_title":"#12 CLI Tools for K8s, REST, and Terminals","description":"A critical examination of Go's resurgence in CLI tool development, exploring recent projects in Kubernetes log viewing, REST API interaction, and terminal-based readers, while questioning the industry's shift back to command-line interfaces.","tags":["golang","go-weekly","llm"],"pinned":false,"draft":false,"hiring":false,"authors":["fuatto"],"date":"Fri Sep 20 2024 00:00:00 GMT+0000 (Coordinated Universal Time)","filePath":"playground/go/weekly/sep-20.md","slugArray":["playground","go","weekly","sep-20"]},{"content":"\n## [Register Allocation in the Go Compiler](https://developers.redhat.com/articles/2024/09/24/go-compiler-register-allocation#go_s_register_allocator__a_high_level_view)\n\nRed Hat has graced us with a deep dive into Go's register allocation in the compiler. It's a fascinating peek under the hood, if you're into that sort of thing. But let's be real: how many of us are actually going to benefit from understanding the intricacies of register allocation? It's like knowing the exact chemical composition of the asphalt you're driving on – interesting, but ultimately irrelevant to most people's daily commute.\n\nThe Go team's obsession with compiler speed is admirable, I suppose. They've managed to create a register allocator that's \"very fast,\" taking up to 20% of the entire optimization pipeline's time. Bravo. But at what cost?\n\n```go\n// Imagine this is your codebase after Go's \"fast\" register allocation\nfunc someFunction() {\n    // Oops, your variable got spilled into a loop\n    for i := 0; i < 1000000; i++ {\n        // Load from memory, use, store back to memory\n        // Repeat ad nauseam\n    }\n}\n```\n\nSure, your compile times are blazing fast. But your runtime? Well, that's a different story. The lack of a global view in the register allocator means you might end up with code that's about as efficient as a government bureaucracy.\n\nBut hey, at least it compiles quickly, right? Because that's what really matters in production – how fast you can push out potentially suboptimal code.\n\n## [BBQvec: An open-source, embedded vector index for Rust and Go](https://blog.daxe.ai/p/bbqvec-a-scalable-vector-search-library)\n\nSpeaking of optimizations, let's talk about the latest darling of the AI world: vector search. Daxe has thrown their hat into the ring with BBQvec, a \"scalable vector search library.\" Because clearly, what the world needs is another way to find the nearest neighbor in high-dimensional space.\n\nDon't get me wrong, vector search is useful. But the way the industry is salivating over it, you'd think it was the second coming of sliced bread. Every startup and their dog is now implementing some form of vector search, often without really understanding why or if they even need it.\n\n```go\n// The modern tech stack, apparently\ntype ModernAIStartup struct {\n    VectorSearch    *FancyVectorLib\n    LLM             *ChatGPT\n    ActualProduct   *WhoNeedsThis\n}\n```\n\nBBQvec claims to be all about scale, handling \"many billions of vectors.\" That's great, but let's pause for a moment. How many companies actually need to search through billions of vectors? And of those that do, how many are doing it for anything more than vanity metrics or to impress VCs?\n\nThe algorithm itself is clever, I'll give them that. Using random orthonormal basis sets and bitmaps for indexing is an interesting approach. But it's telling that their big selling point is how fast they can build the index, not necessarily how accurate or fast the actual searches are.\n\n---\n\nhttps://developers.redhat.com/articles/2024/09/24/go-compiler-register-allocation#go_s_register_allocator__a_high_level_view\n\nhttps://blog.daxe.ai/p/bbqvec-a-scalable-vector-search-library\n","title":"Go Commentary #13: Compiler Quests and Vector Vexations","short_title":"#13 Compiler Quests and Vector Vexations","description":"A scathing look at Go's compiler internals and the vector search gold rush, exposing the industry's obsession with speed over substance","tags":["golang","go-weekly","llm"],"pinned":false,"draft":false,"hiring":false,"authors":["fuatto"],"date":"Fri Sep 27 2024 00:00:00 GMT+0000 (Coordinated Universal Time)","filePath":"playground/go/weekly/sep-27.md","slugArray":["playground","go","weekly","sep-27"]}],"isListPage":true},"__N_SSG":true}